
melodica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003018  08003018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003084  08003084  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003084  08003084  00004084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800308c  0800308c  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003094  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  080030a0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  080030a0  000050f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b959  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be6  00000000  00000000  0001098d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00012578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000842  00000000  00000000  00013020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000111e1  00000000  00000000  00013862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d314  00000000  00000000  00024a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a129  00000000  00000000  00031d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009be80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025e0  00000000  00000000  0009bec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009e4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003000 	.word	0x08003000

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003000 	.word	0x08003000

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fbdd 	bl	8000c6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f813 	bl	80004dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f909 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ba:	f000 f8d5 	bl	8000668 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004be:	f000 f87f 	bl	80005c0 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);
 80004c2:	4b05      	ldr	r3, [pc, #20]	@ (80004d8 <main+0x30>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 fda9 	bl	800201c <HAL_TIM_Base_Start>

  uint8_t notes[32];
  while (1)
  {
	  ReadKeyboard(notes);
 80004ca:	003b      	movs	r3, r7
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 fa33 	bl	8000938 <ReadKeyboard>
  {
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	e7f9      	b.n	80004ca <main+0x22>
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	20000028 	.word	0x20000028

080004dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b099      	sub	sp, #100	@ 0x64
 80004e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e2:	242c      	movs	r4, #44	@ 0x2c
 80004e4:	193b      	adds	r3, r7, r4
 80004e6:	0018      	movs	r0, r3
 80004e8:	2334      	movs	r3, #52	@ 0x34
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f002 fd5b 	bl	8002fa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f2:	2318      	movs	r3, #24
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	2314      	movs	r3, #20
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f002 fd53 	bl	8002fa8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	2318      	movs	r3, #24
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f002 fd4c 	bl	8002fa8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000510:	4b29      	ldr	r3, [pc, #164]	@ (80005b8 <SystemClock_Config+0xdc>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a29      	ldr	r2, [pc, #164]	@ (80005bc <SystemClock_Config+0xe0>)
 8000516:	401a      	ands	r2, r3
 8000518:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <SystemClock_Config+0xdc>)
 800051a:	2180      	movs	r1, #128	@ 0x80
 800051c:	0109      	lsls	r1, r1, #4
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000522:	0021      	movs	r1, r4
 8000524:	187b      	adds	r3, r7, r1
 8000526:	2202      	movs	r2, #2
 8000528:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800052a:	187b      	adds	r3, r7, r1
 800052c:	2201      	movs	r2, #1
 800052e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2210      	movs	r2, #16
 8000534:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000536:	187b      	adds	r3, r7, r1
 8000538:	2202      	movs	r2, #2
 800053a:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800053c:	187b      	adds	r3, r7, r1
 800053e:	2200      	movs	r2, #0
 8000540:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000542:	187b      	adds	r3, r7, r1
 8000544:	2280      	movs	r2, #128	@ 0x80
 8000546:	02d2      	lsls	r2, r2, #11
 8000548:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800054a:	187b      	adds	r3, r7, r1
 800054c:	2280      	movs	r2, #128	@ 0x80
 800054e:	03d2      	lsls	r2, r2, #15
 8000550:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	0018      	movs	r0, r3
 8000556:	f000 fe55 	bl	8001204 <HAL_RCC_OscConfig>
 800055a:	1e03      	subs	r3, r0, #0
 800055c:	d001      	beq.n	8000562 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800055e:	f000 f91b 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000562:	2118      	movs	r1, #24
 8000564:	187b      	adds	r3, r7, r1
 8000566:	220f      	movs	r2, #15
 8000568:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2203      	movs	r2, #3
 800056e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000570:	187b      	adds	r3, r7, r1
 8000572:	2200      	movs	r2, #0
 8000574:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000582:	187b      	adds	r3, r7, r1
 8000584:	2101      	movs	r1, #1
 8000586:	0018      	movs	r0, r3
 8000588:	f001 f9b8 	bl	80018fc <HAL_RCC_ClockConfig>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000590:	f000 f902 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000594:	003b      	movs	r3, r7
 8000596:	2202      	movs	r2, #2
 8000598:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800059a:	003b      	movs	r3, r7
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005a0:	003b      	movs	r3, r7
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 fbce 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
 80005a8:	1e03      	subs	r3, r0, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80005ac:	f000 f8f4 	bl	8000798 <Error_Handler>
  }
}
 80005b0:	46c0      	nop			@ (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b019      	add	sp, #100	@ 0x64
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40007000 	.word	0x40007000
 80005bc:	ffffe7ff 	.word	0xffffe7ff

080005c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005c6:	2308      	movs	r3, #8
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	0018      	movs	r0, r3
 80005cc:	2310      	movs	r3, #16
 80005ce:	001a      	movs	r2, r3
 80005d0:	2100      	movs	r1, #0
 80005d2:	f002 fce9 	bl	8002fa8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005d6:	003b      	movs	r3, r7
 80005d8:	0018      	movs	r0, r3
 80005da:	2308      	movs	r3, #8
 80005dc:	001a      	movs	r2, r3
 80005de:	2100      	movs	r1, #0
 80005e0:	f002 fce2 	bl	8002fa8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <MX_TIM2_Init+0xa0>)
 80005e6:	2280      	movs	r2, #128	@ 0x80
 80005e8:	05d2      	lsls	r2, r2, #23
 80005ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80005ec:	4b1c      	ldr	r3, [pc, #112]	@ (8000660 <MX_TIM2_Init+0xa0>)
 80005ee:	2247      	movs	r2, #71	@ 0x47
 80005f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_TIM2_Init+0xa0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80005f8:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_TIM2_Init+0xa0>)
 80005fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000664 <MX_TIM2_Init+0xa4>)
 80005fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_TIM2_Init+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000604:	4b16      	ldr	r3, [pc, #88]	@ (8000660 <MX_TIM2_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800060a:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_TIM2_Init+0xa0>)
 800060c:	0018      	movs	r0, r3
 800060e:	f001 fcc5 	bl	8001f9c <HAL_TIM_Base_Init>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000616:	f000 f8bf 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800061a:	2108      	movs	r1, #8
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2280      	movs	r2, #128	@ 0x80
 8000620:	0152      	lsls	r2, r2, #5
 8000622:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000624:	187a      	adds	r2, r7, r1
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_TIM2_Init+0xa0>)
 8000628:	0011      	movs	r1, r2
 800062a:	0018      	movs	r0, r3
 800062c:	f001 fd3a 	bl	80020a4 <HAL_TIM_ConfigClockSource>
 8000630:	1e03      	subs	r3, r0, #0
 8000632:	d001      	beq.n	8000638 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000634:	f000 f8b0 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000638:	003b      	movs	r3, r7
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063e:	003b      	movs	r3, r7
 8000640:	2200      	movs	r2, #0
 8000642:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000644:	003a      	movs	r2, r7
 8000646:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_TIM2_Init+0xa0>)
 8000648:	0011      	movs	r1, r2
 800064a:	0018      	movs	r0, r3
 800064c:	f001 feec 	bl	8002428 <HAL_TIMEx_MasterConfigSynchronization>
 8000650:	1e03      	subs	r3, r0, #0
 8000652:	d001      	beq.n	8000658 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000654:	f000 f8a0 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000658:	46c0      	nop			@ (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b006      	add	sp, #24
 800065e:	bd80      	pop	{r7, pc}
 8000660:	20000028 	.word	0x20000028
 8000664:	0000ffff 	.word	0x0000ffff

08000668 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 800066e:	4a15      	ldr	r2, [pc, #84]	@ (80006c4 <MX_USART2_UART_Init+0x5c>)
 8000670:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 8000672:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 8000674:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <MX_USART2_UART_Init+0x60>)
 8000676:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067e:	4b10      	ldr	r3, [pc, #64]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000684:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 8000686:	2200      	movs	r2, #0
 8000688:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 800068c:	220c      	movs	r2, #12
 800068e:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 8000692:	2200      	movs	r2, #0
 8000694:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000696:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 8000698:	2200      	movs	r2, #0
 800069a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069c:	4b08      	ldr	r3, [pc, #32]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 800069e:	2200      	movs	r2, #0
 80006a0:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a2:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a8:	4b05      	ldr	r3, [pc, #20]	@ (80006c0 <MX_USART2_UART_Init+0x58>)
 80006aa:	0018      	movs	r0, r3
 80006ac:	f001 ff14 	bl	80024d8 <HAL_UART_Init>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 80006b4:	f000 f870 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	46c0      	nop			@ (mov r8, r8)
 80006c0:	20000068 	.word	0x20000068
 80006c4:	40004400 	.word	0x40004400
 80006c8:	00007a12 	.word	0x00007a12

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	@ 0x24
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	240c      	movs	r4, #12
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2314      	movs	r3, #20
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f002 fc63 	bl	8002fa8 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006e6:	4b2a      	ldr	r3, [pc, #168]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006e8:	2101      	movs	r1, #1
 80006ea:	430a      	orrs	r2, r1
 80006ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006ee:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006f2:	2201      	movs	r2, #1
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <MX_GPIO_Init+0xc4>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fe:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000700:	2102      	movs	r1, #2
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000706:	4b22      	ldr	r3, [pc, #136]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070a:	2202      	movs	r2, #2
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, S0_Pin|S1_Pin|S2_Pin|S3_Pin, GPIO_PIN_RESET);
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_GPIO_Init+0xc8>)
 8000714:	2200      	movs	r2, #0
 8000716:	21f0      	movs	r1, #240	@ 0xf0
 8000718:	0018      	movs	r0, r3
 800071a:	f000 fd56 	bl	80011ca <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	22f0      	movs	r2, #240	@ 0xf0
 8000722:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000730:	193a      	adds	r2, r7, r4
 8000732:	23a0      	movs	r3, #160	@ 0xa0
 8000734:	05db      	lsls	r3, r3, #23
 8000736:	0011      	movs	r1, r2
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fbbb 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Note_input_1_Pin Note_input_2_Pin */
  GPIO_InitStruct.Pin = Note_input_1_Pin|Note_input_2_Pin;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	22c0      	movs	r2, #192	@ 0xc0
 8000742:	0152      	lsls	r2, r2, #5
 8000744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000746:	193b      	adds	r3, r7, r4
 8000748:	2200      	movs	r2, #0
 800074a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074c:	193b      	adds	r3, r7, r4
 800074e:	2202      	movs	r2, #2
 8000750:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	193a      	adds	r2, r7, r4
 8000754:	23a0      	movs	r3, #160	@ 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fbaa 	bl	8000eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin S3_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|S3_Pin;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	22f0      	movs	r2, #240	@ 0xf0
 8000766:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000768:	187b      	adds	r3, r7, r1
 800076a:	2201      	movs	r2, #1
 800076c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800076e:	187b      	adds	r3, r7, r1
 8000770:	2202      	movs	r2, #2
 8000772:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000774:	187b      	adds	r3, r7, r1
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077a:	187b      	adds	r3, r7, r1
 800077c:	4a05      	ldr	r2, [pc, #20]	@ (8000794 <MX_GPIO_Init+0xc8>)
 800077e:	0019      	movs	r1, r3
 8000780:	0010      	movs	r0, r2
 8000782:	f000 fb97 	bl	8000eb4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b009      	add	sp, #36	@ 0x24
 800078c:	bd90      	pop	{r4, r7, pc}
 800078e:	46c0      	nop			@ (mov r8, r8)
 8000790:	40021000 	.word	0x40021000
 8000794:	50000400 	.word	0x50000400

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <note_on>:
#include "midi.h"

extern UART_HandleTypeDef huart2;

void note_on(uint8_t channel, uint8_t key, uint8_t velocity) {
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	0004      	movs	r4, r0
 80007ac:	0008      	movs	r0, r1
 80007ae:	0011      	movs	r1, r2
 80007b0:	1dfb      	adds	r3, r7, #7
 80007b2:	1c22      	adds	r2, r4, #0
 80007b4:	701a      	strb	r2, [r3, #0]
 80007b6:	1dbb      	adds	r3, r7, #6
 80007b8:	1c02      	adds	r2, r0, #0
 80007ba:	701a      	strb	r2, [r3, #0]
 80007bc:	1d7b      	adds	r3, r7, #5
 80007be:	1c0a      	adds	r2, r1, #0
 80007c0:	701a      	strb	r2, [r3, #0]
    MIDI_SendByte(NOTE_ON | (channel & 0b00001111));
 80007c2:	1dfb      	adds	r3, r7, #7
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	220f      	movs	r2, #15
 80007ca:	4013      	ands	r3, r2
 80007cc:	b25b      	sxtb	r3, r3
 80007ce:	2270      	movs	r2, #112	@ 0x70
 80007d0:	4252      	negs	r2, r2
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 f845 	bl	8000868 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & key);
 80007de:	1dbb      	adds	r3, r7, #6
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	227f      	movs	r2, #127	@ 0x7f
 80007e4:	4013      	ands	r3, r2
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	0018      	movs	r0, r3
 80007ea:	f000 f83d 	bl	8000868 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & velocity);
 80007ee:	1d7b      	adds	r3, r7, #5
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	227f      	movs	r2, #127	@ 0x7f
 80007f4:	4013      	ands	r3, r2
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	0018      	movs	r0, r3
 80007fa:	f000 f835 	bl	8000868 <MIDI_SendByte>
}
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b003      	add	sp, #12
 8000804:	bd90      	pop	{r4, r7, pc}

08000806 <note_off>:

void note_off(uint8_t channel, uint8_t key, uint8_t velocity) {
 8000806:	b590      	push	{r4, r7, lr}
 8000808:	b083      	sub	sp, #12
 800080a:	af00      	add	r7, sp, #0
 800080c:	0004      	movs	r4, r0
 800080e:	0008      	movs	r0, r1
 8000810:	0011      	movs	r1, r2
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	1c22      	adds	r2, r4, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	1dbb      	adds	r3, r7, #6
 800081a:	1c02      	adds	r2, r0, #0
 800081c:	701a      	strb	r2, [r3, #0]
 800081e:	1d7b      	adds	r3, r7, #5
 8000820:	1c0a      	adds	r2, r1, #0
 8000822:	701a      	strb	r2, [r3, #0]
    MIDI_SendByte(NOTE_OFF | (channel & 0b00001111));
 8000824:	1dfb      	adds	r3, r7, #7
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	b25b      	sxtb	r3, r3
 800082a:	220f      	movs	r2, #15
 800082c:	4013      	ands	r3, r2
 800082e:	b25b      	sxtb	r3, r3
 8000830:	2280      	movs	r2, #128	@ 0x80
 8000832:	4252      	negs	r2, r2
 8000834:	4313      	orrs	r3, r2
 8000836:	b25b      	sxtb	r3, r3
 8000838:	b2db      	uxtb	r3, r3
 800083a:	0018      	movs	r0, r3
 800083c:	f000 f814 	bl	8000868 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & key);
 8000840:	1dbb      	adds	r3, r7, #6
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	227f      	movs	r2, #127	@ 0x7f
 8000846:	4013      	ands	r3, r2
 8000848:	b2db      	uxtb	r3, r3
 800084a:	0018      	movs	r0, r3
 800084c:	f000 f80c 	bl	8000868 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & velocity);
 8000850:	1d7b      	adds	r3, r7, #5
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	227f      	movs	r2, #127	@ 0x7f
 8000856:	4013      	ands	r3, r2
 8000858:	b2db      	uxtb	r3, r3
 800085a:	0018      	movs	r0, r3
 800085c:	f000 f804 	bl	8000868 <MIDI_SendByte>
}
 8000860:	46c0      	nop			@ (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b003      	add	sp, #12
 8000866:	bd90      	pop	{r4, r7, pc}

08000868 <MIDI_SendByte>:
void channel_pressure(uint8_t channel, uint8_t pressure) {
    MIDI_SendByte(CHANNEL_PRESSURE | (channel & 0b00001111));
    MIDI_SendByte((uint8_t) 0b01111111 & pressure);
}

void MIDI_SendByte(uint8_t byte) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	0002      	movs	r2, r0
 8000870:	1dfb      	adds	r3, r7, #7
 8000872:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, &byte, 1, HAL_MAX_DELAY);
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	1df9      	adds	r1, r7, #7
 800087a:	4804      	ldr	r0, [pc, #16]	@ (800088c <MIDI_SendByte+0x24>)
 800087c:	2201      	movs	r2, #1
 800087e:	f001 fe7f 	bl	8002580 <HAL_UART_Transmit>
}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b002      	add	sp, #8
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	20000068 	.word	0x20000068

08000890 <ReadNote>:
#include "mux.h"
#include "midi.h"

uint8_t ReadNote(uint8_t key) {
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	0002      	movs	r2, r0
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, key & 0x01);
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4013      	ands	r3, r2
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	4823      	ldr	r0, [pc, #140]	@ (8000934 <ReadNote+0xa4>)
 80008a8:	001a      	movs	r2, r3
 80008aa:	2110      	movs	r1, #16
 80008ac:	f000 fc8d 	bl	80011ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (key & 0x02) >> 1);
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	105b      	asrs	r3, r3, #1
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	2201      	movs	r2, #1
 80008ba:	4013      	ands	r3, r2
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	481d      	ldr	r0, [pc, #116]	@ (8000934 <ReadNote+0xa4>)
 80008c0:	001a      	movs	r2, r3
 80008c2:	2120      	movs	r1, #32
 80008c4:	f000 fc81 	bl	80011ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (key & 0x04) >> 2);
 80008c8:	1dfb      	adds	r3, r7, #7
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	109b      	asrs	r3, r3, #2
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	2201      	movs	r2, #1
 80008d2:	4013      	ands	r3, r2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	4817      	ldr	r0, [pc, #92]	@ (8000934 <ReadNote+0xa4>)
 80008d8:	001a      	movs	r2, r3
 80008da:	2140      	movs	r1, #64	@ 0x40
 80008dc:	f000 fc75 	bl	80011ca <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (key & 0x08) >> 3);
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	10db      	asrs	r3, r3, #3
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	2201      	movs	r2, #1
 80008ea:	4013      	ands	r3, r2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4811      	ldr	r0, [pc, #68]	@ (8000934 <ReadNote+0xa4>)
 80008f0:	001a      	movs	r2, r3
 80008f2:	2180      	movs	r1, #128	@ 0x80
 80008f4:	f000 fc69 	bl	80011ca <HAL_GPIO_WritePin>

    if (key & 0x10) return (uint8_t) HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_12);
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2210      	movs	r2, #16
 80008fe:	4013      	ands	r3, r2
 8000900:	d009      	beq.n	8000916 <ReadNote+0x86>
 8000902:	2380      	movs	r3, #128	@ 0x80
 8000904:	015a      	lsls	r2, r3, #5
 8000906:	23a0      	movs	r3, #160	@ 0xa0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	0011      	movs	r1, r2
 800090c:	0018      	movs	r0, r3
 800090e:	f000 fc3f 	bl	8001190 <HAL_GPIO_ReadPin>
 8000912:	0003      	movs	r3, r0
 8000914:	e009      	b.n	800092a <ReadNote+0x9a>
    return (uint8_t) HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000916:	2380      	movs	r3, #128	@ 0x80
 8000918:	011a      	lsls	r2, r3, #4
 800091a:	23a0      	movs	r3, #160	@ 0xa0
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fc35 	bl	8001190 <HAL_GPIO_ReadPin>
 8000926:	0003      	movs	r3, r0
 8000928:	46c0      	nop			@ (mov r8, r8)
}
 800092a:	0018      	movs	r0, r3
 800092c:	46bd      	mov	sp, r7
 800092e:	b002      	add	sp, #8
 8000930:	bd80      	pop	{r7, pc}
 8000932:	46c0      	nop			@ (mov r8, r8)
 8000934:	50000400 	.word	0x50000400

08000938 <ReadKeyboard>:



void ReadKeyboard(uint8_t status[]) {
 8000938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	GPIO_PinState low = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000940:	230e      	movs	r3, #14
 8000942:	18fc      	adds	r4, r7, r3
 8000944:	23a0      	movs	r3, #160	@ 0xa0
 8000946:	05db      	lsls	r3, r3, #23
 8000948:	2110      	movs	r1, #16
 800094a:	0018      	movs	r0, r3
 800094c:	f000 fc20 	bl	8001190 <HAL_GPIO_ReadPin>
 8000950:	0003      	movs	r3, r0
 8000952:	7023      	strb	r3, [r4, #0]
	GPIO_PinState mid = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000954:	230d      	movs	r3, #13
 8000956:	18fc      	adds	r4, r7, r3
 8000958:	23a0      	movs	r3, #160	@ 0xa0
 800095a:	05db      	lsls	r3, r3, #23
 800095c:	2120      	movs	r1, #32
 800095e:	0018      	movs	r0, r3
 8000960:	f000 fc16 	bl	8001190 <HAL_GPIO_ReadPin>
 8000964:	0003      	movs	r3, r0
 8000966:	7023      	strb	r3, [r4, #0]
	GPIO_PinState high = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000968:	230c      	movs	r3, #12
 800096a:	18fc      	adds	r4, r7, r3
 800096c:	23a0      	movs	r3, #160	@ 0xa0
 800096e:	05db      	lsls	r3, r3, #23
 8000970:	2140      	movs	r1, #64	@ 0x40
 8000972:	0018      	movs	r0, r3
 8000974:	f000 fc0c 	bl	8001190 <HAL_GPIO_ReadPin>
 8000978:	0003      	movs	r3, r0
 800097a:	7023      	strb	r3, [r4, #0]
	GPIO_PinState too_high = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 800097c:	230b      	movs	r3, #11
 800097e:	18fc      	adds	r4, r7, r3
 8000980:	23a0      	movs	r3, #160	@ 0xa0
 8000982:	05db      	lsls	r3, r3, #23
 8000984:	2180      	movs	r1, #128	@ 0x80
 8000986:	0018      	movs	r0, r3
 8000988:	f000 fc02 	bl	8001190 <HAL_GPIO_ReadPin>
 800098c:	0003      	movs	r3, r0
 800098e:	7023      	strb	r3, [r4, #0]

    uint8_t new_status;
	for (uint8_t i = 0; i < 32; i++) {
 8000990:	230f      	movs	r3, #15
 8000992:	18fb      	adds	r3, r7, r3
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e0a6      	b.n	8000ae8 <ReadKeyboard+0x1b0>
        new_status = ReadNote(i);
 800099a:	260a      	movs	r6, #10
 800099c:	19bc      	adds	r4, r7, r6
 800099e:	250f      	movs	r5, #15
 80009a0:	197b      	adds	r3, r7, r5
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff ff73 	bl	8000890 <ReadNote>
 80009aa:	0003      	movs	r3, r0
 80009ac:	7023      	strb	r3, [r4, #0]
        if (!status[i] && new_status) {
 80009ae:	0029      	movs	r1, r5
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	18d3      	adds	r3, r2, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d13e      	bne.n	8000a3c <ReadKeyboard+0x104>
 80009be:	19bb      	adds	r3, r7, r6
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d03a      	beq.n	8000a3c <ReadKeyboard+0x104>
        	if (low) note_on(0, 29 + i, 60);
 80009c6:	230e      	movs	r3, #14
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d008      	beq.n	80009e2 <ReadKeyboard+0xaa>
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	331d      	adds	r3, #29
 80009d6:	b2db      	uxtb	r3, r3
 80009d8:	223c      	movs	r2, #60	@ 0x3c
 80009da:	0019      	movs	r1, r3
 80009dc:	2000      	movs	r0, #0
 80009de:	f7ff fee1 	bl	80007a4 <note_on>
        	if (mid) note_on(0, 41 + i, 60);
 80009e2:	230d      	movs	r3, #13
 80009e4:	18fb      	adds	r3, r7, r3
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d009      	beq.n	8000a00 <ReadKeyboard+0xc8>
 80009ec:	230f      	movs	r3, #15
 80009ee:	18fb      	adds	r3, r7, r3
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	3329      	adds	r3, #41	@ 0x29
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	223c      	movs	r2, #60	@ 0x3c
 80009f8:	0019      	movs	r1, r3
 80009fa:	2000      	movs	r0, #0
 80009fc:	f7ff fed2 	bl	80007a4 <note_on>
        	if (high) note_on(0, 53 + i, 60);
 8000a00:	230c      	movs	r3, #12
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d009      	beq.n	8000a1e <ReadKeyboard+0xe6>
 8000a0a:	230f      	movs	r3, #15
 8000a0c:	18fb      	adds	r3, r7, r3
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	3335      	adds	r3, #53	@ 0x35
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	223c      	movs	r2, #60	@ 0x3c
 8000a16:	0019      	movs	r1, r3
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff fec3 	bl	80007a4 <note_on>
        	if (too_high) note_on(0, 65 + i, 60);
 8000a1e:	230b      	movs	r3, #11
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <ReadKeyboard+0x104>
 8000a28:	230f      	movs	r3, #15
 8000a2a:	18fb      	adds	r3, r7, r3
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	3341      	adds	r3, #65	@ 0x41
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	223c      	movs	r2, #60	@ 0x3c
 8000a34:	0019      	movs	r1, r3
 8000a36:	2000      	movs	r0, #0
 8000a38:	f7ff feb4 	bl	80007a4 <note_on>
        }
        if (status[i] && !new_status) {
 8000a3c:	210f      	movs	r1, #15
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	687a      	ldr	r2, [r7, #4]
 8000a44:	18d3      	adds	r3, r2, r3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d03f      	beq.n	8000acc <ReadKeyboard+0x194>
 8000a4c:	230a      	movs	r3, #10
 8000a4e:	18fb      	adds	r3, r7, r3
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d13a      	bne.n	8000acc <ReadKeyboard+0x194>
        	if (low) note_off(0, 29 + i, 0);
 8000a56:	230e      	movs	r3, #14
 8000a58:	18fb      	adds	r3, r7, r3
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <ReadKeyboard+0x13a>
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	331d      	adds	r3, #29
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	f7ff feca 	bl	8000806 <note_off>
        	if (mid) note_off(0, 41 + i, 0);
 8000a72:	230d      	movs	r3, #13
 8000a74:	18fb      	adds	r3, r7, r3
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d009      	beq.n	8000a90 <ReadKeyboard+0x158>
 8000a7c:	230f      	movs	r3, #15
 8000a7e:	18fb      	adds	r3, r7, r3
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	3329      	adds	r3, #41	@ 0x29
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	0019      	movs	r1, r3
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f7ff febb 	bl	8000806 <note_off>
        	if (high) note_off(0, 53 + i, 0);
 8000a90:	230c      	movs	r3, #12
 8000a92:	18fb      	adds	r3, r7, r3
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d009      	beq.n	8000aae <ReadKeyboard+0x176>
 8000a9a:	230f      	movs	r3, #15
 8000a9c:	18fb      	adds	r3, r7, r3
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	3335      	adds	r3, #53	@ 0x35
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	0019      	movs	r1, r3
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff feac 	bl	8000806 <note_off>
        	if (too_high) note_off(0, 65 + i, 0);
 8000aae:	230b      	movs	r3, #11
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d009      	beq.n	8000acc <ReadKeyboard+0x194>
 8000ab8:	230f      	movs	r3, #15
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	3341      	adds	r3, #65	@ 0x41
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	2000      	movs	r0, #0
 8000ac8:	f7ff fe9d 	bl	8000806 <note_off>
        }
        status[i] = new_status;
 8000acc:	210f      	movs	r1, #15
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	220a      	movs	r2, #10
 8000ad8:	18ba      	adds	r2, r7, r2
 8000ada:	7812      	ldrb	r2, [r2, #0]
 8000adc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 32; i++) {
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	3201      	adds	r2, #1
 8000ae6:	701a      	strb	r2, [r3, #0]
 8000ae8:	230f      	movs	r3, #15
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	2b1f      	cmp	r3, #31
 8000af0:	d800      	bhi.n	8000af4 <ReadKeyboard+0x1bc>
 8000af2:	e752      	b.n	800099a <ReadKeyboard+0x62>
    }
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b005      	add	sp, #20
 8000afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <HAL_MspInit+0x24>)
 8000b06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b08:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_MspInit+0x24>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <HAL_MspInit+0x24>)
 8000b12:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b14:	4b03      	ldr	r3, [pc, #12]	@ (8000b24 <HAL_MspInit+0x24>)
 8000b16:	2180      	movs	r1, #128	@ 0x80
 8000b18:	0549      	lsls	r1, r1, #21
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	05db      	lsls	r3, r3, #23
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d105      	bne.n	8000b48 <HAL_TIM_Base_MspInit+0x20>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <HAL_TIM_Base_MspInit+0x28>)
 8000b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b40:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <HAL_TIM_Base_MspInit+0x28>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	430a      	orrs	r2, r1
 8000b46:	639a      	str	r2, [r3, #56]	@ 0x38

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b48:	46c0      	nop			@ (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b590      	push	{r4, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	240c      	movs	r4, #12
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	0018      	movs	r0, r3
 8000b62:	2314      	movs	r3, #20
 8000b64:	001a      	movs	r2, r3
 8000b66:	2100      	movs	r1, #0
 8000b68:	f002 fa1e 	bl	8002fa8 <memset>
  if(huart->Instance==USART2)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a18      	ldr	r2, [pc, #96]	@ (8000bd4 <HAL_UART_MspInit+0x80>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12a      	bne.n	8000bcc <HAL_UART_MspInit+0x78>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000b7a:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	0289      	lsls	r1, r1, #10
 8000b80:	430a      	orrs	r2, r1
 8000b82:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b84:	4b14      	ldr	r3, [pc, #80]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000b88:	4b13      	ldr	r3, [pc, #76]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b8a:	2101      	movs	r1, #1
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000b90:	4b11      	ldr	r3, [pc, #68]	@ (8000bd8 <HAL_UART_MspInit+0x84>)
 8000b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b94:	2201      	movs	r2, #1
 8000b96:	4013      	ands	r3, r2
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b9c:	193b      	adds	r3, r7, r4
 8000b9e:	22c0      	movs	r2, #192	@ 0xc0
 8000ba0:	00d2      	lsls	r2, r2, #3
 8000ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	0021      	movs	r1, r4
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2202      	movs	r2, #2
 8000baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000bb8:	187b      	adds	r3, r7, r1
 8000bba:	2204      	movs	r2, #4
 8000bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bbe:	187a      	adds	r2, r7, r1
 8000bc0:	23a0      	movs	r3, #160	@ 0xa0
 8000bc2:	05db      	lsls	r3, r3, #23
 8000bc4:	0011      	movs	r1, r2
 8000bc6:	0018      	movs	r0, r3
 8000bc8:	f000 f974 	bl	8000eb4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bcc:	46c0      	nop			@ (mov r8, r8)
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	b009      	add	sp, #36	@ 0x24
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	40004400 	.word	0x40004400
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000be0:	46c0      	nop			@ (mov r8, r8)
 8000be2:	e7fd      	b.n	8000be0 <NMI_Handler+0x4>

08000be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be8:	46c0      	nop			@ (mov r8, r8)
 8000bea:	e7fd      	b.n	8000be8 <HardFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bf0:	46c0      	nop			@ (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}

08000bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf6:	b580      	push	{r7, lr}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfa:	46c0      	nop			@ (mov r8, r8)
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f886 	bl	8000d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	46c0      	nop			@ (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000c18:	480d      	ldr	r0, [pc, #52]	@ (8000c50 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000c1a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c1c:	f7ff fff7 	bl	8000c0e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c22:	490d      	ldr	r1, [pc, #52]	@ (8000c58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c24:	4a0d      	ldr	r2, [pc, #52]	@ (8000c5c <LoopForever+0xe>)
  movs r3, #0
 8000c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c28:	e002      	b.n	8000c30 <LoopCopyDataInit>

08000c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c2e:	3304      	adds	r3, #4

08000c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c34:	d3f9      	bcc.n	8000c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c36:	4a0a      	ldr	r2, [pc, #40]	@ (8000c60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c38:	4c0a      	ldr	r4, [pc, #40]	@ (8000c64 <LoopForever+0x16>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c3c:	e001      	b.n	8000c42 <LoopFillZerobss>

08000c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c40:	3204      	adds	r2, #4

08000c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c44:	d3fb      	bcc.n	8000c3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c46:	f002 f9b7 	bl	8002fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c4a:	f7ff fc2d 	bl	80004a8 <main>

08000c4e <LoopForever>:

LoopForever:
    b LoopForever
 8000c4e:	e7fe      	b.n	8000c4e <LoopForever>
   ldr   r0, =_estack
 8000c50:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000c54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c58:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c5c:	08003094 	.word	0x08003094
  ldr r2, =_sbss
 8000c60:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c64:	200000f4 	.word	0x200000f4

08000c68 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c68:	e7fe      	b.n	8000c68 <ADC1_COMP_IRQHandler>
	...

08000c6c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	2200      	movs	r2, #0
 8000c76:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000c78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Init+0x3c>)
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c84:	2003      	movs	r0, #3
 8000c86:	f000 f811 	bl	8000cac <HAL_InitTick>
 8000c8a:	1e03      	subs	r3, r0, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	2201      	movs	r2, #1
 8000c92:	701a      	strb	r2, [r3, #0]
 8000c94:	e001      	b.n	8000c9a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c96:	f7ff ff33 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	781b      	ldrb	r3, [r3, #0]
}
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	40022000 	.word	0x40022000

08000cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cac:	b590      	push	{r4, r7, lr}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cb4:	4b14      	ldr	r3, [pc, #80]	@ (8000d08 <HAL_InitTick+0x5c>)
 8000cb6:	681c      	ldr	r4, [r3, #0]
 8000cb8:	4b14      	ldr	r3, [pc, #80]	@ (8000d0c <HAL_InitTick+0x60>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	0019      	movs	r1, r3
 8000cbe:	23fa      	movs	r3, #250	@ 0xfa
 8000cc0:	0098      	lsls	r0, r3, #2
 8000cc2:	f7ff fa21 	bl	8000108 <__udivsi3>
 8000cc6:	0003      	movs	r3, r0
 8000cc8:	0019      	movs	r1, r3
 8000cca:	0020      	movs	r0, r4
 8000ccc:	f7ff fa1c 	bl	8000108 <__udivsi3>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	f000 f8e1 	bl	8000e9a <HAL_SYSTICK_Config>
 8000cd8:	1e03      	subs	r3, r0, #0
 8000cda:	d001      	beq.n	8000ce0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e00f      	b.n	8000d00 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	d80b      	bhi.n	8000cfe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	2301      	movs	r3, #1
 8000cea:	425b      	negs	r3, r3
 8000cec:	2200      	movs	r2, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f000 f8be 	bl	8000e70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf4:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_InitTick+0x64>)
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	e000      	b.n	8000d00 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
}
 8000d00:	0018      	movs	r0, r3
 8000d02:	46bd      	mov	sp, r7
 8000d04:	b003      	add	sp, #12
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000008 	.word	0x20000008
 8000d10:	20000004 	.word	0x20000004

08000d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d18:	4b05      	ldr	r3, [pc, #20]	@ (8000d30 <HAL_IncTick+0x1c>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	4b05      	ldr	r3, [pc, #20]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	18d2      	adds	r2, r2, r3
 8000d24:	4b03      	ldr	r3, [pc, #12]	@ (8000d34 <HAL_IncTick+0x20>)
 8000d26:	601a      	str	r2, [r3, #0]
}
 8000d28:	46c0      	nop			@ (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			@ (mov r8, r8)
 8000d30:	20000008 	.word	0x20000008
 8000d34:	200000f0 	.word	0x200000f0

08000d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d3c:	4b02      	ldr	r3, [pc, #8]	@ (8000d48 <HAL_GetTick+0x10>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
}
 8000d40:	0018      	movs	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	200000f0 	.word	0x200000f0

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	0002      	movs	r2, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	1dfb      	adds	r3, r7, #7
 8000d58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d60:	d828      	bhi.n	8000db4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d62:	4a2f      	ldr	r2, [pc, #188]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000d64:	1dfb      	adds	r3, r7, #7
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	b25b      	sxtb	r3, r3
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	33c0      	adds	r3, #192	@ 0xc0
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	589b      	ldr	r3, [r3, r2]
 8000d72:	1dfa      	adds	r2, r7, #7
 8000d74:	7812      	ldrb	r2, [r2, #0]
 8000d76:	0011      	movs	r1, r2
 8000d78:	2203      	movs	r2, #3
 8000d7a:	400a      	ands	r2, r1
 8000d7c:	00d2      	lsls	r2, r2, #3
 8000d7e:	21ff      	movs	r1, #255	@ 0xff
 8000d80:	4091      	lsls	r1, r2
 8000d82:	000a      	movs	r2, r1
 8000d84:	43d2      	mvns	r2, r2
 8000d86:	401a      	ands	r2, r3
 8000d88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	019b      	lsls	r3, r3, #6
 8000d8e:	22ff      	movs	r2, #255	@ 0xff
 8000d90:	401a      	ands	r2, r3
 8000d92:	1dfb      	adds	r3, r7, #7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	0018      	movs	r0, r3
 8000d98:	2303      	movs	r3, #3
 8000d9a:	4003      	ands	r3, r0
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da0:	481f      	ldr	r0, [pc, #124]	@ (8000e20 <__NVIC_SetPriority+0xd4>)
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	089b      	lsrs	r3, r3, #2
 8000daa:	430a      	orrs	r2, r1
 8000dac:	33c0      	adds	r3, #192	@ 0xc0
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000db2:	e031      	b.n	8000e18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000db4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	0019      	movs	r1, r3
 8000dbc:	230f      	movs	r3, #15
 8000dbe:	400b      	ands	r3, r1
 8000dc0:	3b08      	subs	r3, #8
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3306      	adds	r3, #6
 8000dc6:	009b      	lsls	r3, r3, #2
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	3304      	adds	r3, #4
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	@ 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	4809      	ldr	r0, [pc, #36]	@ (8000e24 <__NVIC_SetPriority+0xd8>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	001c      	movs	r4, r3
 8000e04:	230f      	movs	r3, #15
 8000e06:	4023      	ands	r3, r4
 8000e08:	3b08      	subs	r3, #8
 8000e0a:	089b      	lsrs	r3, r3, #2
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	3306      	adds	r3, #6
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	18c3      	adds	r3, r0, r3
 8000e14:	3304      	adds	r3, #4
 8000e16:	601a      	str	r2, [r3, #0]
}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b003      	add	sp, #12
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	1e5a      	subs	r2, r3, #1
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	045b      	lsls	r3, r3, #17
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d301      	bcc.n	8000e40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e010      	b.n	8000e62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e40:	4b0a      	ldr	r3, [pc, #40]	@ (8000e6c <SysTick_Config+0x44>)
 8000e42:	687a      	ldr	r2, [r7, #4]
 8000e44:	3a01      	subs	r2, #1
 8000e46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e48:	2301      	movs	r3, #1
 8000e4a:	425b      	negs	r3, r3
 8000e4c:	2103      	movs	r1, #3
 8000e4e:	0018      	movs	r0, r3
 8000e50:	f7ff ff7c 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e54:	4b05      	ldr	r3, [pc, #20]	@ (8000e6c <SysTick_Config+0x44>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5a:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <SysTick_Config+0x44>)
 8000e5c:	2207      	movs	r2, #7
 8000e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
 8000e6c:	e000e010 	.word	0xe000e010

08000e70 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	1c02      	adds	r2, r0, #0
 8000e80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	0011      	movs	r1, r2
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	46c0      	nop			@ (mov r8, r8)
 8000e94:	46bd      	mov	sp, r7
 8000e96:	b004      	add	sp, #16
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	0018      	movs	r0, r3
 8000ea6:	f7ff ffbf 	bl	8000e28 <SysTick_Config>
 8000eaa:	0003      	movs	r3, r0
}
 8000eac:	0018      	movs	r0, r3
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000eca:	e149      	b.n	8001160 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	697a      	ldr	r2, [r7, #20]
 8000ed4:	4091      	lsls	r1, r2
 8000ed6:	000a      	movs	r2, r1
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d100      	bne.n	8000ee4 <HAL_GPIO_Init+0x30>
 8000ee2:	e13a      	b.n	800115a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d005      	beq.n	8000efc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	2203      	movs	r2, #3
 8000ef6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d130      	bne.n	8000f5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	409a      	lsls	r2, r3
 8000f0a:	0013      	movs	r3, r2
 8000f0c:	43da      	mvns	r2, r3
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	68da      	ldr	r2, [r3, #12]
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	409a      	lsls	r2, r3
 8000f1e:	0013      	movs	r3, r2
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f32:	2201      	movs	r2, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	409a      	lsls	r2, r3
 8000f38:	0013      	movs	r3, r2
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	091b      	lsrs	r3, r3, #4
 8000f48:	2201      	movs	r2, #1
 8000f4a:	401a      	ands	r2, r3
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	409a      	lsls	r2, r3
 8000f50:	0013      	movs	r3, r2
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	2203      	movs	r2, #3
 8000f64:	4013      	ands	r3, r2
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d017      	beq.n	8000f9a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	409a      	lsls	r2, r3
 8000f78:	0013      	movs	r3, r2
 8000f7a:	43da      	mvns	r2, r3
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	689a      	ldr	r2, [r3, #8]
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	409a      	lsls	r2, r3
 8000f8c:	0013      	movs	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d123      	bne.n	8000fee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3208      	adds	r2, #8
 8000fae:	0092      	lsls	r2, r2, #2
 8000fb0:	58d3      	ldr	r3, [r2, r3]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	691a      	ldr	r2, [r3, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	2107      	movs	r1, #7
 8000fd2:	400b      	ands	r3, r1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	08da      	lsrs	r2, r3, #3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3208      	adds	r2, #8
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	6939      	ldr	r1, [r7, #16]
 8000fec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	409a      	lsls	r2, r3
 8000ffc:	0013      	movs	r3, r2
 8000ffe:	43da      	mvns	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	4013      	ands	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2203      	movs	r2, #3
 800100c:	401a      	ands	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	409a      	lsls	r2, r3
 8001014:	0013      	movs	r3, r2
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	23c0      	movs	r3, #192	@ 0xc0
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d100      	bne.n	8001030 <HAL_GPIO_Init+0x17c>
 800102e:	e094      	b.n	800115a <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001030:	4b51      	ldr	r3, [pc, #324]	@ (8001178 <HAL_GPIO_Init+0x2c4>)
 8001032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001034:	4b50      	ldr	r3, [pc, #320]	@ (8001178 <HAL_GPIO_Init+0x2c4>)
 8001036:	2101      	movs	r1, #1
 8001038:	430a      	orrs	r2, r1
 800103a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800103c:	4a4f      	ldr	r2, [pc, #316]	@ (800117c <HAL_GPIO_Init+0x2c8>)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	089b      	lsrs	r3, r3, #2
 8001042:	3302      	adds	r3, #2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	589b      	ldr	r3, [r3, r2]
 8001048:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	2203      	movs	r2, #3
 800104e:	4013      	ands	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	220f      	movs	r2, #15
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	43da      	mvns	r2, r3
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4013      	ands	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	23a0      	movs	r3, #160	@ 0xa0
 8001064:	05db      	lsls	r3, r3, #23
 8001066:	429a      	cmp	r2, r3
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0x1de>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4a44      	ldr	r2, [pc, #272]	@ (8001180 <HAL_GPIO_Init+0x2cc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d00d      	beq.n	800108e <HAL_GPIO_Init+0x1da>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a43      	ldr	r2, [pc, #268]	@ (8001184 <HAL_GPIO_Init+0x2d0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d007      	beq.n	800108a <HAL_GPIO_Init+0x1d6>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a42      	ldr	r2, [pc, #264]	@ (8001188 <HAL_GPIO_Init+0x2d4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d101      	bne.n	8001086 <HAL_GPIO_Init+0x1d2>
 8001082:	2305      	movs	r3, #5
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x1e0>
 8001086:	2306      	movs	r3, #6
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x1e0>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x1e0>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x1e0>
 8001092:	2300      	movs	r3, #0
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	2103      	movs	r1, #3
 8001098:	400a      	ands	r2, r1
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	@ (800117c <HAL_GPIO_Init+0x2c8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b36      	ldr	r3, [pc, #216]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685a      	ldr	r2, [r3, #4]
 80010c6:	2380      	movs	r3, #128	@ 0x80
 80010c8:	035b      	lsls	r3, r3, #13
 80010ca:	4013      	ands	r3, r2
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d6:	4b2d      	ldr	r3, [pc, #180]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	2380      	movs	r3, #128	@ 0x80
 80010f2:	039b      	lsls	r3, r3, #14
 80010f4:	4013      	ands	r3, r2
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001106:	4b21      	ldr	r3, [pc, #132]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43da      	mvns	r2, r3
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	029b      	lsls	r3, r3, #10
 800111e:	4013      	ands	r3, r2
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800112a:	4b18      	ldr	r3, [pc, #96]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 800112c:	693a      	ldr	r2, [r7, #16]
 800112e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b16      	ldr	r3, [pc, #88]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43da      	mvns	r2, r3
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	025b      	lsls	r3, r3, #9
 8001148:	4013      	ands	r3, r2
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001154:	4b0d      	ldr	r3, [pc, #52]	@ (800118c <HAL_GPIO_Init+0x2d8>)
 8001156:	693a      	ldr	r2, [r7, #16]
 8001158:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	40da      	lsrs	r2, r3
 8001168:	1e13      	subs	r3, r2, #0
 800116a:	d000      	beq.n	800116e <HAL_GPIO_Init+0x2ba>
 800116c:	e6ae      	b.n	8000ecc <HAL_GPIO_Init+0x18>
  }
}
 800116e:	46c0      	nop			@ (mov r8, r8)
 8001170:	46c0      	nop			@ (mov r8, r8)
 8001172:	46bd      	mov	sp, r7
 8001174:	b006      	add	sp, #24
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	50000400 	.word	0x50000400
 8001184:	50000800 	.word	0x50000800
 8001188:	50001c00 	.word	0x50001c00
 800118c:	40010400 	.word	0x40010400

08001190 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	000a      	movs	r2, r1
 800119a:	1cbb      	adds	r3, r7, #2
 800119c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	691b      	ldr	r3, [r3, #16]
 80011a2:	1cba      	adds	r2, r7, #2
 80011a4:	8812      	ldrh	r2, [r2, #0]
 80011a6:	4013      	ands	r3, r2
 80011a8:	d004      	beq.n	80011b4 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80011aa:	230f      	movs	r3, #15
 80011ac:	18fb      	adds	r3, r7, r3
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
 80011b2:	e003      	b.n	80011bc <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011b4:	230f      	movs	r3, #15
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	2200      	movs	r2, #0
 80011ba:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	781b      	ldrb	r3, [r3, #0]
}
 80011c2:	0018      	movs	r0, r3
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	0008      	movs	r0, r1
 80011d4:	0011      	movs	r1, r2
 80011d6:	1cbb      	adds	r3, r7, #2
 80011d8:	1c02      	adds	r2, r0, #0
 80011da:	801a      	strh	r2, [r3, #0]
 80011dc:	1c7b      	adds	r3, r7, #1
 80011de:	1c0a      	adds	r2, r1, #0
 80011e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011e2:	1c7b      	adds	r3, r7, #1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d004      	beq.n	80011f4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ea:	1cbb      	adds	r3, r7, #2
 80011ec:	881a      	ldrh	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80011f2:	e003      	b.n	80011fc <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80011f4:	1cbb      	adds	r3, r7, #2
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b5b0      	push	{r4, r5, r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d102      	bne.n	8001218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	f000 fb6c 	bl	80018f0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001218:	4bc8      	ldr	r3, [pc, #800]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	220c      	movs	r2, #12
 800121e:	4013      	ands	r3, r2
 8001220:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001222:	4bc6      	ldr	r3, [pc, #792]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	2380      	movs	r3, #128	@ 0x80
 8001228:	025b      	lsls	r3, r3, #9
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	4013      	ands	r3, r2
 8001236:	d100      	bne.n	800123a <HAL_RCC_OscConfig+0x36>
 8001238:	e07d      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	2b08      	cmp	r3, #8
 800123e:	d007      	beq.n	8001250 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	2b0c      	cmp	r3, #12
 8001244:	d112      	bne.n	800126c <HAL_RCC_OscConfig+0x68>
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	429a      	cmp	r2, r3
 800124e:	d10d      	bne.n	800126c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001250:	4bba      	ldr	r3, [pc, #744]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	2380      	movs	r3, #128	@ 0x80
 8001256:	029b      	lsls	r3, r3, #10
 8001258:	4013      	ands	r3, r2
 800125a:	d100      	bne.n	800125e <HAL_RCC_OscConfig+0x5a>
 800125c:	e06a      	b.n	8001334 <HAL_RCC_OscConfig+0x130>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d166      	bne.n	8001334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	f000 fb42 	bl	80018f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	2380      	movs	r3, #128	@ 0x80
 8001272:	025b      	lsls	r3, r3, #9
 8001274:	429a      	cmp	r2, r3
 8001276:	d107      	bne.n	8001288 <HAL_RCC_OscConfig+0x84>
 8001278:	4bb0      	ldr	r3, [pc, #704]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4baf      	ldr	r3, [pc, #700]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800127e:	2180      	movs	r1, #128	@ 0x80
 8001280:	0249      	lsls	r1, r1, #9
 8001282:	430a      	orrs	r2, r1
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	e027      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	23a0      	movs	r3, #160	@ 0xa0
 800128e:	02db      	lsls	r3, r3, #11
 8001290:	429a      	cmp	r2, r3
 8001292:	d10e      	bne.n	80012b2 <HAL_RCC_OscConfig+0xae>
 8001294:	4ba9      	ldr	r3, [pc, #676]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4ba8      	ldr	r3, [pc, #672]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800129a:	2180      	movs	r1, #128	@ 0x80
 800129c:	02c9      	lsls	r1, r1, #11
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	4ba6      	ldr	r3, [pc, #664]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4ba5      	ldr	r3, [pc, #660]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0249      	lsls	r1, r1, #9
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e012      	b.n	80012d8 <HAL_RCC_OscConfig+0xd4>
 80012b2:	4ba2      	ldr	r3, [pc, #648]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	4ba1      	ldr	r3, [pc, #644]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012b8:	49a1      	ldr	r1, [pc, #644]	@ (8001540 <HAL_RCC_OscConfig+0x33c>)
 80012ba:	400a      	ands	r2, r1
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	4b9f      	ldr	r3, [pc, #636]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	2380      	movs	r3, #128	@ 0x80
 80012c4:	025b      	lsls	r3, r3, #9
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4b9b      	ldr	r3, [pc, #620]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b9a      	ldr	r3, [pc, #616]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012d2:	499c      	ldr	r1, [pc, #624]	@ (8001544 <HAL_RCC_OscConfig+0x340>)
 80012d4:	400a      	ands	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d014      	beq.n	800130a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fd2a 	bl	8000d38 <HAL_GetTick>
 80012e4:	0003      	movs	r3, r0
 80012e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ea:	f7ff fd25 	bl	8000d38 <HAL_GetTick>
 80012ee:	0002      	movs	r2, r0
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b64      	cmp	r3, #100	@ 0x64
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e2f9      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012fc:	4b8f      	ldr	r3, [pc, #572]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	d0f0      	beq.n	80012ea <HAL_RCC_OscConfig+0xe6>
 8001308:	e015      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fd15 	bl	8000d38 <HAL_GetTick>
 800130e:	0003      	movs	r3, r0
 8001310:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001312:	e008      	b.n	8001326 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001314:	f7ff fd10 	bl	8000d38 <HAL_GetTick>
 8001318:	0002      	movs	r2, r0
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	2b64      	cmp	r3, #100	@ 0x64
 8001320:	d901      	bls.n	8001326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001322:	2303      	movs	r3, #3
 8001324:	e2e4      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001326:	4b85      	ldr	r3, [pc, #532]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2380      	movs	r3, #128	@ 0x80
 800132c:	029b      	lsls	r3, r3, #10
 800132e:	4013      	ands	r3, r2
 8001330:	d1f0      	bne.n	8001314 <HAL_RCC_OscConfig+0x110>
 8001332:	e000      	b.n	8001336 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	2202      	movs	r2, #2
 800133c:	4013      	ands	r3, r2
 800133e:	d100      	bne.n	8001342 <HAL_RCC_OscConfig+0x13e>
 8001340:	e099      	b.n	8001476 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800134a:	2220      	movs	r2, #32
 800134c:	4013      	ands	r3, r2
 800134e:	d009      	beq.n	8001364 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001350:	4b7a      	ldr	r3, [pc, #488]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b79      	ldr	r3, [pc, #484]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001356:	2120      	movs	r1, #32
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800135c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800135e:	2220      	movs	r2, #32
 8001360:	4393      	bics	r3, r2
 8001362:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d13e      	bne.n	80013ee <HAL_RCC_OscConfig+0x1ea>
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d13b      	bne.n	80013ee <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001376:	4b71      	ldr	r3, [pc, #452]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2204      	movs	r2, #4
 800137c:	4013      	ands	r3, r2
 800137e:	d004      	beq.n	800138a <HAL_RCC_OscConfig+0x186>
 8001380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e2b2      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	4a6e      	ldr	r2, [pc, #440]	@ (8001548 <HAL_RCC_OscConfig+0x344>)
 8001390:	4013      	ands	r3, r2
 8001392:	0019      	movs	r1, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	021a      	lsls	r2, r3, #8
 800139a:	4b68      	ldr	r3, [pc, #416]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800139c:	430a      	orrs	r2, r1
 800139e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013a0:	4b66      	ldr	r3, [pc, #408]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2209      	movs	r2, #9
 80013a6:	4393      	bics	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	4b64      	ldr	r3, [pc, #400]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80013ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013ae:	430a      	orrs	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013b2:	f000 fbeb 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80013b6:	0001      	movs	r1, r0
 80013b8:	4b60      	ldr	r3, [pc, #384]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	220f      	movs	r2, #15
 80013c0:	4013      	ands	r3, r2
 80013c2:	4a62      	ldr	r2, [pc, #392]	@ (800154c <HAL_RCC_OscConfig+0x348>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	000a      	movs	r2, r1
 80013c8:	40da      	lsrs	r2, r3
 80013ca:	4b61      	ldr	r3, [pc, #388]	@ (8001550 <HAL_RCC_OscConfig+0x34c>)
 80013cc:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013ce:	4b61      	ldr	r3, [pc, #388]	@ (8001554 <HAL_RCC_OscConfig+0x350>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2513      	movs	r5, #19
 80013d4:	197c      	adds	r4, r7, r5
 80013d6:	0018      	movs	r0, r3
 80013d8:	f7ff fc68 	bl	8000cac <HAL_InitTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013e0:	197b      	adds	r3, r7, r5
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d046      	beq.n	8001476 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80013e8:	197b      	adds	r3, r7, r5
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	e280      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d027      	beq.n	8001444 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013f4:	4b51      	ldr	r3, [pc, #324]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2209      	movs	r2, #9
 80013fa:	4393      	bics	r3, r2
 80013fc:	0019      	movs	r1, r3
 80013fe:	4b4f      	ldr	r3, [pc, #316]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001402:	430a      	orrs	r2, r1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fc97 	bl	8000d38 <HAL_GetTick>
 800140a:	0003      	movs	r3, r0
 800140c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001410:	f7ff fc92 	bl	8000d38 <HAL_GetTick>
 8001414:	0002      	movs	r2, r0
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e266      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001422:	4b46      	ldr	r3, [pc, #280]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d0f1      	beq.n	8001410 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b43      	ldr	r3, [pc, #268]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	@ (8001548 <HAL_RCC_OscConfig+0x344>)
 8001432:	4013      	ands	r3, r2
 8001434:	0019      	movs	r1, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	021a      	lsls	r2, r3, #8
 800143c:	4b3f      	ldr	r3, [pc, #252]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	e018      	b.n	8001476 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b3c      	ldr	r3, [pc, #240]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800144a:	2101      	movs	r1, #1
 800144c:	438a      	bics	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc72 	bl	8000d38 <HAL_GetTick>
 8001454:	0003      	movs	r3, r0
 8001456:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fc6d 	bl	8000d38 <HAL_GetTick>
 800145e:	0002      	movs	r2, r0
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e241      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800146c:	4b33      	ldr	r3, [pc, #204]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d1f1      	bne.n	800145a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2210      	movs	r2, #16
 800147c:	4013      	ands	r3, r2
 800147e:	d100      	bne.n	8001482 <HAL_RCC_OscConfig+0x27e>
 8001480:	e0a1      	b.n	80015c6 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d140      	bne.n	800150a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001488:	4b2c      	ldr	r3, [pc, #176]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	4013      	ands	r3, r2
 8001492:	d005      	beq.n	80014a0 <HAL_RCC_OscConfig+0x29c>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e227      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a0:	4b26      	ldr	r3, [pc, #152]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001558 <HAL_RCC_OscConfig+0x354>)
 80014a6:	4013      	ands	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6a1a      	ldr	r2, [r3, #32]
 80014ae:	4b23      	ldr	r3, [pc, #140]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80014b0:	430a      	orrs	r2, r1
 80014b2:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b4:	4b21      	ldr	r3, [pc, #132]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	0a19      	lsrs	r1, r3, #8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	69db      	ldr	r3, [r3, #28]
 80014c0:	061a      	lsls	r2, r3, #24
 80014c2:	4b1e      	ldr	r3, [pc, #120]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80014c4:	430a      	orrs	r2, r1
 80014c6:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a1b      	ldr	r3, [r3, #32]
 80014cc:	0b5b      	lsrs	r3, r3, #13
 80014ce:	3301      	adds	r3, #1
 80014d0:	2280      	movs	r2, #128	@ 0x80
 80014d2:	0212      	lsls	r2, r2, #8
 80014d4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014d6:	4b19      	ldr	r3, [pc, #100]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	091b      	lsrs	r3, r3, #4
 80014dc:	210f      	movs	r1, #15
 80014de:	400b      	ands	r3, r1
 80014e0:	491a      	ldr	r1, [pc, #104]	@ (800154c <HAL_RCC_OscConfig+0x348>)
 80014e2:	5ccb      	ldrb	r3, [r1, r3]
 80014e4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001550 <HAL_RCC_OscConfig+0x34c>)
 80014e8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_RCC_OscConfig+0x350>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2513      	movs	r5, #19
 80014f0:	197c      	adds	r4, r7, r5
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff fbda 	bl	8000cac <HAL_InitTick>
 80014f8:	0003      	movs	r3, r0
 80014fa:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014fc:	197b      	adds	r3, r7, r5
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d060      	beq.n	80015c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001504:	197b      	adds	r3, r7, r5
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	e1f2      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03f      	beq.n	8001592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001512:	4b0a      	ldr	r3, [pc, #40]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	@ (800153c <HAL_RCC_OscConfig+0x338>)
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	0049      	lsls	r1, r1, #1
 800151c:	430a      	orrs	r2, r1
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fc0a 	bl	8000d38 <HAL_GetTick>
 8001524:	0003      	movs	r3, r0
 8001526:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001528:	e018      	b.n	800155c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800152a:	f7ff fc05 	bl	8000d38 <HAL_GetTick>
 800152e:	0002      	movs	r2, r0
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d911      	bls.n	800155c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e1d9      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
 800153c:	40021000 	.word	0x40021000
 8001540:	fffeffff 	.word	0xfffeffff
 8001544:	fffbffff 	.word	0xfffbffff
 8001548:	ffffe0ff 	.word	0xffffe0ff
 800154c:	08003018 	.word	0x08003018
 8001550:	20000000 	.word	0x20000000
 8001554:	20000004 	.word	0x20000004
 8001558:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800155c:	4bc9      	ldr	r3, [pc, #804]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	@ 0x80
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4013      	ands	r3, r2
 8001566:	d0e0      	beq.n	800152a <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001568:	4bc6      	ldr	r3, [pc, #792]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	4ac6      	ldr	r2, [pc, #792]	@ (8001888 <HAL_RCC_OscConfig+0x684>)
 800156e:	4013      	ands	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1a      	ldr	r2, [r3, #32]
 8001576:	4bc3      	ldr	r3, [pc, #780]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157c:	4bc1      	ldr	r3, [pc, #772]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	0a19      	lsrs	r1, r3, #8
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	061a      	lsls	r2, r3, #24
 800158a:	4bbe      	ldr	r3, [pc, #760]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800158c:	430a      	orrs	r2, r1
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	e019      	b.n	80015c6 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001592:	4bbc      	ldr	r3, [pc, #752]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	4bbb      	ldr	r3, [pc, #748]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001598:	49bc      	ldr	r1, [pc, #752]	@ (800188c <HAL_RCC_OscConfig+0x688>)
 800159a:	400a      	ands	r2, r1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff fbcb 	bl	8000d38 <HAL_GetTick>
 80015a2:	0003      	movs	r3, r0
 80015a4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015a6:	e008      	b.n	80015ba <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a8:	f7ff fbc6 	bl	8000d38 <HAL_GetTick>
 80015ac:	0002      	movs	r2, r0
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e19a      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015ba:	4bb2      	ldr	r3, [pc, #712]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	4013      	ands	r3, r2
 80015c4:	d1f0      	bne.n	80015a8 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	2208      	movs	r2, #8
 80015cc:	4013      	ands	r3, r2
 80015ce:	d036      	beq.n	800163e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d019      	beq.n	800160c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015d8:	4baa      	ldr	r3, [pc, #680]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80015da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80015dc:	4ba9      	ldr	r3, [pc, #676]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80015de:	2101      	movs	r1, #1
 80015e0:	430a      	orrs	r2, r1
 80015e2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fba8 	bl	8000d38 <HAL_GetTick>
 80015e8:	0003      	movs	r3, r0
 80015ea:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ee:	f7ff fba3 	bl	8000d38 <HAL_GetTick>
 80015f2:	0002      	movs	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e177      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001600:	4ba0      	ldr	r3, [pc, #640]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d0f1      	beq.n	80015ee <HAL_RCC_OscConfig+0x3ea>
 800160a:	e018      	b.n	800163e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800160c:	4b9d      	ldr	r3, [pc, #628]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800160e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001610:	4b9c      	ldr	r3, [pc, #624]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001612:	2101      	movs	r1, #1
 8001614:	438a      	bics	r2, r1
 8001616:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fb8e 	bl	8000d38 <HAL_GetTick>
 800161c:	0003      	movs	r3, r0
 800161e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001622:	f7ff fb89 	bl	8000d38 <HAL_GetTick>
 8001626:	0002      	movs	r2, r0
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e15d      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001634:	4b93      	ldr	r3, [pc, #588]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001638:	2202      	movs	r2, #2
 800163a:	4013      	ands	r3, r2
 800163c:	d1f1      	bne.n	8001622 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2204      	movs	r2, #4
 8001644:	4013      	ands	r3, r2
 8001646:	d100      	bne.n	800164a <HAL_RCC_OscConfig+0x446>
 8001648:	e0ae      	b.n	80017a8 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800164a:	2023      	movs	r0, #35	@ 0x23
 800164c:	183b      	adds	r3, r7, r0
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001652:	4b8c      	ldr	r3, [pc, #560]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001654:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001656:	2380      	movs	r3, #128	@ 0x80
 8001658:	055b      	lsls	r3, r3, #21
 800165a:	4013      	ands	r3, r2
 800165c:	d109      	bne.n	8001672 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800165e:	4b89      	ldr	r3, [pc, #548]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001662:	4b88      	ldr	r3, [pc, #544]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001664:	2180      	movs	r1, #128	@ 0x80
 8001666:	0549      	lsls	r1, r1, #21
 8001668:	430a      	orrs	r2, r1
 800166a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800166c:	183b      	adds	r3, r7, r0
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	4b87      	ldr	r3, [pc, #540]	@ (8001890 <HAL_RCC_OscConfig+0x68c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	2380      	movs	r3, #128	@ 0x80
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4013      	ands	r3, r2
 800167c:	d11a      	bne.n	80016b4 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4b84      	ldr	r3, [pc, #528]	@ (8001890 <HAL_RCC_OscConfig+0x68c>)
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	4b83      	ldr	r3, [pc, #524]	@ (8001890 <HAL_RCC_OscConfig+0x68c>)
 8001684:	2180      	movs	r1, #128	@ 0x80
 8001686:	0049      	lsls	r1, r1, #1
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168c:	f7ff fb54 	bl	8000d38 <HAL_GetTick>
 8001690:	0003      	movs	r3, r0
 8001692:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001696:	f7ff fb4f 	bl	8000d38 <HAL_GetTick>
 800169a:	0002      	movs	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b64      	cmp	r3, #100	@ 0x64
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e123      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a8:	4b79      	ldr	r3, [pc, #484]	@ (8001890 <HAL_RCC_OscConfig+0x68c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	@ 0x80
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	4013      	ands	r3, r2
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	2380      	movs	r3, #128	@ 0x80
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4cc>
 80016c0:	4b70      	ldr	r3, [pc, #448]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016c2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016c4:	4b6f      	ldr	r3, [pc, #444]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016c6:	2180      	movs	r1, #128	@ 0x80
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	430a      	orrs	r2, r1
 80016cc:	651a      	str	r2, [r3, #80]	@ 0x50
 80016ce:	e031      	b.n	8001734 <HAL_RCC_OscConfig+0x530>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10c      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4ee>
 80016d8:	4b6a      	ldr	r3, [pc, #424]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016da:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016dc:	4b69      	ldr	r3, [pc, #420]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016de:	496b      	ldr	r1, [pc, #428]	@ (800188c <HAL_RCC_OscConfig+0x688>)
 80016e0:	400a      	ands	r2, r1
 80016e2:	651a      	str	r2, [r3, #80]	@ 0x50
 80016e4:	4b67      	ldr	r3, [pc, #412]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016e6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016e8:	4b66      	ldr	r3, [pc, #408]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80016ea:	496a      	ldr	r1, [pc, #424]	@ (8001894 <HAL_RCC_OscConfig+0x690>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80016f0:	e020      	b.n	8001734 <HAL_RCC_OscConfig+0x530>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	23a0      	movs	r3, #160	@ 0xa0
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d10e      	bne.n	800171c <HAL_RCC_OscConfig+0x518>
 80016fe:	4b61      	ldr	r3, [pc, #388]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001700:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001702:	4b60      	ldr	r3, [pc, #384]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001704:	2180      	movs	r1, #128	@ 0x80
 8001706:	00c9      	lsls	r1, r1, #3
 8001708:	430a      	orrs	r2, r1
 800170a:	651a      	str	r2, [r3, #80]	@ 0x50
 800170c:	4b5d      	ldr	r3, [pc, #372]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001710:	4b5c      	ldr	r3, [pc, #368]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001712:	2180      	movs	r1, #128	@ 0x80
 8001714:	0049      	lsls	r1, r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	651a      	str	r2, [r3, #80]	@ 0x50
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0x530>
 800171c:	4b59      	ldr	r3, [pc, #356]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800171e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001720:	4b58      	ldr	r3, [pc, #352]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001722:	495a      	ldr	r1, [pc, #360]	@ (800188c <HAL_RCC_OscConfig+0x688>)
 8001724:	400a      	ands	r2, r1
 8001726:	651a      	str	r2, [r3, #80]	@ 0x50
 8001728:	4b56      	ldr	r3, [pc, #344]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800172a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800172c:	4b55      	ldr	r3, [pc, #340]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800172e:	4959      	ldr	r1, [pc, #356]	@ (8001894 <HAL_RCC_OscConfig+0x690>)
 8001730:	400a      	ands	r2, r1
 8001732:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d015      	beq.n	8001768 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173c:	f7ff fafc 	bl	8000d38 <HAL_GetTick>
 8001740:	0003      	movs	r3, r0
 8001742:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001744:	e009      	b.n	800175a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff faf7 	bl	8000d38 <HAL_GetTick>
 800174a:	0002      	movs	r2, r0
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	4a51      	ldr	r2, [pc, #324]	@ (8001898 <HAL_RCC_OscConfig+0x694>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e0ca      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800175a:	4b4a      	ldr	r3, [pc, #296]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800175c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800175e:	2380      	movs	r3, #128	@ 0x80
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d0ef      	beq.n	8001746 <HAL_RCC_OscConfig+0x542>
 8001766:	e014      	b.n	8001792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001768:	f7ff fae6 	bl	8000d38 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001770:	e009      	b.n	8001786 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fae1 	bl	8000d38 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a46      	ldr	r2, [pc, #280]	@ (8001898 <HAL_RCC_OscConfig+0x694>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0b4      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001786:	4b3f      	ldr	r3, [pc, #252]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001788:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800178a:	2380      	movs	r3, #128	@ 0x80
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4013      	ands	r3, r2
 8001790:	d1ef      	bne.n	8001772 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001792:	2323      	movs	r3, #35	@ 0x23
 8001794:	18fb      	adds	r3, r7, r3
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d105      	bne.n	80017a8 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179c:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800179e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80017a0:	4b38      	ldr	r3, [pc, #224]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80017a2:	493e      	ldr	r1, [pc, #248]	@ (800189c <HAL_RCC_OscConfig+0x698>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d100      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5ae>
 80017b0:	e09d      	b.n	80018ee <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	2b0c      	cmp	r3, #12
 80017b6:	d100      	bne.n	80017ba <HAL_RCC_OscConfig+0x5b6>
 80017b8:	e076      	b.n	80018a8 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d145      	bne.n	800184e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c2:	4b30      	ldr	r3, [pc, #192]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80017c8:	4935      	ldr	r1, [pc, #212]	@ (80018a0 <HAL_RCC_OscConfig+0x69c>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ce:	f7ff fab3 	bl	8000d38 <HAL_GetTick>
 80017d2:	0003      	movs	r3, r0
 80017d4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d8:	f7ff faae 	bl	8000d38 <HAL_GetTick>
 80017dc:	0002      	movs	r2, r0
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e082      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017ea:	4b26      	ldr	r3, [pc, #152]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	2380      	movs	r3, #128	@ 0x80
 80017f0:	049b      	lsls	r3, r3, #18
 80017f2:	4013      	ands	r3, r2
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f6:	4b23      	ldr	r3, [pc, #140]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	4a2a      	ldr	r2, [pc, #168]	@ (80018a4 <HAL_RCC_OscConfig+0x6a0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	0019      	movs	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	431a      	orrs	r2, r3
 8001810:	4b1c      	ldr	r3, [pc, #112]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001812:	430a      	orrs	r2, r1
 8001814:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001816:	4b1b      	ldr	r3, [pc, #108]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	4b1a      	ldr	r3, [pc, #104]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 800181c:	2180      	movs	r1, #128	@ 0x80
 800181e:	0449      	lsls	r1, r1, #17
 8001820:	430a      	orrs	r2, r1
 8001822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001824:	f7ff fa88 	bl	8000d38 <HAL_GetTick>
 8001828:	0003      	movs	r3, r0
 800182a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fa83 	bl	8000d38 <HAL_GetTick>
 8001832:	0002      	movs	r2, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e057      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001840:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	@ 0x80
 8001846:	049b      	lsls	r3, r3, #18
 8001848:	4013      	ands	r3, r2
 800184a:	d0f0      	beq.n	800182e <HAL_RCC_OscConfig+0x62a>
 800184c:	e04f      	b.n	80018ee <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001854:	4912      	ldr	r1, [pc, #72]	@ (80018a0 <HAL_RCC_OscConfig+0x69c>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800185a:	f7ff fa6d 	bl	8000d38 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001864:	f7ff fa68 	bl	8000d38 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e03c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001876:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_RCC_OscConfig+0x680>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	049b      	lsls	r3, r3, #18
 800187e:	4013      	ands	r3, r2
 8001880:	d1f0      	bne.n	8001864 <HAL_RCC_OscConfig+0x660>
 8001882:	e034      	b.n	80018ee <HAL_RCC_OscConfig+0x6ea>
 8001884:	40021000 	.word	0x40021000
 8001888:	ffff1fff 	.word	0xffff1fff
 800188c:	fffffeff 	.word	0xfffffeff
 8001890:	40007000 	.word	0x40007000
 8001894:	fffffbff 	.word	0xfffffbff
 8001898:	00001388 	.word	0x00001388
 800189c:	efffffff 	.word	0xefffffff
 80018a0:	feffffff 	.word	0xfeffffff
 80018a4:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018b4:	4b10      	ldr	r3, [pc, #64]	@ (80018f8 <HAL_RCC_OscConfig+0x6f4>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	2380      	movs	r3, #128	@ 0x80
 80018be:	025b      	lsls	r3, r3, #9
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d10f      	bne.n	80018ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	23f0      	movs	r3, #240	@ 0xf0
 80018ce:	039b      	lsls	r3, r3, #14
 80018d0:	401a      	ands	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	23c0      	movs	r3, #192	@ 0xc0
 80018de:	041b      	lsls	r3, r3, #16
 80018e0:	401a      	ands	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	0018      	movs	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	b00a      	add	sp, #40	@ 0x28
 80018f6:	bdb0      	pop	{r4, r5, r7, pc}
 80018f8:	40021000 	.word	0x40021000

080018fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d101      	bne.n	8001910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e128      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001910:	4b96      	ldr	r3, [pc, #600]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2201      	movs	r2, #1
 8001916:	4013      	ands	r3, r2
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	429a      	cmp	r2, r3
 800191c:	d91e      	bls.n	800195c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800191e:	4b93      	ldr	r3, [pc, #588]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	2201      	movs	r2, #1
 8001924:	4393      	bics	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	4b90      	ldr	r3, [pc, #576]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001930:	f7ff fa02 	bl	8000d38 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001938:	e009      	b.n	800194e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193a:	f7ff f9fd 	bl	8000d38 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a8a      	ldr	r2, [pc, #552]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d901      	bls.n	800194e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e109      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b87      	ldr	r3, [pc, #540]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2201      	movs	r2, #1
 8001954:	4013      	ands	r3, r2
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d1ee      	bne.n	800193a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2202      	movs	r2, #2
 8001962:	4013      	ands	r3, r2
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001966:	4b83      	ldr	r3, [pc, #524]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	22f0      	movs	r2, #240	@ 0xf0
 800196c:	4393      	bics	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689a      	ldr	r2, [r3, #8]
 8001974:	4b7f      	ldr	r3, [pc, #508]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001976:	430a      	orrs	r2, r1
 8001978:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2201      	movs	r2, #1
 8001980:	4013      	ands	r3, r2
 8001982:	d100      	bne.n	8001986 <HAL_RCC_ClockConfig+0x8a>
 8001984:	e089      	b.n	8001a9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b02      	cmp	r3, #2
 800198c:	d107      	bne.n	800199e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800198e:	4b79      	ldr	r3, [pc, #484]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	2380      	movs	r3, #128	@ 0x80
 8001994:	029b      	lsls	r3, r3, #10
 8001996:	4013      	ands	r3, r2
 8001998:	d120      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e0e1      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d107      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019a6:	4b73      	ldr	r3, [pc, #460]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	2380      	movs	r3, #128	@ 0x80
 80019ac:	049b      	lsls	r3, r3, #18
 80019ae:	4013      	ands	r3, r2
 80019b0:	d114      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e0d5      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d106      	bne.n	80019cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019be:	4b6d      	ldr	r3, [pc, #436]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2204      	movs	r2, #4
 80019c4:	4013      	ands	r3, r2
 80019c6:	d109      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0ca      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019cc:	4b69      	ldr	r3, [pc, #420]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	2380      	movs	r3, #128	@ 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d101      	bne.n	80019dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0c2      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019dc:	4b65      	ldr	r3, [pc, #404]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	2203      	movs	r2, #3
 80019e2:	4393      	bics	r3, r2
 80019e4:	0019      	movs	r1, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b62      	ldr	r3, [pc, #392]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019f0:	f7ff f9a2 	bl	8000d38 <HAL_GetTick>
 80019f4:	0003      	movs	r3, r0
 80019f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d111      	bne.n	8001a24 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	e009      	b.n	8001a16 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a02:	f7ff f999 	bl	8000d38 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	4a58      	ldr	r2, [pc, #352]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0a5      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a16:	4b57      	ldr	r3, [pc, #348]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d1ef      	bne.n	8001a02 <HAL_RCC_ClockConfig+0x106>
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	d111      	bne.n	8001a50 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a2c:	e009      	b.n	8001a42 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a2e:	f7ff f983 	bl	8000d38 <HAL_GetTick>
 8001a32:	0002      	movs	r2, r0
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	4a4d      	ldr	r2, [pc, #308]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e08f      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a42:	4b4c      	ldr	r3, [pc, #304]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	220c      	movs	r2, #12
 8001a48:	4013      	ands	r3, r2
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d1ef      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x132>
 8001a4e:	e024      	b.n	8001a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d11b      	bne.n	8001a90 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a58:	e009      	b.n	8001a6e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a5a:	f7ff f96d 	bl	8000d38 <HAL_GetTick>
 8001a5e:	0002      	movs	r2, r0
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a42      	ldr	r2, [pc, #264]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e079      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a6e:	4b41      	ldr	r3, [pc, #260]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	220c      	movs	r2, #12
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b04      	cmp	r3, #4
 8001a78:	d1ef      	bne.n	8001a5a <HAL_RCC_ClockConfig+0x15e>
 8001a7a:	e00e      	b.n	8001a9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7c:	f7ff f95c 	bl	8000d38 <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	4a3a      	ldr	r2, [pc, #232]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e068      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001a90:	4b38      	ldr	r3, [pc, #224]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	220c      	movs	r2, #12
 8001a96:	4013      	ands	r3, r2
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9a:	4b34      	ldr	r3, [pc, #208]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	683a      	ldr	r2, [r7, #0]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d21e      	bcs.n	8001ae6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa8:	4b30      	ldr	r3, [pc, #192]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2201      	movs	r2, #1
 8001aae:	4393      	bics	r3, r2
 8001ab0:	0019      	movs	r1, r3
 8001ab2:	4b2e      	ldr	r3, [pc, #184]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001ab4:	683a      	ldr	r2, [r7, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001aba:	f7ff f93d 	bl	8000d38 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ac2:	e009      	b.n	8001ad8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac4:	f7ff f938 	bl	8000d38 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a28      	ldr	r2, [pc, #160]	@ (8001b70 <HAL_RCC_ClockConfig+0x274>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e044      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b24      	ldr	r3, [pc, #144]	@ (8001b6c <HAL_RCC_ClockConfig+0x270>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2201      	movs	r2, #1
 8001ade:	4013      	ands	r3, r2
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d1ee      	bne.n	8001ac4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2204      	movs	r2, #4
 8001aec:	4013      	ands	r3, r2
 8001aee:	d009      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af0:	4b20      	ldr	r3, [pc, #128]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	4a20      	ldr	r2, [pc, #128]	@ (8001b78 <HAL_RCC_ClockConfig+0x27c>)
 8001af6:	4013      	ands	r3, r2
 8001af8:	0019      	movs	r1, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	68da      	ldr	r2, [r3, #12]
 8001afe:	4b1d      	ldr	r3, [pc, #116]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2208      	movs	r2, #8
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d00a      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b0e:	4b19      	ldr	r3, [pc, #100]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	4a1a      	ldr	r2, [pc, #104]	@ (8001b7c <HAL_RCC_ClockConfig+0x280>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	00da      	lsls	r2, r3, #3
 8001b1e:	4b15      	ldr	r3, [pc, #84]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b24:	f000 f832 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b28:	0001      	movs	r1, r0
 8001b2a:	4b12      	ldr	r3, [pc, #72]	@ (8001b74 <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	220f      	movs	r2, #15
 8001b32:	4013      	ands	r3, r2
 8001b34:	4a12      	ldr	r2, [pc, #72]	@ (8001b80 <HAL_RCC_ClockConfig+0x284>)
 8001b36:	5cd3      	ldrb	r3, [r2, r3]
 8001b38:	000a      	movs	r2, r1
 8001b3a:	40da      	lsrs	r2, r3
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <HAL_RCC_ClockConfig+0x288>)
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b40:	4b11      	ldr	r3, [pc, #68]	@ (8001b88 <HAL_RCC_ClockConfig+0x28c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	250b      	movs	r5, #11
 8001b46:	197c      	adds	r4, r7, r5
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff f8af 	bl	8000cac <HAL_InitTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b52:	197b      	adds	r3, r7, r5
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001b5a:	197b      	adds	r3, r7, r5
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	e000      	b.n	8001b62 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001b60:	2300      	movs	r3, #0
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b004      	add	sp, #16
 8001b68:	bdb0      	pop	{r4, r5, r7, pc}
 8001b6a:	46c0      	nop			@ (mov r8, r8)
 8001b6c:	40022000 	.word	0x40022000
 8001b70:	00001388 	.word	0x00001388
 8001b74:	40021000 	.word	0x40021000
 8001b78:	fffff8ff 	.word	0xfffff8ff
 8001b7c:	ffffc7ff 	.word	0xffffc7ff
 8001b80:	08003018 	.word	0x08003018
 8001b84:	20000000 	.word	0x20000000
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b5b0      	push	{r4, r5, r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001b92:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b9a:	230c      	movs	r3, #12
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d014      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x40>
 8001ba2:	d900      	bls.n	8001ba6 <HAL_RCC_GetSysClockFreq+0x1a>
 8001ba4:	e07b      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x112>
 8001ba6:	2b04      	cmp	r3, #4
 8001ba8:	d002      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0x24>
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bae:	e076      	b.n	8001c9e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bb0:	4b44      	ldr	r3, [pc, #272]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2210      	movs	r2, #16
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001bba:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001bbc:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001bbe:	e07c      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001bc0:	4b42      	ldr	r3, [pc, #264]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x140>)
 8001bc2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001bc4:	e079      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bc6:	4b42      	ldr	r3, [pc, #264]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bc8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001bca:	e076      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001bcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bce:	0c9a      	lsrs	r2, r3, #18
 8001bd0:	230f      	movs	r3, #15
 8001bd2:	401a      	ands	r2, r3
 8001bd4:	4b3f      	ldr	r3, [pc, #252]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x148>)
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bdc:	0d9a      	lsrs	r2, r3, #22
 8001bde:	2303      	movs	r3, #3
 8001be0:	4013      	ands	r3, r2
 8001be2:	3301      	adds	r3, #1
 8001be4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001be6:	4b37      	ldr	r3, [pc, #220]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	2380      	movs	r3, #128	@ 0x80
 8001bec:	025b      	lsls	r3, r3, #9
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d01a      	beq.n	8001c28 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bf4:	61bb      	str	r3, [r7, #24]
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	4a35      	ldr	r2, [pc, #212]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x144>)
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	69b8      	ldr	r0, [r7, #24]
 8001c00:	69f9      	ldr	r1, [r7, #28]
 8001c02:	f7fe fb2d 	bl	8000260 <__aeabi_lmul>
 8001c06:	0002      	movs	r2, r0
 8001c08:	000b      	movs	r3, r1
 8001c0a:	0010      	movs	r0, r2
 8001c0c:	0019      	movs	r1, r3
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f7fe fb01 	bl	8000220 <__aeabi_uldivmod>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	000b      	movs	r3, r1
 8001c22:	0013      	movs	r3, r2
 8001c24:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c26:	e037      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c28:	4b26      	ldr	r3, [pc, #152]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d01a      	beq.n	8001c68 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c34:	60bb      	str	r3, [r7, #8]
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4a23      	ldr	r2, [pc, #140]	@ (8001cc8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	68b8      	ldr	r0, [r7, #8]
 8001c40:	68f9      	ldr	r1, [r7, #12]
 8001c42:	f7fe fb0d 	bl	8000260 <__aeabi_lmul>
 8001c46:	0002      	movs	r2, r0
 8001c48:	000b      	movs	r3, r1
 8001c4a:	0010      	movs	r0, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f7fe fae1 	bl	8000220 <__aeabi_uldivmod>
 8001c5e:	0002      	movs	r2, r0
 8001c60:	000b      	movs	r3, r1
 8001c62:	0013      	movs	r3, r2
 8001c64:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c66:	e017      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	0019      	movs	r1, r3
 8001c70:	4a16      	ldr	r2, [pc, #88]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x140>)
 8001c72:	2300      	movs	r3, #0
 8001c74:	f7fe faf4 	bl	8000260 <__aeabi_lmul>
 8001c78:	0002      	movs	r2, r0
 8001c7a:	000b      	movs	r3, r1
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	0019      	movs	r1, r3
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	001c      	movs	r4, r3
 8001c84:	2300      	movs	r3, #0
 8001c86:	001d      	movs	r5, r3
 8001c88:	0022      	movs	r2, r4
 8001c8a:	002b      	movs	r3, r5
 8001c8c:	f7fe fac8 	bl	8000220 <__aeabi_uldivmod>
 8001c90:	0002      	movs	r2, r0
 8001c92:	000b      	movs	r3, r1
 8001c94:	0013      	movs	r3, r2
 8001c96:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c9c:	e00d      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001c9e:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	0b5b      	lsrs	r3, r3, #13
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001caa:	6a3b      	ldr	r3, [r7, #32]
 8001cac:	3301      	adds	r3, #1
 8001cae:	2280      	movs	r2, #128	@ 0x80
 8001cb0:	0212      	lsls	r2, r2, #8
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001cb8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b00e      	add	sp, #56	@ 0x38
 8001cc2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	003d0900 	.word	0x003d0900
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	007a1200 	.word	0x007a1200
 8001cd4:	08003030 	.word	0x08003030

08001cd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cdc:	4b02      	ldr	r3, [pc, #8]	@ (8001ce8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cde:	681b      	ldr	r3, [r3, #0]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	46c0      	nop			@ (mov r8, r8)
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cf0:	f7ff fff2 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001cf4:	0001      	movs	r1, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	2207      	movs	r2, #7
 8001cfe:	4013      	ands	r3, r2
 8001d00:	4a04      	ldr	r2, [pc, #16]	@ (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5cd3      	ldrb	r3, [r2, r3]
 8001d04:	40d9      	lsrs	r1, r3
 8001d06:	000b      	movs	r3, r1
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	46c0      	nop			@ (mov r8, r8)
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08003028 	.word	0x08003028

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d1c:	f7ff ffdc 	bl	8001cd8 <HAL_RCC_GetHCLKFreq>
 8001d20:	0001      	movs	r1, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	2207      	movs	r2, #7
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5cd3      	ldrb	r3, [r2, r3]
 8001d30:	40d9      	lsrs	r1, r3
 8001d32:	000b      	movs	r3, r1
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	46c0      	nop			@ (mov r8, r8)
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08003028 	.word	0x08003028

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d4c:	2017      	movs	r0, #23
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2220      	movs	r2, #32
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d100      	bne.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d5e:	e0c7      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d60:	4b84      	ldr	r3, [pc, #528]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d64:	2380      	movs	r3, #128	@ 0x80
 8001d66:	055b      	lsls	r3, r3, #21
 8001d68:	4013      	ands	r3, r2
 8001d6a:	d109      	bne.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d6c:	4b81      	ldr	r3, [pc, #516]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d70:	4b80      	ldr	r3, [pc, #512]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d72:	2180      	movs	r1, #128	@ 0x80
 8001d74:	0549      	lsls	r1, r1, #21
 8001d76:	430a      	orrs	r2, r1
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001d7a:	183b      	adds	r3, r7, r0
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d80:	4b7d      	ldr	r3, [pc, #500]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d11a      	bne.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8c:	4b7a      	ldr	r3, [pc, #488]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	4b79      	ldr	r3, [pc, #484]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d92:	2180      	movs	r1, #128	@ 0x80
 8001d94:	0049      	lsls	r1, r1, #1
 8001d96:	430a      	orrs	r2, r1
 8001d98:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d9a:	f7fe ffcd 	bl	8000d38 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001da2:	e008      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe ffc8 	bl	8000d38 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b64      	cmp	r3, #100	@ 0x64
 8001db0:	d901      	bls.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e0d9      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db6:	4b70      	ldr	r3, [pc, #448]	@ (8001f78 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	2380      	movs	r3, #128	@ 0x80
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001dc2:	4b6c      	ldr	r3, [pc, #432]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	23c0      	movs	r3, #192	@ 0xc0
 8001dc8:	039b      	lsls	r3, r3, #14
 8001dca:	4013      	ands	r3, r2
 8001dcc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	23c0      	movs	r3, #192	@ 0xc0
 8001dd4:	039b      	lsls	r3, r3, #14
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d013      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	23c0      	movs	r3, #192	@ 0xc0
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	401a      	ands	r2, r3
 8001de8:	23c0      	movs	r3, #192	@ 0xc0
 8001dea:	029b      	lsls	r3, r3, #10
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d10a      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001df0:	4b60      	ldr	r3, [pc, #384]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	029b      	lsls	r3, r3, #10
 8001df8:	401a      	ands	r2, r3
 8001dfa:	2380      	movs	r3, #128	@ 0x80
 8001dfc:	029b      	lsls	r3, r3, #10
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d101      	bne.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e0b1      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e06:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e0a:	23c0      	movs	r3, #192	@ 0xc0
 8001e0c:	029b      	lsls	r3, r3, #10
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d03b      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	23c0      	movs	r3, #192	@ 0xc0
 8001e1e:	029b      	lsls	r3, r3, #10
 8001e20:	4013      	ands	r3, r2
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d033      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	4013      	ands	r3, r2
 8001e30:	d02e      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e32:	4b50      	ldr	r3, [pc, #320]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e36:	4a51      	ldr	r2, [pc, #324]	@ (8001f7c <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e3c:	4b4d      	ldr	r3, [pc, #308]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e40:	4b4c      	ldr	r3, [pc, #304]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e42:	2180      	movs	r1, #128	@ 0x80
 8001e44:	0309      	lsls	r1, r1, #12
 8001e46:	430a      	orrs	r2, r1
 8001e48:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e4a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e4e:	4b49      	ldr	r3, [pc, #292]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e50:	494b      	ldr	r1, [pc, #300]	@ (8001f80 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e56:	4b47      	ldr	r3, [pc, #284]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	2380      	movs	r3, #128	@ 0x80
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4013      	ands	r3, r2
 8001e64:	d014      	beq.n	8001e90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e66:	f7fe ff67 	bl	8000d38 <HAL_GetTick>
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e6e:	e009      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe ff62 	bl	8000d38 <HAL_GetTick>
 8001e74:	0002      	movs	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	4a42      	ldr	r2, [pc, #264]	@ (8001f84 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e072      	b.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e84:	4b3b      	ldr	r3, [pc, #236]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e88:	2380      	movs	r3, #128	@ 0x80
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d0ef      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2220      	movs	r2, #32
 8001e96:	4013      	ands	r3, r2
 8001e98:	d01f      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685a      	ldr	r2, [r3, #4]
 8001e9e:	23c0      	movs	r3, #192	@ 0xc0
 8001ea0:	029b      	lsls	r3, r3, #10
 8001ea2:	401a      	ands	r2, r3
 8001ea4:	23c0      	movs	r3, #192	@ 0xc0
 8001ea6:	029b      	lsls	r3, r3, #10
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d10c      	bne.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001eac:	4b31      	ldr	r3, [pc, #196]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a35      	ldr	r2, [pc, #212]	@ (8001f88 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	0019      	movs	r1, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	23c0      	movs	r3, #192	@ 0xc0
 8001ebc:	039b      	lsls	r3, r3, #14
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ec8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685a      	ldr	r2, [r3, #4]
 8001ece:	23c0      	movs	r3, #192	@ 0xc0
 8001ed0:	029b      	lsls	r3, r3, #10
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	4b27      	ldr	r3, [pc, #156]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001eda:	2317      	movs	r3, #23
 8001edc:	18fb      	adds	r3, r7, r3
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b23      	ldr	r3, [pc, #140]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001ee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001ee8:	4b22      	ldr	r3, [pc, #136]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eea:	4928      	ldr	r1, [pc, #160]	@ (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001efa:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001efe:	220c      	movs	r2, #12
 8001f00:	4393      	bics	r3, r2
 8001f02:	0019      	movs	r1, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689a      	ldr	r2, [r3, #8]
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2204      	movs	r2, #4
 8001f14:	4013      	ands	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f18:	4b16      	ldr	r3, [pc, #88]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1c:	4a1c      	ldr	r2, [pc, #112]	@ (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b13      	ldr	r3, [pc, #76]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	4013      	ands	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f36:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4a16      	ldr	r2, [pc, #88]	@ (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	0019      	movs	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691a      	ldr	r2, [r3, #16]
 8001f44:	4b0b      	ldr	r3, [pc, #44]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f46:	430a      	orrs	r2, r1
 8001f48:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2280      	movs	r2, #128	@ 0x80
 8001f50:	4013      	ands	r3, r2
 8001f52:	d009      	beq.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f58:	4a0f      	ldr	r2, [pc, #60]	@ (8001f98 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	695a      	ldr	r2, [r3, #20]
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	b006      	add	sp, #24
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	46c0      	nop			@ (mov r8, r8)
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	fffcffff 	.word	0xfffcffff
 8001f80:	fff7ffff 	.word	0xfff7ffff
 8001f84:	00001388 	.word	0x00001388
 8001f88:	ffcfffff 	.word	0xffcfffff
 8001f8c:	efffffff 	.word	0xefffffff
 8001f90:	fffff3ff 	.word	0xfffff3ff
 8001f94:	ffffcfff 	.word	0xffffcfff
 8001f98:	fff3ffff 	.word	0xfff3ffff

08001f9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e032      	b.n	8002014 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2239      	movs	r2, #57	@ 0x39
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d107      	bne.n	8001fca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2238      	movs	r2, #56	@ 0x38
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7fe fdaf 	bl	8000b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2239      	movs	r2, #57	@ 0x39
 8001fce:	2102      	movs	r1, #2
 8001fd0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	0019      	movs	r1, r3
 8001fdc:	0010      	movs	r0, r2
 8001fde:	f000 f935 	bl	800224c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	223e      	movs	r2, #62	@ 0x3e
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	223a      	movs	r2, #58	@ 0x3a
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	223b      	movs	r2, #59	@ 0x3b
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	223c      	movs	r2, #60	@ 0x3c
 8001ffe:	2101      	movs	r1, #1
 8002000:	5499      	strb	r1, [r3, r2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223d      	movs	r2, #61	@ 0x3d
 8002006:	2101      	movs	r1, #1
 8002008:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2239      	movs	r2, #57	@ 0x39
 800200e:	2101      	movs	r1, #1
 8002010:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	0018      	movs	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	b002      	add	sp, #8
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2239      	movs	r2, #57	@ 0x39
 8002028:	5c9b      	ldrb	r3, [r3, r2]
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b01      	cmp	r3, #1
 800202e:	d001      	beq.n	8002034 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e02e      	b.n	8002092 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2239      	movs	r2, #57	@ 0x39
 8002038:	2102      	movs	r1, #2
 800203a:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	05db      	lsls	r3, r3, #23
 8002044:	429a      	cmp	r2, r3
 8002046:	d009      	beq.n	800205c <HAL_TIM_Base_Start+0x40>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a13      	ldr	r2, [pc, #76]	@ (800209c <HAL_TIM_Base_Start+0x80>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d004      	beq.n	800205c <HAL_TIM_Base_Start+0x40>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a12      	ldr	r2, [pc, #72]	@ (80020a0 <HAL_TIM_Base_Start+0x84>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d111      	bne.n	8002080 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	2207      	movs	r2, #7
 8002064:	4013      	ands	r3, r2
 8002066:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b06      	cmp	r3, #6
 800206c:	d010      	beq.n	8002090 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2101      	movs	r1, #1
 800207a:	430a      	orrs	r2, r1
 800207c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800207e:	e007      	b.n	8002090 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	0018      	movs	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	b004      	add	sp, #16
 8002098:	bd80      	pop	{r7, pc}
 800209a:	46c0      	nop			@ (mov r8, r8)
 800209c:	40010800 	.word	0x40010800
 80020a0:	40011400 	.word	0x40011400

080020a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ae:	230f      	movs	r3, #15
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2238      	movs	r2, #56	@ 0x38
 80020ba:	5c9b      	ldrb	r3, [r3, r2]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d101      	bne.n	80020c4 <HAL_TIM_ConfigClockSource+0x20>
 80020c0:	2302      	movs	r3, #2
 80020c2:	e0bc      	b.n	800223e <HAL_TIM_ConfigClockSource+0x19a>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2238      	movs	r2, #56	@ 0x38
 80020c8:	2101      	movs	r1, #1
 80020ca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2239      	movs	r2, #57	@ 0x39
 80020d0:	2102      	movs	r1, #2
 80020d2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2277      	movs	r2, #119	@ 0x77
 80020e0:	4393      	bics	r3, r2
 80020e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	4a58      	ldr	r2, [pc, #352]	@ (8002248 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020e8:	4013      	ands	r3, r2
 80020ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2280      	movs	r2, #128	@ 0x80
 80020fa:	0192      	lsls	r2, r2, #6
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d040      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0xde>
 8002100:	2280      	movs	r2, #128	@ 0x80
 8002102:	0192      	lsls	r2, r2, #6
 8002104:	4293      	cmp	r3, r2
 8002106:	d900      	bls.n	800210a <HAL_TIM_ConfigClockSource+0x66>
 8002108:	e088      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 800210a:	2280      	movs	r2, #128	@ 0x80
 800210c:	0152      	lsls	r2, r2, #5
 800210e:	4293      	cmp	r3, r2
 8002110:	d100      	bne.n	8002114 <HAL_TIM_ConfigClockSource+0x70>
 8002112:	e088      	b.n	8002226 <HAL_TIM_ConfigClockSource+0x182>
 8002114:	2280      	movs	r2, #128	@ 0x80
 8002116:	0152      	lsls	r2, r2, #5
 8002118:	4293      	cmp	r3, r2
 800211a:	d900      	bls.n	800211e <HAL_TIM_ConfigClockSource+0x7a>
 800211c:	e07e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 800211e:	2b70      	cmp	r3, #112	@ 0x70
 8002120:	d018      	beq.n	8002154 <HAL_TIM_ConfigClockSource+0xb0>
 8002122:	d900      	bls.n	8002126 <HAL_TIM_ConfigClockSource+0x82>
 8002124:	e07a      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 8002126:	2b60      	cmp	r3, #96	@ 0x60
 8002128:	d04f      	beq.n	80021ca <HAL_TIM_ConfigClockSource+0x126>
 800212a:	d900      	bls.n	800212e <HAL_TIM_ConfigClockSource+0x8a>
 800212c:	e076      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 800212e:	2b50      	cmp	r3, #80	@ 0x50
 8002130:	d03b      	beq.n	80021aa <HAL_TIM_ConfigClockSource+0x106>
 8002132:	d900      	bls.n	8002136 <HAL_TIM_ConfigClockSource+0x92>
 8002134:	e072      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 8002136:	2b40      	cmp	r3, #64	@ 0x40
 8002138:	d057      	beq.n	80021ea <HAL_TIM_ConfigClockSource+0x146>
 800213a:	d900      	bls.n	800213e <HAL_TIM_ConfigClockSource+0x9a>
 800213c:	e06e      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 800213e:	2b30      	cmp	r3, #48	@ 0x30
 8002140:	d063      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x166>
 8002142:	d86b      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 8002144:	2b20      	cmp	r3, #32
 8002146:	d060      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x166>
 8002148:	d868      	bhi.n	800221c <HAL_TIM_ConfigClockSource+0x178>
 800214a:	2b00      	cmp	r3, #0
 800214c:	d05d      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x166>
 800214e:	2b10      	cmp	r3, #16
 8002150:	d05b      	beq.n	800220a <HAL_TIM_ConfigClockSource+0x166>
 8002152:	e063      	b.n	800221c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002164:	f000 f940 	bl	80023e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	2277      	movs	r2, #119	@ 0x77
 8002174:	4313      	orrs	r3, r2
 8002176:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	609a      	str	r2, [r3, #8]
      break;
 8002180:	e052      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002192:	f000 f929 	bl	80023e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2180      	movs	r1, #128	@ 0x80
 80021a2:	01c9      	lsls	r1, r1, #7
 80021a4:	430a      	orrs	r2, r1
 80021a6:	609a      	str	r2, [r3, #8]
      break;
 80021a8:	e03e      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021b6:	001a      	movs	r2, r3
 80021b8:	f000 f89c 	bl	80022f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2150      	movs	r1, #80	@ 0x50
 80021c2:	0018      	movs	r0, r3
 80021c4:	f000 f8f6 	bl	80023b4 <TIM_ITRx_SetConfig>
      break;
 80021c8:	e02e      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021d6:	001a      	movs	r2, r3
 80021d8:	f000 f8ba 	bl	8002350 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2160      	movs	r1, #96	@ 0x60
 80021e2:	0018      	movs	r0, r3
 80021e4:	f000 f8e6 	bl	80023b4 <TIM_ITRx_SetConfig>
      break;
 80021e8:	e01e      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021f6:	001a      	movs	r2, r3
 80021f8:	f000 f87c 	bl	80022f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2140      	movs	r1, #64	@ 0x40
 8002202:	0018      	movs	r0, r3
 8002204:	f000 f8d6 	bl	80023b4 <TIM_ITRx_SetConfig>
      break;
 8002208:	e00e      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	0019      	movs	r1, r3
 8002214:	0010      	movs	r0, r2
 8002216:	f000 f8cd 	bl	80023b4 <TIM_ITRx_SetConfig>
      break;
 800221a:	e005      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800221c:	230f      	movs	r3, #15
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
      break;
 8002224:	e000      	b.n	8002228 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002226:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2239      	movs	r2, #57	@ 0x39
 800222c:	2101      	movs	r1, #1
 800222e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2238      	movs	r2, #56	@ 0x38
 8002234:	2100      	movs	r1, #0
 8002236:	5499      	strb	r1, [r3, r2]

  return status;
 8002238:	230f      	movs	r3, #15
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	781b      	ldrb	r3, [r3, #0]
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			@ (mov r8, r8)
 8002248:	ffff00ff 	.word	0xffff00ff

0800224c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	2380      	movs	r3, #128	@ 0x80
 8002260:	05db      	lsls	r3, r3, #23
 8002262:	429a      	cmp	r2, r3
 8002264:	d007      	beq.n	8002276 <TIM_Base_SetConfig+0x2a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a1f      	ldr	r2, [pc, #124]	@ (80022e8 <TIM_Base_SetConfig+0x9c>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d003      	beq.n	8002276 <TIM_Base_SetConfig+0x2a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a1e      	ldr	r2, [pc, #120]	@ (80022ec <TIM_Base_SetConfig+0xa0>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d108      	bne.n	8002288 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2270      	movs	r2, #112	@ 0x70
 800227a:	4393      	bics	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	68fa      	ldr	r2, [r7, #12]
 8002284:	4313      	orrs	r3, r2
 8002286:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2380      	movs	r3, #128	@ 0x80
 800228c:	05db      	lsls	r3, r3, #23
 800228e:	429a      	cmp	r2, r3
 8002290:	d007      	beq.n	80022a2 <TIM_Base_SetConfig+0x56>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a14      	ldr	r2, [pc, #80]	@ (80022e8 <TIM_Base_SetConfig+0x9c>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d003      	beq.n	80022a2 <TIM_Base_SetConfig+0x56>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a13      	ldr	r2, [pc, #76]	@ (80022ec <TIM_Base_SetConfig+0xa0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a12      	ldr	r2, [pc, #72]	@ (80022f0 <TIM_Base_SetConfig+0xa4>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	4393      	bics	r3, r2
 80022ba:	001a      	movs	r2, r3
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	615a      	str	r2, [r3, #20]
}
 80022e0:	46c0      	nop			@ (mov r8, r8)
 80022e2:	46bd      	mov	sp, r7
 80022e4:	b004      	add	sp, #16
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	40010800 	.word	0x40010800
 80022ec:	40011400 	.word	0x40011400
 80022f0:	fffffcff 	.word	0xfffffcff

080022f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	6a1b      	ldr	r3, [r3, #32]
 800230a:	2201      	movs	r2, #1
 800230c:	4393      	bics	r3, r2
 800230e:	001a      	movs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	22f0      	movs	r2, #240	@ 0xf0
 800231e:	4393      	bics	r3, r2
 8002320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	220a      	movs	r2, #10
 8002330:	4393      	bics	r3, r2
 8002332:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	4313      	orrs	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	621a      	str	r2, [r3, #32]
}
 8002348:	46c0      	nop			@ (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b006      	add	sp, #24
 800234e:	bd80      	pop	{r7, pc}

08002350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	2210      	movs	r2, #16
 8002362:	4393      	bics	r3, r2
 8002364:	001a      	movs	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <TIM_TI2_ConfigInputStage+0x60>)
 800237a:	4013      	ands	r3, r2
 800237c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	031b      	lsls	r3, r3, #12
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	22a0      	movs	r2, #160	@ 0xa0
 800238c:	4393      	bics	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	621a      	str	r2, [r3, #32]
}
 80023a6:	46c0      	nop			@ (mov r8, r8)
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b006      	add	sp, #24
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	ffff0fff 	.word	0xffff0fff

080023b4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2270      	movs	r2, #112	@ 0x70
 80023c8:	4393      	bics	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	2207      	movs	r2, #7
 80023d4:	4313      	orrs	r3, r2
 80023d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	609a      	str	r2, [r3, #8]
}
 80023de:	46c0      	nop			@ (mov r8, r8)
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b086      	sub	sp, #24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
 80023f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <TIM_ETR_SetConfig+0x3c>)
 8002400:	4013      	ands	r3, r2
 8002402:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	021a      	lsls	r2, r3, #8
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	431a      	orrs	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	4313      	orrs	r3, r2
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	697a      	ldr	r2, [r7, #20]
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	46c0      	nop			@ (mov r8, r8)
 800241e:	46bd      	mov	sp, r7
 8002420:	b006      	add	sp, #24
 8002422:	bd80      	pop	{r7, pc}
 8002424:	ffff00ff 	.word	0xffff00ff

08002428 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2238      	movs	r2, #56	@ 0x38
 8002436:	5c9b      	ldrb	r3, [r3, r2]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800243c:	2302      	movs	r3, #2
 800243e:	e042      	b.n	80024c6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2238      	movs	r2, #56	@ 0x38
 8002444:	2101      	movs	r1, #1
 8002446:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2239      	movs	r2, #57	@ 0x39
 800244c:	2102      	movs	r1, #2
 800244e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2270      	movs	r2, #112	@ 0x70
 8002464:	4393      	bics	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	68fa      	ldr	r2, [r7, #12]
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	2380      	movs	r3, #128	@ 0x80
 8002480:	05db      	lsls	r3, r3, #23
 8002482:	429a      	cmp	r2, r3
 8002484:	d009      	beq.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a11      	ldr	r2, [pc, #68]	@ (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0f      	ldr	r2, [pc, #60]	@ (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d10c      	bne.n	80024b4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2280      	movs	r2, #128	@ 0x80
 800249e:	4393      	bics	r3, r2
 80024a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	68ba      	ldr	r2, [r7, #8]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2239      	movs	r2, #57	@ 0x39
 80024b8:	2101      	movs	r1, #1
 80024ba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2238      	movs	r2, #56	@ 0x38
 80024c0:	2100      	movs	r1, #0
 80024c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	40010800 	.word	0x40010800
 80024d4:	40011400 	.word	0x40011400

080024d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e044      	b.n	8002574 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2278      	movs	r2, #120	@ 0x78
 80024f6:	2100      	movs	r1, #0
 80024f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe fb29 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2224      	movs	r2, #36	@ 0x24
 8002506:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2101      	movs	r1, #1
 8002514:	438a      	bics	r2, r1
 8002516:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f8d0 	bl	80026c0 <UART_SetConfig>
 8002520:	0003      	movs	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d101      	bne.n	800252a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e024      	b.n	8002574 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 fb0d 	bl	8002b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	490d      	ldr	r1, [pc, #52]	@ (800257c <HAL_UART_Init+0xa4>)
 8002546:	400a      	ands	r2, r1
 8002548:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	212a      	movs	r1, #42	@ 0x2a
 8002556:	438a      	bics	r2, r1
 8002558:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2101      	movs	r1, #1
 8002566:	430a      	orrs	r2, r1
 8002568:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 fba5 	bl	8002cbc <UART_CheckIdleState>
 8002572:	0003      	movs	r3, r0
}
 8002574:	0018      	movs	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	b002      	add	sp, #8
 800257a:	bd80      	pop	{r7, pc}
 800257c:	ffffb7ff 	.word	0xffffb7ff

08002580 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	603b      	str	r3, [r7, #0]
 800258c:	1dbb      	adds	r3, r7, #6
 800258e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002594:	2b20      	cmp	r3, #32
 8002596:	d000      	beq.n	800259a <HAL_UART_Transmit+0x1a>
 8002598:	e08c      	b.n	80026b4 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_UART_Transmit+0x28>
 80025a0:	1dbb      	adds	r3, r7, #6
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e084      	b.n	80026b6 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	015b      	lsls	r3, r3, #5
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d109      	bne.n	80025cc <HAL_UART_Transmit+0x4c>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	691b      	ldr	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d105      	bne.n	80025cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2201      	movs	r2, #1
 80025c4:	4013      	ands	r3, r2
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e074      	b.n	80026b6 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2284      	movs	r2, #132	@ 0x84
 80025d0:	2100      	movs	r1, #0
 80025d2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2221      	movs	r2, #33	@ 0x21
 80025d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025da:	f7fe fbad 	bl	8000d38 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1dba      	adds	r2, r7, #6
 80025e6:	2150      	movs	r1, #80	@ 0x50
 80025e8:	8812      	ldrh	r2, [r2, #0]
 80025ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	1dba      	adds	r2, r7, #6
 80025f0:	2152      	movs	r1, #82	@ 0x52
 80025f2:	8812      	ldrh	r2, [r2, #0]
 80025f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	2380      	movs	r3, #128	@ 0x80
 80025fc:	015b      	lsls	r3, r3, #5
 80025fe:	429a      	cmp	r2, r3
 8002600:	d108      	bne.n	8002614 <HAL_UART_Transmit+0x94>
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d104      	bne.n	8002614 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	61bb      	str	r3, [r7, #24]
 8002612:	e003      	b.n	800261c <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800261c:	e02f      	b.n	800267e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	0013      	movs	r3, r2
 8002628:	2200      	movs	r2, #0
 800262a:	2180      	movs	r1, #128	@ 0x80
 800262c:	f000 fbee 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002630:	1e03      	subs	r3, r0, #0
 8002632:	d004      	beq.n	800263e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e03b      	b.n	80026b6 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10b      	bne.n	800265c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	001a      	movs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	05d2      	lsls	r2, r2, #23
 8002650:	0dd2      	lsrs	r2, r2, #23
 8002652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	3302      	adds	r3, #2
 8002658:	61bb      	str	r3, [r7, #24]
 800265a:	e007      	b.n	800266c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2252      	movs	r2, #82	@ 0x52
 8002670:	5a9b      	ldrh	r3, [r3, r2]
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b299      	uxth	r1, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2252      	movs	r2, #82	@ 0x52
 800267c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2252      	movs	r2, #82	@ 0x52
 8002682:	5a9b      	ldrh	r3, [r3, r2]
 8002684:	b29b      	uxth	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c9      	bne.n	800261e <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	697a      	ldr	r2, [r7, #20]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	0013      	movs	r3, r2
 8002694:	2200      	movs	r2, #0
 8002696:	2140      	movs	r1, #64	@ 0x40
 8002698:	f000 fbb8 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 800269c:	1e03      	subs	r3, r0, #0
 800269e:	d004      	beq.n	80026aa <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e005      	b.n	80026b6 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2220      	movs	r2, #32
 80026ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	e000      	b.n	80026b6 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80026b4:	2302      	movs	r3, #2
  }
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b008      	add	sp, #32
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c0:	b5b0      	push	{r4, r5, r7, lr}
 80026c2:	b08e      	sub	sp, #56	@ 0x38
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c8:	231a      	movs	r3, #26
 80026ca:	2218      	movs	r2, #24
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	431a      	orrs	r2, r3
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	431a      	orrs	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	69db      	ldr	r3, [r3, #28]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4ab4      	ldr	r2, [pc, #720]	@ (80029c4 <UART_SetConfig+0x304>)
 80026f4:	4013      	ands	r3, r2
 80026f6:	0019      	movs	r1, r3
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026fe:	430a      	orrs	r2, r1
 8002700:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	4aaf      	ldr	r2, [pc, #700]	@ (80029c8 <UART_SetConfig+0x308>)
 800270a:	4013      	ands	r3, r2
 800270c:	0019      	movs	r1, r3
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	68da      	ldr	r2, [r3, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4aa9      	ldr	r2, [pc, #676]	@ (80029cc <UART_SetConfig+0x30c>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d004      	beq.n	8002734 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002730:	4313      	orrs	r3, r2
 8002732:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	4aa5      	ldr	r2, [pc, #660]	@ (80029d0 <UART_SetConfig+0x310>)
 800273c:	4013      	ands	r3, r2
 800273e:	0019      	movs	r1, r3
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002746:	430a      	orrs	r2, r1
 8002748:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4aa1      	ldr	r2, [pc, #644]	@ (80029d4 <UART_SetConfig+0x314>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d131      	bne.n	80027b8 <UART_SetConfig+0xf8>
 8002754:	4ba0      	ldr	r3, [pc, #640]	@ (80029d8 <UART_SetConfig+0x318>)
 8002756:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002758:	220c      	movs	r2, #12
 800275a:	4013      	ands	r3, r2
 800275c:	2b0c      	cmp	r3, #12
 800275e:	d01d      	beq.n	800279c <UART_SetConfig+0xdc>
 8002760:	d823      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002762:	2b08      	cmp	r3, #8
 8002764:	d00c      	beq.n	8002780 <UART_SetConfig+0xc0>
 8002766:	d820      	bhi.n	80027aa <UART_SetConfig+0xea>
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <UART_SetConfig+0xb2>
 800276c:	2b04      	cmp	r3, #4
 800276e:	d00e      	beq.n	800278e <UART_SetConfig+0xce>
 8002770:	e01b      	b.n	80027aa <UART_SetConfig+0xea>
 8002772:	231b      	movs	r3, #27
 8002774:	2218      	movs	r2, #24
 8002776:	189b      	adds	r3, r3, r2
 8002778:	19db      	adds	r3, r3, r7
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e065      	b.n	800284c <UART_SetConfig+0x18c>
 8002780:	231b      	movs	r3, #27
 8002782:	2218      	movs	r2, #24
 8002784:	189b      	adds	r3, r3, r2
 8002786:	19db      	adds	r3, r3, r7
 8002788:	2202      	movs	r2, #2
 800278a:	701a      	strb	r2, [r3, #0]
 800278c:	e05e      	b.n	800284c <UART_SetConfig+0x18c>
 800278e:	231b      	movs	r3, #27
 8002790:	2218      	movs	r2, #24
 8002792:	189b      	adds	r3, r3, r2
 8002794:	19db      	adds	r3, r3, r7
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e057      	b.n	800284c <UART_SetConfig+0x18c>
 800279c:	231b      	movs	r3, #27
 800279e:	2218      	movs	r2, #24
 80027a0:	189b      	adds	r3, r3, r2
 80027a2:	19db      	adds	r3, r3, r7
 80027a4:	2208      	movs	r2, #8
 80027a6:	701a      	strb	r2, [r3, #0]
 80027a8:	e050      	b.n	800284c <UART_SetConfig+0x18c>
 80027aa:	231b      	movs	r3, #27
 80027ac:	2218      	movs	r2, #24
 80027ae:	189b      	adds	r3, r3, r2
 80027b0:	19db      	adds	r3, r3, r7
 80027b2:	2210      	movs	r2, #16
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e049      	b.n	800284c <UART_SetConfig+0x18c>
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a83      	ldr	r2, [pc, #524]	@ (80029cc <UART_SetConfig+0x30c>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d13e      	bne.n	8002840 <UART_SetConfig+0x180>
 80027c2:	4b85      	ldr	r3, [pc, #532]	@ (80029d8 <UART_SetConfig+0x318>)
 80027c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80027c6:	23c0      	movs	r3, #192	@ 0xc0
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4013      	ands	r3, r2
 80027cc:	22c0      	movs	r2, #192	@ 0xc0
 80027ce:	0112      	lsls	r2, r2, #4
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d027      	beq.n	8002824 <UART_SetConfig+0x164>
 80027d4:	22c0      	movs	r2, #192	@ 0xc0
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	4293      	cmp	r3, r2
 80027da:	d82a      	bhi.n	8002832 <UART_SetConfig+0x172>
 80027dc:	2280      	movs	r2, #128	@ 0x80
 80027de:	0112      	lsls	r2, r2, #4
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d011      	beq.n	8002808 <UART_SetConfig+0x148>
 80027e4:	2280      	movs	r2, #128	@ 0x80
 80027e6:	0112      	lsls	r2, r2, #4
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d822      	bhi.n	8002832 <UART_SetConfig+0x172>
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d004      	beq.n	80027fa <UART_SetConfig+0x13a>
 80027f0:	2280      	movs	r2, #128	@ 0x80
 80027f2:	00d2      	lsls	r2, r2, #3
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d00e      	beq.n	8002816 <UART_SetConfig+0x156>
 80027f8:	e01b      	b.n	8002832 <UART_SetConfig+0x172>
 80027fa:	231b      	movs	r3, #27
 80027fc:	2218      	movs	r2, #24
 80027fe:	189b      	adds	r3, r3, r2
 8002800:	19db      	adds	r3, r3, r7
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	e021      	b.n	800284c <UART_SetConfig+0x18c>
 8002808:	231b      	movs	r3, #27
 800280a:	2218      	movs	r2, #24
 800280c:	189b      	adds	r3, r3, r2
 800280e:	19db      	adds	r3, r3, r7
 8002810:	2202      	movs	r2, #2
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e01a      	b.n	800284c <UART_SetConfig+0x18c>
 8002816:	231b      	movs	r3, #27
 8002818:	2218      	movs	r2, #24
 800281a:	189b      	adds	r3, r3, r2
 800281c:	19db      	adds	r3, r3, r7
 800281e:	2204      	movs	r2, #4
 8002820:	701a      	strb	r2, [r3, #0]
 8002822:	e013      	b.n	800284c <UART_SetConfig+0x18c>
 8002824:	231b      	movs	r3, #27
 8002826:	2218      	movs	r2, #24
 8002828:	189b      	adds	r3, r3, r2
 800282a:	19db      	adds	r3, r3, r7
 800282c:	2208      	movs	r2, #8
 800282e:	701a      	strb	r2, [r3, #0]
 8002830:	e00c      	b.n	800284c <UART_SetConfig+0x18c>
 8002832:	231b      	movs	r3, #27
 8002834:	2218      	movs	r2, #24
 8002836:	189b      	adds	r3, r3, r2
 8002838:	19db      	adds	r3, r3, r7
 800283a:	2210      	movs	r2, #16
 800283c:	701a      	strb	r2, [r3, #0]
 800283e:	e005      	b.n	800284c <UART_SetConfig+0x18c>
 8002840:	231b      	movs	r3, #27
 8002842:	2218      	movs	r2, #24
 8002844:	189b      	adds	r3, r3, r2
 8002846:	19db      	adds	r3, r3, r7
 8002848:	2210      	movs	r2, #16
 800284a:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a5e      	ldr	r2, [pc, #376]	@ (80029cc <UART_SetConfig+0x30c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d000      	beq.n	8002858 <UART_SetConfig+0x198>
 8002856:	e084      	b.n	8002962 <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002858:	231b      	movs	r3, #27
 800285a:	2218      	movs	r2, #24
 800285c:	189b      	adds	r3, r3, r2
 800285e:	19db      	adds	r3, r3, r7
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d01d      	beq.n	80028a2 <UART_SetConfig+0x1e2>
 8002866:	dc20      	bgt.n	80028aa <UART_SetConfig+0x1ea>
 8002868:	2b04      	cmp	r3, #4
 800286a:	d015      	beq.n	8002898 <UART_SetConfig+0x1d8>
 800286c:	dc1d      	bgt.n	80028aa <UART_SetConfig+0x1ea>
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <UART_SetConfig+0x1b8>
 8002872:	2b02      	cmp	r3, #2
 8002874:	d005      	beq.n	8002882 <UART_SetConfig+0x1c2>
 8002876:	e018      	b.n	80028aa <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff fa38 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800287c:	0003      	movs	r3, r0
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002880:	e01c      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002882:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <UART_SetConfig+0x318>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2210      	movs	r2, #16
 8002888:	4013      	ands	r3, r2
 800288a:	d002      	beq.n	8002892 <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800288c:	4b53      	ldr	r3, [pc, #332]	@ (80029dc <UART_SetConfig+0x31c>)
 800288e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002890:	e014      	b.n	80028bc <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 8002892:	4b53      	ldr	r3, [pc, #332]	@ (80029e0 <UART_SetConfig+0x320>)
 8002894:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002896:	e011      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002898:	f7ff f978 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 800289c:	0003      	movs	r3, r0
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028a0:	e00c      	b.n	80028bc <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	021b      	lsls	r3, r3, #8
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028a8:	e008      	b.n	80028bc <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80028ae:	231a      	movs	r3, #26
 80028b0:	2218      	movs	r2, #24
 80028b2:	189b      	adds	r3, r3, r2
 80028b4:	19db      	adds	r3, r3, r7
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
        break;
 80028ba:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d100      	bne.n	80028c4 <UART_SetConfig+0x204>
 80028c2:	e12f      	b.n	8002b24 <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	0013      	movs	r3, r2
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	189b      	adds	r3, r3, r2
 80028ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d305      	bcc.n	80028e0 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80028da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028dc:	429a      	cmp	r2, r3
 80028de:	d906      	bls.n	80028ee <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 80028e0:	231a      	movs	r3, #26
 80028e2:	2218      	movs	r2, #24
 80028e4:	189b      	adds	r3, r3, r2
 80028e6:	19db      	adds	r3, r3, r7
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
 80028ec:	e11a      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80028ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	2300      	movs	r3, #0
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	6939      	ldr	r1, [r7, #16]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	000b      	movs	r3, r1
 80028fc:	0e1b      	lsrs	r3, r3, #24
 80028fe:	0010      	movs	r0, r2
 8002900:	0205      	lsls	r5, r0, #8
 8002902:	431d      	orrs	r5, r3
 8002904:	000b      	movs	r3, r1
 8002906:	021c      	lsls	r4, r3, #8
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	085b      	lsrs	r3, r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	68b8      	ldr	r0, [r7, #8]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	1900      	adds	r0, r0, r4
 800291a:	4169      	adcs	r1, r5
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f7fd fc79 	bl	8000220 <__aeabi_uldivmod>
 800292e:	0002      	movs	r2, r0
 8002930:	000b      	movs	r3, r1
 8002932:	0013      	movs	r3, r2
 8002934:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002936:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002938:	23c0      	movs	r3, #192	@ 0xc0
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d309      	bcc.n	8002954 <UART_SetConfig+0x294>
 8002940:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	035b      	lsls	r3, r3, #13
 8002946:	429a      	cmp	r2, r3
 8002948:	d204      	bcs.n	8002954 <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e0e7      	b.n	8002b24 <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 8002954:	231a      	movs	r3, #26
 8002956:	2218      	movs	r2, #24
 8002958:	189b      	adds	r3, r3, r2
 800295a:	19db      	adds	r3, r3, r7
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e0e0      	b.n	8002b24 <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	021b      	lsls	r3, r3, #8
 800296a:	429a      	cmp	r2, r3
 800296c:	d000      	beq.n	8002970 <UART_SetConfig+0x2b0>
 800296e:	e082      	b.n	8002a76 <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 8002970:	231b      	movs	r3, #27
 8002972:	2218      	movs	r2, #24
 8002974:	189b      	adds	r3, r3, r2
 8002976:	19db      	adds	r3, r3, r7
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d834      	bhi.n	80029e8 <UART_SetConfig+0x328>
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	4b18      	ldr	r3, [pc, #96]	@ (80029e4 <UART_SetConfig+0x324>)
 8002982:	18d3      	adds	r3, r2, r3
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002988:	f7ff f9b0 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 800298c:	0003      	movs	r3, r0
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002990:	e033      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002992:	f7ff f9c1 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002996:	0003      	movs	r3, r0
 8002998:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800299a:	e02e      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800299c:	4b0e      	ldr	r3, [pc, #56]	@ (80029d8 <UART_SetConfig+0x318>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d002      	beq.n	80029ac <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029a6:	4b0d      	ldr	r3, [pc, #52]	@ (80029dc <UART_SetConfig+0x31c>)
 80029a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029aa:	e026      	b.n	80029fa <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80029ac:	4b0c      	ldr	r3, [pc, #48]	@ (80029e0 <UART_SetConfig+0x320>)
 80029ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029b0:	e023      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029b2:	f7ff f8eb 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80029b6:	0003      	movs	r3, r0
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029ba:	e01e      	b.n	80029fa <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029bc:	2380      	movs	r3, #128	@ 0x80
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029c2:	e01a      	b.n	80029fa <UART_SetConfig+0x33a>
 80029c4:	efff69f3 	.word	0xefff69f3
 80029c8:	ffffcfff 	.word	0xffffcfff
 80029cc:	40004800 	.word	0x40004800
 80029d0:	fffff4ff 	.word	0xfffff4ff
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40021000 	.word	0x40021000
 80029dc:	003d0900 	.word	0x003d0900
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	0800303c 	.word	0x0800303c
      default:
        pclk = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80029ec:	231a      	movs	r3, #26
 80029ee:	2218      	movs	r2, #24
 80029f0:	189b      	adds	r3, r3, r2
 80029f2:	19db      	adds	r3, r3, r7
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
        break;
 80029f8:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d100      	bne.n	8002a02 <UART_SetConfig+0x342>
 8002a00:	e090      	b.n	8002b24 <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a04:	005a      	lsls	r2, r3, #1
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	085b      	lsrs	r3, r3, #1
 8002a0c:	18d2      	adds	r2, r2, r3
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	0019      	movs	r1, r3
 8002a14:	0010      	movs	r0, r2
 8002a16:	f7fd fb77 	bl	8000108 <__udivsi3>
 8002a1a:	0003      	movs	r3, r0
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a20:	2b0f      	cmp	r3, #15
 8002a22:	d921      	bls.n	8002a68 <UART_SetConfig+0x3a8>
 8002a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a26:	2380      	movs	r3, #128	@ 0x80
 8002a28:	025b      	lsls	r3, r3, #9
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d21c      	bcs.n	8002a68 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	200e      	movs	r0, #14
 8002a34:	2418      	movs	r4, #24
 8002a36:	1903      	adds	r3, r0, r4
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	438a      	bics	r2, r1
 8002a3e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a42:	085b      	lsrs	r3, r3, #1
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2207      	movs	r2, #7
 8002a48:	4013      	ands	r3, r2
 8002a4a:	b299      	uxth	r1, r3
 8002a4c:	1903      	adds	r3, r0, r4
 8002a4e:	19db      	adds	r3, r3, r7
 8002a50:	1902      	adds	r2, r0, r4
 8002a52:	19d2      	adds	r2, r2, r7
 8002a54:	8812      	ldrh	r2, [r2, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	1902      	adds	r2, r0, r4
 8002a60:	19d2      	adds	r2, r2, r7
 8002a62:	8812      	ldrh	r2, [r2, #0]
 8002a64:	60da      	str	r2, [r3, #12]
 8002a66:	e05d      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002a68:	231a      	movs	r3, #26
 8002a6a:	2218      	movs	r2, #24
 8002a6c:	189b      	adds	r3, r3, r2
 8002a6e:	19db      	adds	r3, r3, r7
 8002a70:	2201      	movs	r2, #1
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e056      	b.n	8002b24 <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a76:	231b      	movs	r3, #27
 8002a78:	2218      	movs	r2, #24
 8002a7a:	189b      	adds	r3, r3, r2
 8002a7c:	19db      	adds	r3, r3, r7
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d822      	bhi.n	8002aca <UART_SetConfig+0x40a>
 8002a84:	009a      	lsls	r2, r3, #2
 8002a86:	4b2f      	ldr	r3, [pc, #188]	@ (8002b44 <UART_SetConfig+0x484>)
 8002a88:	18d3      	adds	r3, r2, r3
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a8e:	f7ff f92d 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8002a92:	0003      	movs	r3, r0
 8002a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a96:	e021      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a98:	f7ff f93e 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8002a9c:	0003      	movs	r3, r0
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002aa0:	e01c      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aa2:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <UART_SetConfig+0x488>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d002      	beq.n	8002ab2 <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002aac:	4b27      	ldr	r3, [pc, #156]	@ (8002b4c <UART_SetConfig+0x48c>)
 8002aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ab0:	e014      	b.n	8002adc <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 8002ab2:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <UART_SetConfig+0x490>)
 8002ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ab6:	e011      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab8:	f7ff f868 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002abc:	0003      	movs	r3, r0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ac0:	e00c      	b.n	8002adc <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ac2:	2380      	movs	r3, #128	@ 0x80
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002ac8:	e008      	b.n	8002adc <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002ace:	231a      	movs	r3, #26
 8002ad0:	2218      	movs	r2, #24
 8002ad2:	189b      	adds	r3, r3, r2
 8002ad4:	19db      	adds	r3, r3, r7
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
        break;
 8002ada:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d020      	beq.n	8002b24 <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	085a      	lsrs	r2, r3, #1
 8002ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aea:	18d2      	adds	r2, r2, r3
 8002aec:	69fb      	ldr	r3, [r7, #28]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	0019      	movs	r1, r3
 8002af2:	0010      	movs	r0, r2
 8002af4:	f7fd fb08 	bl	8000108 <__udivsi3>
 8002af8:	0003      	movs	r3, r0
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002afe:	2b0f      	cmp	r3, #15
 8002b00:	d90a      	bls.n	8002b18 <UART_SetConfig+0x458>
 8002b02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b04:	2380      	movs	r3, #128	@ 0x80
 8002b06:	025b      	lsls	r3, r3, #9
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d205      	bcs.n	8002b18 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e005      	b.n	8002b24 <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002b18:	231a      	movs	r3, #26
 8002b1a:	2218      	movs	r2, #24
 8002b1c:	189b      	adds	r3, r3, r2
 8002b1e:	19db      	adds	r3, r3, r7
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	2200      	movs	r2, #0
 8002b28:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002b30:	231a      	movs	r3, #26
 8002b32:	2218      	movs	r2, #24
 8002b34:	189b      	adds	r3, r3, r2
 8002b36:	19db      	adds	r3, r3, r7
 8002b38:	781b      	ldrb	r3, [r3, #0]
}
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	b00e      	add	sp, #56	@ 0x38
 8002b40:	bdb0      	pop	{r4, r5, r7, pc}
 8002b42:	46c0      	nop			@ (mov r8, r8)
 8002b44:	08003060 	.word	0x08003060
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	003d0900 	.word	0x003d0900
 8002b50:	00f42400 	.word	0x00f42400

08002b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d00b      	beq.n	8002b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c98 <UART_AdvFeatureConfig+0x144>)
 8002b6e:	4013      	ands	r3, r2
 8002b70:	0019      	movs	r1, r3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	2202      	movs	r2, #2
 8002b84:	4013      	ands	r3, r2
 8002b86:	d00b      	beq.n	8002ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	4a43      	ldr	r2, [pc, #268]	@ (8002c9c <UART_AdvFeatureConfig+0x148>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	0019      	movs	r1, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d00b      	beq.n	8002bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	4a3b      	ldr	r2, [pc, #236]	@ (8002ca0 <UART_AdvFeatureConfig+0x14c>)
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc6:	2208      	movs	r2, #8
 8002bc8:	4013      	ands	r3, r2
 8002bca:	d00b      	beq.n	8002be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	4a34      	ldr	r2, [pc, #208]	@ (8002ca4 <UART_AdvFeatureConfig+0x150>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	430a      	orrs	r2, r1
 8002be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be8:	2210      	movs	r2, #16
 8002bea:	4013      	ands	r3, r2
 8002bec:	d00b      	beq.n	8002c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002ca8 <UART_AdvFeatureConfig+0x154>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d00b      	beq.n	8002c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	4a25      	ldr	r2, [pc, #148]	@ (8002cac <UART_AdvFeatureConfig+0x158>)
 8002c18:	4013      	ands	r3, r2
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	2240      	movs	r2, #64	@ 0x40
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb0 <UART_AdvFeatureConfig+0x15c>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	035b      	lsls	r3, r3, #13
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d10b      	bne.n	8002c6e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <UART_AdvFeatureConfig+0x160>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	0019      	movs	r1, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c72:	2280      	movs	r2, #128	@ 0x80
 8002c74:	4013      	ands	r3, r2
 8002c76:	d00b      	beq.n	8002c90 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8002cb8 <UART_AdvFeatureConfig+0x164>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	0019      	movs	r1, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	605a      	str	r2, [r3, #4]
  }
}
 8002c90:	46c0      	nop			@ (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b002      	add	sp, #8
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fffdffff 	.word	0xfffdffff
 8002c9c:	fffeffff 	.word	0xfffeffff
 8002ca0:	fffbffff 	.word	0xfffbffff
 8002ca4:	ffff7fff 	.word	0xffff7fff
 8002ca8:	ffffefff 	.word	0xffffefff
 8002cac:	ffffdfff 	.word	0xffffdfff
 8002cb0:	ffefffff 	.word	0xffefffff
 8002cb4:	ff9fffff 	.word	0xff9fffff
 8002cb8:	fff7ffff 	.word	0xfff7ffff

08002cbc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b092      	sub	sp, #72	@ 0x48
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2284      	movs	r2, #132	@ 0x84
 8002cc8:	2100      	movs	r1, #0
 8002cca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ccc:	f7fe f834 	bl	8000d38 <HAL_GetTick>
 8002cd0:	0003      	movs	r3, r0
 8002cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2208      	movs	r2, #8
 8002cdc:	4013      	ands	r3, r2
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d12c      	bne.n	8002d3c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ce4:	2280      	movs	r2, #128	@ 0x80
 8002ce6:	0391      	lsls	r1, r2, #14
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	4a46      	ldr	r2, [pc, #280]	@ (8002e04 <UART_CheckIdleState+0x148>)
 8002cec:	9200      	str	r2, [sp, #0]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f000 f88c 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002cf4:	1e03      	subs	r3, r0, #0
 8002cf6:	d021      	beq.n	8002d3c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002d00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d02:	2301      	movs	r3, #1
 8002d04:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d08:	f383 8810 	msr	PRIMASK, r3
}
 8002d0c:	46c0      	nop			@ (mov r8, r8)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	@ 0x80
 8002d1a:	438a      	bics	r2, r1
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d24:	f383 8810 	msr	PRIMASK, r3
}
 8002d28:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2278      	movs	r2, #120	@ 0x78
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e05f      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2204      	movs	r2, #4
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d146      	bne.n	8002dd8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002d4c:	2280      	movs	r2, #128	@ 0x80
 8002d4e:	03d1      	lsls	r1, r2, #15
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4a2c      	ldr	r2, [pc, #176]	@ (8002e04 <UART_CheckIdleState+0x148>)
 8002d54:	9200      	str	r2, [sp, #0]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f000 f858 	bl	8002e0c <UART_WaitOnFlagUntilTimeout>
 8002d5c:	1e03      	subs	r3, r0, #0
 8002d5e:	d03b      	beq.n	8002dd8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d60:	f3ef 8310 	mrs	r3, PRIMASK
 8002d64:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d66:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d68:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	f383 8810 	msr	PRIMASK, r3
}
 8002d74:	46c0      	nop			@ (mov r8, r8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4921      	ldr	r1, [pc, #132]	@ (8002e08 <UART_CheckIdleState+0x14c>)
 8002d82:	400a      	ands	r2, r1
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f383 8810 	msr	PRIMASK, r3
}
 8002d90:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d92:	f3ef 8310 	mrs	r3, PRIMASK
 8002d96:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d98:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d9a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	f383 8810 	msr	PRIMASK, r3
}
 8002da6:	46c0      	nop			@ (mov r8, r8)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2101      	movs	r1, #1
 8002db4:	438a      	bics	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6a3b      	ldr	r3, [r7, #32]
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2280      	movs	r2, #128	@ 0x80
 8002dc8:	2120      	movs	r1, #32
 8002dca:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2278      	movs	r2, #120	@ 0x78
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e011      	b.n	8002dfc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2280      	movs	r2, #128	@ 0x80
 8002de2:	2120      	movs	r1, #32
 8002de4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2278      	movs	r2, #120	@ 0x78
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b010      	add	sp, #64	@ 0x40
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	01ffffff 	.word	0x01ffffff
 8002e08:	fffffedf 	.word	0xfffffedf

08002e0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	1dfb      	adds	r3, r7, #7
 8002e1a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e1c:	e04b      	b.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	3301      	adds	r3, #1
 8002e22:	d048      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e24:	f7fd ff88 	bl	8000d38 <HAL_GetTick>
 8002e28:	0002      	movs	r2, r0
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d302      	bcc.n	8002e3a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e04b      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2204      	movs	r2, #4
 8002e46:	4013      	ands	r3, r2
 8002e48:	d035      	beq.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	2208      	movs	r2, #8
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d111      	bne.n	8002e7c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	0018      	movs	r0, r3
 8002e64:	f000 f83c 	bl	8002ee0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2284      	movs	r2, #132	@ 0x84
 8002e6c:	2108      	movs	r1, #8
 8002e6e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2278      	movs	r2, #120	@ 0x78
 8002e74:	2100      	movs	r1, #0
 8002e76:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e02c      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	401a      	ands	r2, r3
 8002e88:	2380      	movs	r3, #128	@ 0x80
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d112      	bne.n	8002eb6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2280      	movs	r2, #128	@ 0x80
 8002e96:	0112      	lsls	r2, r2, #4
 8002e98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f000 f81f 	bl	8002ee0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2284      	movs	r2, #132	@ 0x84
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2278      	movs	r2, #120	@ 0x78
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e00f      	b.n	8002ed6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	425a      	negs	r2, r3
 8002ec6:	4153      	adcs	r3, r2
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	001a      	movs	r2, r3
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d0a4      	beq.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	b004      	add	sp, #16
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08e      	sub	sp, #56	@ 0x38
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ee8:	f3ef 8310 	mrs	r3, PRIMASK
 8002eec:	617b      	str	r3, [r7, #20]
  return(result);
 8002eee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			@ (mov r8, r8)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4926      	ldr	r1, [pc, #152]	@ (8002fa4 <UART_EndRxTransfer+0xc4>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f10:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	f383 8810 	msr	PRIMASK, r3
}
 8002f18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f1e:	623b      	str	r3, [r7, #32]
  return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f24:	2301      	movs	r3, #1
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	f383 8810 	msr	PRIMASK, r3
}
 8002f2e:	46c0      	nop			@ (mov r8, r8)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2101      	movs	r1, #1
 8002f3c:	438a      	bics	r2, r1
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f42:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	f383 8810 	msr	PRIMASK, r3
}
 8002f4a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d118      	bne.n	8002f86 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f54:	f3ef 8310 	mrs	r3, PRIMASK
 8002f58:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f5a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f5e:	2301      	movs	r3, #1
 8002f60:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f383 8810 	msr	PRIMASK, r3
}
 8002f68:	46c0      	nop			@ (mov r8, r8)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2110      	movs	r1, #16
 8002f76:	438a      	bics	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f383 8810 	msr	PRIMASK, r3
}
 8002f84:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2280      	movs	r2, #128	@ 0x80
 8002f8a:	2120      	movs	r1, #32
 8002f8c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002f9a:	46c0      	nop			@ (mov r8, r8)
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	b00e      	add	sp, #56	@ 0x38
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	46c0      	nop			@ (mov r8, r8)
 8002fa4:	fffffedf 	.word	0xfffffedf

08002fa8 <memset>:
 8002fa8:	0003      	movs	r3, r0
 8002faa:	1882      	adds	r2, r0, r2
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d100      	bne.n	8002fb2 <memset+0xa>
 8002fb0:	4770      	bx	lr
 8002fb2:	7019      	strb	r1, [r3, #0]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	e7f9      	b.n	8002fac <memset+0x4>

08002fb8 <__libc_init_array>:
 8002fb8:	b570      	push	{r4, r5, r6, lr}
 8002fba:	2600      	movs	r6, #0
 8002fbc:	4c0c      	ldr	r4, [pc, #48]	@ (8002ff0 <__libc_init_array+0x38>)
 8002fbe:	4d0d      	ldr	r5, [pc, #52]	@ (8002ff4 <__libc_init_array+0x3c>)
 8002fc0:	1b64      	subs	r4, r4, r5
 8002fc2:	10a4      	asrs	r4, r4, #2
 8002fc4:	42a6      	cmp	r6, r4
 8002fc6:	d109      	bne.n	8002fdc <__libc_init_array+0x24>
 8002fc8:	2600      	movs	r6, #0
 8002fca:	f000 f819 	bl	8003000 <_init>
 8002fce:	4c0a      	ldr	r4, [pc, #40]	@ (8002ff8 <__libc_init_array+0x40>)
 8002fd0:	4d0a      	ldr	r5, [pc, #40]	@ (8002ffc <__libc_init_array+0x44>)
 8002fd2:	1b64      	subs	r4, r4, r5
 8002fd4:	10a4      	asrs	r4, r4, #2
 8002fd6:	42a6      	cmp	r6, r4
 8002fd8:	d105      	bne.n	8002fe6 <__libc_init_array+0x2e>
 8002fda:	bd70      	pop	{r4, r5, r6, pc}
 8002fdc:	00b3      	lsls	r3, r6, #2
 8002fde:	58eb      	ldr	r3, [r5, r3]
 8002fe0:	4798      	blx	r3
 8002fe2:	3601      	adds	r6, #1
 8002fe4:	e7ee      	b.n	8002fc4 <__libc_init_array+0xc>
 8002fe6:	00b3      	lsls	r3, r6, #2
 8002fe8:	58eb      	ldr	r3, [r5, r3]
 8002fea:	4798      	blx	r3
 8002fec:	3601      	adds	r6, #1
 8002fee:	e7f2      	b.n	8002fd6 <__libc_init_array+0x1e>
 8002ff0:	0800308c 	.word	0x0800308c
 8002ff4:	0800308c 	.word	0x0800308c
 8002ff8:	08003090 	.word	0x08003090
 8002ffc:	0800308c 	.word	0x0800308c

08003000 <_init>:
 8003000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003002:	46c0      	nop			@ (mov r8, r8)
 8003004:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003006:	bc08      	pop	{r3}
 8003008:	469e      	mov	lr, r3
 800300a:	4770      	bx	lr

0800300c <_fini>:
 800300c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800300e:	46c0      	nop			@ (mov r8, r8)
 8003010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003012:	bc08      	pop	{r3}
 8003014:	469e      	mov	lr, r3
 8003016:	4770      	bx	lr
