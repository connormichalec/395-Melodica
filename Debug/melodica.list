
melodica.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ea0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08002f60  08002f60  00003f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe0  08002fe0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002fe0  08002fe0  00003fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002fe8  08002fe8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe8  08002fe8  00003fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002fec  08002fec  00003fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002ff0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  2000000c  08002ffc  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002ffc  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b979  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3a  00000000  00000000  0000f9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000115e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000848  00000000  00000000  00012098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001115b  00000000  00000000  000128e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1b2  00000000  00000000  00023a3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00069fa4  00000000  00000000  00030bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ab91  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002604  00000000  00000000  0009abd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  0009d1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f48 	.word	0x08002f48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002f48 	.word	0x08002f48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <delay_us.0>:
  /* USER CODE BEGIN WHILE */

  HAL_TIM_Base_Start(&htim2);

  void delay_us (uint16_t us)
  {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	0002      	movs	r2, r0
 80004b0:	1dbb      	adds	r3, r7, #6
 80004b2:	801a      	strh	r2, [r3, #0]
 80004b4:	4663      	mov	r3, ip
 80004b6:	603b      	str	r3, [r7, #0]
  	__HAL_TIM_SET_COUNTER(&htim2,0);  // set the counter value a 0
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <delay_us.0+0x34>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2200      	movs	r2, #0
 80004be:	625a      	str	r2, [r3, #36]	@ 0x24
  	while (__HAL_TIM_GET_COUNTER(&htim2) < us);  // wait for the counter to reach the us input in the parameter
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <delay_us.0+0x34>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004c8:	1dbb      	adds	r3, r7, #6
 80004ca:	881b      	ldrh	r3, [r3, #0]
 80004cc:	429a      	cmp	r2, r3
 80004ce:	d3f8      	bcc.n	80004c2 <delay_us.0+0x1a>
  }
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	46bd      	mov	sp, r7
 80004d6:	b002      	add	sp, #8
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	20000028 	.word	0x20000028

080004e0 <main>:
{
 80004e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e2:	b08f      	sub	sp, #60	@ 0x3c
 80004e4:	af00      	add	r7, sp, #0
int main(void)
 80004e6:	2350      	movs	r3, #80	@ 0x50
 80004e8:	18fa      	adds	r2, r7, r3
 80004ea:	2120      	movs	r1, #32
 80004ec:	187b      	adds	r3, r7, r1
 80004ee:	615a      	str	r2, [r3, #20]
 80004f0:	000b      	movs	r3, r1
 80004f2:	18f9      	adds	r1, r7, r3
 80004f4:	18f8      	adds	r0, r7, r3
 80004f6:	4a11      	ldr	r2, [pc, #68]	@ (800053c <main+0x5c>)
 80004f8:	000b      	movs	r3, r1
 80004fa:	ca70      	ldmia	r2!, {r4, r5, r6}
 80004fc:	c370      	stmia	r3!, {r4, r5, r6}
 80004fe:	ca30      	ldmia	r2!, {r4, r5}
 8000500:	c330      	stmia	r3!, {r4, r5}
 8000502:	60c8      	str	r0, [r1, #12]
 8000504:	4b0e      	ldr	r3, [pc, #56]	@ (8000540 <main+0x60>)
 8000506:	610b      	str	r3, [r1, #16]
  HAL_Init();
 8000508:	f000 fb54 	bl	8000bb4 <HAL_Init>
  SystemClock_Config();
 800050c:	f000 f81c 	bl	8000548 <SystemClock_Config>
  MX_GPIO_Init();
 8000510:	f000 f912 	bl	8000738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 f8de 	bl	80006d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000518:	f000 f888 	bl	800062c <MX_TIM2_Init>
  HAL_TIM_Base_Start(&htim2);
 800051c:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <main+0x64>)
 800051e:	0018      	movs	r0, r3
 8000520:	f001 fd20 	bl	8001f64 <HAL_TIM_Base_Start>

  uint8_t notes[32];
  while (1)
  {
	  ReadKeyboard(notes, &delay_us);
 8000524:	2320      	movs	r3, #32
 8000526:	18fb      	adds	r3, r7, r3
 8000528:	2201      	movs	r2, #1
 800052a:	4313      	orrs	r3, r2
 800052c:	001a      	movs	r2, r3
 800052e:	003b      	movs	r3, r7
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fa30 	bl	8000998 <ReadKeyboard>
  {
 8000538:	46c0      	nop			@ (mov r8, r8)
 800053a:	e7f3      	b.n	8000524 <main+0x44>
 800053c:	08002f60 	.word	0x08002f60
 8000540:	080004a9 	.word	0x080004a9
 8000544:	20000028 	.word	0x20000028

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b590      	push	{r4, r7, lr}
 800054a:	b099      	sub	sp, #100	@ 0x64
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	242c      	movs	r4, #44	@ 0x2c
 8000550:	193b      	adds	r3, r7, r4
 8000552:	0018      	movs	r0, r3
 8000554:	2334      	movs	r3, #52	@ 0x34
 8000556:	001a      	movs	r2, r3
 8000558:	2100      	movs	r1, #0
 800055a:	f002 fcc9 	bl	8002ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055e:	2318      	movs	r3, #24
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	0018      	movs	r0, r3
 8000564:	2314      	movs	r3, #20
 8000566:	001a      	movs	r2, r3
 8000568:	2100      	movs	r1, #0
 800056a:	f002 fcc1 	bl	8002ef0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800056e:	003b      	movs	r3, r7
 8000570:	0018      	movs	r0, r3
 8000572:	2318      	movs	r3, #24
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f002 fcba 	bl	8002ef0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800057c:	4b29      	ldr	r3, [pc, #164]	@ (8000624 <SystemClock_Config+0xdc>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a29      	ldr	r2, [pc, #164]	@ (8000628 <SystemClock_Config+0xe0>)
 8000582:	401a      	ands	r2, r3
 8000584:	4b27      	ldr	r3, [pc, #156]	@ (8000624 <SystemClock_Config+0xdc>)
 8000586:	2180      	movs	r1, #128	@ 0x80
 8000588:	0109      	lsls	r1, r1, #4
 800058a:	430a      	orrs	r2, r1
 800058c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058e:	0021      	movs	r1, r4
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2202      	movs	r2, #2
 8000594:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2201      	movs	r2, #1
 800059a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2210      	movs	r2, #16
 80005a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2202      	movs	r2, #2
 80005a6:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2280      	movs	r2, #128	@ 0x80
 80005b2:	02d2      	lsls	r2, r2, #11
 80005b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2280      	movs	r2, #128	@ 0x80
 80005ba:	03d2      	lsls	r2, r2, #15
 80005bc:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fdc3 	bl	800114c <HAL_RCC_OscConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005ca:	f000 f925 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	2118      	movs	r1, #24
 80005d0:	187b      	adds	r3, r7, r1
 80005d2:	220f      	movs	r2, #15
 80005d4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d6:	187b      	adds	r3, r7, r1
 80005d8:	2203      	movs	r2, #3
 80005da:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e2:	187b      	adds	r3, r7, r1
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2101      	movs	r1, #1
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f926 	bl	8001844 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80005fc:	f000 f90c 	bl	8000818 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000600:	003b      	movs	r3, r7
 8000602:	2202      	movs	r2, #2
 8000604:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000606:	003b      	movs	r3, r7
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800060c:	003b      	movs	r3, r7
 800060e:	0018      	movs	r0, r3
 8000610:	f001 fb3c 	bl	8001c8c <HAL_RCCEx_PeriphCLKConfig>
 8000614:	1e03      	subs	r3, r0, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000618:	f000 f8fe 	bl	8000818 <Error_Handler>
  }
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b019      	add	sp, #100	@ 0x64
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	40007000 	.word	0x40007000
 8000628:	ffffe7ff 	.word	0xffffe7ff

0800062c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	2308      	movs	r3, #8
 8000634:	18fb      	adds	r3, r7, r3
 8000636:	0018      	movs	r0, r3
 8000638:	2310      	movs	r3, #16
 800063a:	001a      	movs	r2, r3
 800063c:	2100      	movs	r1, #0
 800063e:	f002 fc57 	bl	8002ef0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	2308      	movs	r3, #8
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 fc50 	bl	8002ef0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000652:	2280      	movs	r2, #128	@ 0x80
 8000654:	05d2      	lsls	r2, r2, #23
 8000656:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000658:	4b1c      	ldr	r3, [pc, #112]	@ (80006cc <MX_TIM2_Init+0xa0>)
 800065a:	2247      	movs	r2, #71	@ 0x47
 800065c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000664:	4b19      	ldr	r3, [pc, #100]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000666:	4a1a      	ldr	r2, [pc, #104]	@ (80006d0 <MX_TIM2_Init+0xa4>)
 8000668:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066a:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <MX_TIM2_Init+0xa0>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000670:	4b16      	ldr	r3, [pc, #88]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000672:	2200      	movs	r2, #0
 8000674:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000676:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000678:	0018      	movs	r0, r3
 800067a:	f001 fc33 	bl	8001ee4 <HAL_TIM_Base_Init>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000682:	f000 f8c9 	bl	8000818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000686:	2108      	movs	r1, #8
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2280      	movs	r2, #128	@ 0x80
 800068c:	0152      	lsls	r2, r2, #5
 800068e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000690:	187a      	adds	r2, r7, r1
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_TIM2_Init+0xa0>)
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f001 fca8 	bl	8001fec <HAL_TIM_ConfigClockSource>
 800069c:	1e03      	subs	r3, r0, #0
 800069e:	d001      	beq.n	80006a4 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80006a0:	f000 f8ba 	bl	8000818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a4:	003b      	movs	r3, r7
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	003b      	movs	r3, r7
 80006ac:	2200      	movs	r2, #0
 80006ae:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b0:	003a      	movs	r2, r7
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_TIM2_Init+0xa0>)
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 fe5a 	bl	8002370 <HAL_TIMEx_MasterConfigSynchronization>
 80006bc:	1e03      	subs	r3, r0, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 80006c0:	f000 f8aa 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b006      	add	sp, #24
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000028 	.word	0x20000028
 80006d0:	0000ffff 	.word	0x0000ffff

080006d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d8:	4b14      	ldr	r3, [pc, #80]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006da:	4a15      	ldr	r2, [pc, #84]	@ (8000730 <MX_USART2_UART_Init+0x5c>)
 80006dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 31250;
 80006de:	4b13      	ldr	r3, [pc, #76]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e0:	4a14      	ldr	r2, [pc, #80]	@ (8000734 <MX_USART2_UART_Init+0x60>)
 80006e2:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e4:	4b11      	ldr	r3, [pc, #68]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006f0:	4b0e      	ldr	r3, [pc, #56]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006f8:	220c      	movs	r2, #12
 80006fa:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fc:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <MX_USART2_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000708:	4b08      	ldr	r3, [pc, #32]	@ (800072c <MX_USART2_UART_Init+0x58>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800070e:	4b07      	ldr	r3, [pc, #28]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000714:	4b05      	ldr	r3, [pc, #20]	@ (800072c <MX_USART2_UART_Init+0x58>)
 8000716:	0018      	movs	r0, r3
 8000718:	f001 fe82 	bl	8002420 <HAL_UART_Init>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <MX_USART2_UART_Init+0x50>
  {
    Error_Handler();
 8000720:	f000 f87a 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	20000068 	.word	0x20000068
 8000730:	40004400 	.word	0x40004400
 8000734:	00007a12 	.word	0x00007a12

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b089      	sub	sp, #36	@ 0x24
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	240c      	movs	r4, #12
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2314      	movs	r3, #20
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f002 fbd1 	bl	8002ef0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800074e:	4b2f      	ldr	r3, [pc, #188]	@ (800080c <MX_GPIO_Init+0xd4>)
 8000750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0xd4>)
 8000754:	2101      	movs	r1, #1
 8000756:	430a      	orrs	r2, r1
 8000758:	62da      	str	r2, [r3, #44]	@ 0x2c
 800075a:	4b2c      	ldr	r3, [pc, #176]	@ (800080c <MX_GPIO_Init+0xd4>)
 800075c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800075e:	2201      	movs	r2, #1
 8000760:	4013      	ands	r3, r2
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b29      	ldr	r3, [pc, #164]	@ (800080c <MX_GPIO_Init+0xd4>)
 8000768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800076a:	4b28      	ldr	r3, [pc, #160]	@ (800080c <MX_GPIO_Init+0xd4>)
 800076c:	2102      	movs	r1, #2
 800076e:	430a      	orrs	r2, r1
 8000770:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <MX_GPIO_Init+0xd4>)
 8000774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000776:	2202      	movs	r2, #2
 8000778:	4013      	ands	r3, r2
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800077e:	23a0      	movs	r3, #160	@ 0xa0
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2200      	movs	r2, #0
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0018      	movs	r0, r3
 8000788:	f000 fcc3 	bl	8001112 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800078c:	4b20      	ldr	r3, [pc, #128]	@ (8000810 <MX_GPIO_Init+0xd8>)
 800078e:	2200      	movs	r2, #0
 8000790:	21f8      	movs	r1, #248	@ 0xf8
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fcbd 	bl	8001112 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA0 PA1 PA2 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_15;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	4a1e      	ldr	r2, [pc, #120]	@ (8000814 <MX_GPIO_Init+0xdc>)
 800079c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2200      	movs	r2, #0
 80007a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	193a      	adds	r2, r7, r4
 80007ac:	23a0      	movs	r3, #160	@ 0xa0
 80007ae:	05db      	lsls	r3, r3, #23
 80007b0:	0011      	movs	r1, r2
 80007b2:	0018      	movs	r0, r3
 80007b4:	f000 fb22 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2280      	movs	r2, #128	@ 0x80
 80007bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2201      	movs	r2, #1
 80007c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	193a      	adds	r2, r7, r4
 80007d2:	23a0      	movs	r3, #160	@ 0xa0
 80007d4:	05db      	lsls	r3, r3, #23
 80007d6:	0011      	movs	r1, r2
 80007d8:	0018      	movs	r0, r3
 80007da:	f000 fb0f 	bl	8000dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007de:	0021      	movs	r1, r4
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	22f8      	movs	r2, #248	@ 0xf8
 80007e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2201      	movs	r2, #1
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2202      	movs	r2, #2
 80007f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	187b      	adds	r3, r7, r1
 80007fa:	4a05      	ldr	r2, [pc, #20]	@ (8000810 <MX_GPIO_Init+0xd8>)
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f000 fafc 	bl	8000dfc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	46c0      	nop			@ (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b009      	add	sp, #36	@ 0x24
 800080a:	bd90      	pop	{r4, r7, pc}
 800080c:	40021000 	.word	0x40021000
 8000810:	50000400 	.word	0x50000400
 8000814:	00008007 	.word	0x00008007

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	46c0      	nop			@ (mov r8, r8)
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <note_on>:
#include "midi.h"

extern UART_HandleTypeDef huart2;

void note_on(uint8_t channel, uint8_t key, uint8_t velocity) {
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	0004      	movs	r4, r0
 800082c:	0008      	movs	r0, r1
 800082e:	0011      	movs	r1, r2
 8000830:	1dfb      	adds	r3, r7, #7
 8000832:	1c22      	adds	r2, r4, #0
 8000834:	701a      	strb	r2, [r3, #0]
 8000836:	1dbb      	adds	r3, r7, #6
 8000838:	1c02      	adds	r2, r0, #0
 800083a:	701a      	strb	r2, [r3, #0]
 800083c:	1d7b      	adds	r3, r7, #5
 800083e:	1c0a      	adds	r2, r1, #0
 8000840:	701a      	strb	r2, [r3, #0]
    MIDI_SendByte(NOTE_ON | (channel & 0b00001111));
 8000842:	1dfb      	adds	r3, r7, #7
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b25b      	sxtb	r3, r3
 8000848:	220f      	movs	r2, #15
 800084a:	4013      	ands	r3, r2
 800084c:	b25b      	sxtb	r3, r3
 800084e:	2270      	movs	r2, #112	@ 0x70
 8000850:	4252      	negs	r2, r2
 8000852:	4313      	orrs	r3, r2
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f845 	bl	80008e8 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & key);
 800085e:	1dbb      	adds	r3, r7, #6
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	227f      	movs	r2, #127	@ 0x7f
 8000864:	4013      	ands	r3, r2
 8000866:	b2db      	uxtb	r3, r3
 8000868:	0018      	movs	r0, r3
 800086a:	f000 f83d 	bl	80008e8 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & velocity);
 800086e:	1d7b      	adds	r3, r7, #5
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	227f      	movs	r2, #127	@ 0x7f
 8000874:	4013      	ands	r3, r2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	0018      	movs	r0, r3
 800087a:	f000 f835 	bl	80008e8 <MIDI_SendByte>
}
 800087e:	46c0      	nop			@ (mov r8, r8)
 8000880:	46bd      	mov	sp, r7
 8000882:	b003      	add	sp, #12
 8000884:	bd90      	pop	{r4, r7, pc}

08000886 <note_off>:

void note_off(uint8_t channel, uint8_t key, uint8_t velocity) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b083      	sub	sp, #12
 800088a:	af00      	add	r7, sp, #0
 800088c:	0004      	movs	r4, r0
 800088e:	0008      	movs	r0, r1
 8000890:	0011      	movs	r1, r2
 8000892:	1dfb      	adds	r3, r7, #7
 8000894:	1c22      	adds	r2, r4, #0
 8000896:	701a      	strb	r2, [r3, #0]
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	1c02      	adds	r2, r0, #0
 800089c:	701a      	strb	r2, [r3, #0]
 800089e:	1d7b      	adds	r3, r7, #5
 80008a0:	1c0a      	adds	r2, r1, #0
 80008a2:	701a      	strb	r2, [r3, #0]
    MIDI_SendByte(NOTE_OFF | (channel & 0b00001111));
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	220f      	movs	r2, #15
 80008ac:	4013      	ands	r3, r2
 80008ae:	b25b      	sxtb	r3, r3
 80008b0:	2280      	movs	r2, #128	@ 0x80
 80008b2:	4252      	negs	r2, r2
 80008b4:	4313      	orrs	r3, r2
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	0018      	movs	r0, r3
 80008bc:	f000 f814 	bl	80008e8 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & key);
 80008c0:	1dbb      	adds	r3, r7, #6
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	227f      	movs	r2, #127	@ 0x7f
 80008c6:	4013      	ands	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	0018      	movs	r0, r3
 80008cc:	f000 f80c 	bl	80008e8 <MIDI_SendByte>
    MIDI_SendByte((uint8_t) 0b01111111 & velocity);
 80008d0:	1d7b      	adds	r3, r7, #5
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	227f      	movs	r2, #127	@ 0x7f
 80008d6:	4013      	ands	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	f000 f804 	bl	80008e8 <MIDI_SendByte>
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b003      	add	sp, #12
 80008e6:	bd90      	pop	{r4, r7, pc}

080008e8 <MIDI_SendByte>:
void channel_pressure(uint8_t channel, uint8_t pressure) {
    MIDI_SendByte(CHANNEL_PRESSURE | (channel & 0b00001111));
    MIDI_SendByte((uint8_t) 0b01111111 & pressure);
}

void MIDI_SendByte(uint8_t byte) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	0002      	movs	r2, r0
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart2, &byte, 1, HAL_MAX_DELAY);
 80008f4:	2301      	movs	r3, #1
 80008f6:	425b      	negs	r3, r3
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	4804      	ldr	r0, [pc, #16]	@ (800090c <MIDI_SendByte+0x24>)
 80008fc:	2201      	movs	r2, #1
 80008fe:	f001 fde3 	bl	80024c8 <HAL_UART_Transmit>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46bd      	mov	sp, r7
 8000906:	b002      	add	sp, #8
 8000908:	bd80      	pop	{r7, pc}
 800090a:	46c0      	nop			@ (mov r8, r8)
 800090c:	20000068 	.word	0x20000068

08000910 <ReadNote>:
#include "mux.h"
#include "midi.h"

uint8_t ReadNote(uint8_t key) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	0002      	movs	r2, r0
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, key & 0x01);
 800091c:	1dfb      	adds	r3, r7, #7
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2201      	movs	r2, #1
 8000922:	4013      	ands	r3, r2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	481b      	ldr	r0, [pc, #108]	@ (8000994 <ReadNote+0x84>)
 8000928:	001a      	movs	r2, r3
 800092a:	2110      	movs	r1, #16
 800092c:	f000 fbf1 	bl	8001112 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, (key & 0x02) >> 1);
 8000930:	1dfb      	adds	r3, r7, #7
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	105b      	asrs	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	b2db      	uxtb	r3, r3
 800093e:	4815      	ldr	r0, [pc, #84]	@ (8000994 <ReadNote+0x84>)
 8000940:	001a      	movs	r2, r3
 8000942:	2120      	movs	r1, #32
 8000944:	f000 fbe5 	bl	8001112 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, (key & 0x04) >> 2);
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	109b      	asrs	r3, r3, #2
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2201      	movs	r2, #1
 8000952:	4013      	ands	r3, r2
 8000954:	b2db      	uxtb	r3, r3
 8000956:	480f      	ldr	r0, [pc, #60]	@ (8000994 <ReadNote+0x84>)
 8000958:	001a      	movs	r2, r3
 800095a:	2140      	movs	r1, #64	@ 0x40
 800095c:	f000 fbd9 	bl	8001112 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, (key & 0x08) >> 3);
 8000960:	1dfb      	adds	r3, r7, #7
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	10db      	asrs	r3, r3, #3
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2201      	movs	r2, #1
 800096a:	4013      	ands	r3, r2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <ReadNote+0x84>)
 8000970:	001a      	movs	r2, r3
 8000972:	2180      	movs	r1, #128	@ 0x80
 8000974:	f000 fbcd 	bl	8001112 <HAL_GPIO_WritePin>

    return (uint8_t) HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15);
 8000978:	2380      	movs	r3, #128	@ 0x80
 800097a:	021a      	lsls	r2, r3, #8
 800097c:	23a0      	movs	r3, #160	@ 0xa0
 800097e:	05db      	lsls	r3, r3, #23
 8000980:	0011      	movs	r1, r2
 8000982:	0018      	movs	r0, r3
 8000984:	f000 fba8 	bl	80010d8 <HAL_GPIO_ReadPin>
 8000988:	0003      	movs	r3, r0
}
 800098a:	0018      	movs	r0, r3
 800098c:	46bd      	mov	sp, r7
 800098e:	b002      	add	sp, #8
 8000990:	bd80      	pop	{r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	50000400 	.word	0x50000400

08000998 <ReadKeyboard>:



void ReadKeyboard(uint8_t status[], void *delay_func(uint16_t us) ) {
 8000998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
    uint8_t new_status;
	for (uint8_t i = 0; i < 16; i++) {
 80009a2:	230f      	movs	r3, #15
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	2200      	movs	r2, #0
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e042      	b.n	8000a32 <ReadKeyboard+0x9a>
        new_status = ReadNote(i);
 80009ac:	260e      	movs	r6, #14
 80009ae:	19bc      	adds	r4, r7, r6
 80009b0:	250f      	movs	r5, #15
 80009b2:	197b      	adds	r3, r7, r5
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	0018      	movs	r0, r3
 80009b8:	f7ff ffaa 	bl	8000910 <ReadNote>
 80009bc:	0003      	movs	r3, r0
 80009be:	7023      	strb	r3, [r4, #0]
        if (!status[i] && new_status) note_on(0, 53 + i, 60);
 80009c0:	0029      	movs	r1, r5
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	18d3      	adds	r3, r2, r3
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d10c      	bne.n	80009ea <ReadKeyboard+0x52>
 80009d0:	19bb      	adds	r3, r7, r6
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d008      	beq.n	80009ea <ReadKeyboard+0x52>
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	3335      	adds	r3, #53	@ 0x35
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	223c      	movs	r2, #60	@ 0x3c
 80009e2:	0019      	movs	r1, r3
 80009e4:	2000      	movs	r0, #0
 80009e6:	f7ff ff1d 	bl	8000824 <note_on>
        if (status[i] && !new_status) note_off(0, 53 + i, 0);
 80009ea:	210f      	movs	r1, #15
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d00d      	beq.n	8000a16 <ReadKeyboard+0x7e>
 80009fa:	230e      	movs	r3, #14
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d108      	bne.n	8000a16 <ReadKeyboard+0x7e>
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	3335      	adds	r3, #53	@ 0x35
 8000a0a:	b2db      	uxtb	r3, r3
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	0019      	movs	r1, r3
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff ff38 	bl	8000886 <note_off>
        status[i] = new_status;
 8000a16:	210f      	movs	r1, #15
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	18d3      	adds	r3, r2, r3
 8000a20:	220e      	movs	r2, #14
 8000a22:	18ba      	adds	r2, r7, r2
 8000a24:	7812      	ldrb	r2, [r2, #0]
 8000a26:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 16; i++) {
 8000a28:	187b      	adds	r3, r7, r1
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	187b      	adds	r3, r7, r1
 8000a2e:	3201      	adds	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]
 8000a32:	230f      	movs	r3, #15
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d9b7      	bls.n	80009ac <ReadKeyboard+0x14>
        //delay_func(10);
    }
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46c0      	nop			@ (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b005      	add	sp, #20
 8000a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_MspInit+0x24>)
 8000a4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_MspInit+0x24>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	430a      	orrs	r2, r1
 8000a56:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <HAL_MspInit+0x24>)
 8000a5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a5c:	4b03      	ldr	r3, [pc, #12]	@ (8000a6c <HAL_MspInit+0x24>)
 8000a5e:	2180      	movs	r1, #128	@ 0x80
 8000a60:	0549      	lsls	r1, r1, #21
 8000a62:	430a      	orrs	r2, r1
 8000a64:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a66:	46c0      	nop			@ (mov r8, r8)
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	2380      	movs	r3, #128	@ 0x80
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d105      	bne.n	8000a90 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <HAL_TIM_Base_MspInit+0x28>)
 8000a86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000a88:	4b03      	ldr	r3, [pc, #12]	@ (8000a98 <HAL_TIM_Base_MspInit+0x28>)
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	@ 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fa1e 	bl	8002ef0 <memset>
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_UART_MspInit+0x80>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12a      	bne.n	8000b14 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000ac0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000ac4:	2180      	movs	r1, #128	@ 0x80
 8000ac6:	0289      	lsls	r1, r1, #10
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000acc:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <HAL_UART_MspInit+0x84>)
 8000ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000adc:	2201      	movs	r2, #1
 8000ade:	4013      	ands	r3, r2
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA9     ------> USART2_TX
    PA10     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	22c0      	movs	r2, #192	@ 0xc0
 8000ae8:	00d2      	lsls	r2, r2, #3
 8000aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	0021      	movs	r1, r4
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2202      	movs	r2, #2
 8000af2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afa:	187b      	adds	r3, r7, r1
 8000afc:	2203      	movs	r2, #3
 8000afe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2204      	movs	r2, #4
 8000b04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	187a      	adds	r2, r7, r1
 8000b08:	23a0      	movs	r3, #160	@ 0xa0
 8000b0a:	05db      	lsls	r3, r3, #23
 8000b0c:	0011      	movs	r1, r2
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 f974 	bl	8000dfc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	46bd      	mov	sp, r7
 8000b18:	b009      	add	sp, #36	@ 0x24
 8000b1a:	bd90      	pop	{r4, r7, pc}
 8000b1c:	40004400 	.word	0x40004400
 8000b20:	40021000 	.word	0x40021000

08000b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b28:	46c0      	nop			@ (mov r8, r8)
 8000b2a:	e7fd      	b.n	8000b28 <NMI_Handler+0x4>

08000b2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b30:	46c0      	nop			@ (mov r8, r8)
 8000b32:	e7fd      	b.n	8000b30 <HardFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f886 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	@ (8000b98 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b64:	f7ff fff7 	bl	8000b56 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f002 f9b7 	bl	8002f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fca5 	bl	80004e0 <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
   ldr   r0, =_estack
 8000b98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	08002ff0 	.word	0x08002ff0
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	200000f4 	.word	0x200000f4

08000bb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_COMP_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf0 <HAL_Init+0x3c>)
 8000bc6:	2140      	movs	r1, #64	@ 0x40
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bcc:	2003      	movs	r0, #3
 8000bce:	f000 f811 	bl	8000bf4 <HAL_InitTick>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e001      	b.n	8000be2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bde:	f7ff ff33 	bl	8000a48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			@ (mov r8, r8)
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b14      	ldr	r3, [pc, #80]	@ (8000c50 <HAL_InitTick+0x5c>)
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	23fa      	movs	r3, #250	@ 0xfa
 8000c08:	0098      	lsls	r0, r3, #2
 8000c0a:	f7ff fa7d 	bl	8000108 <__udivsi3>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	0020      	movs	r0, r4
 8000c14:	f7ff fa78 	bl	8000108 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f8e1 	bl	8000de2 <HAL_SYSTICK_Config>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e00f      	b.n	8000c48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d80b      	bhi.n	8000c46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f8be 	bl	8000db8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <HAL_InitTick+0x64>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b003      	add	sp, #12
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	18d2      	adds	r2, r2, r3
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			@ (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200000f0 	.word	0x200000f0

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	@ (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	200000f0 	.word	0x200000f0

08000c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c94:	b590      	push	{r4, r7, lr}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ca8:	d828      	bhi.n	8000cfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000caa:	4a2f      	ldr	r2, [pc, #188]	@ (8000d68 <__NVIC_SetPriority+0xd4>)
 8000cac:	1dfb      	adds	r3, r7, #7
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	b25b      	sxtb	r3, r3
 8000cb2:	089b      	lsrs	r3, r3, #2
 8000cb4:	33c0      	adds	r3, #192	@ 0xc0
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	589b      	ldr	r3, [r3, r2]
 8000cba:	1dfa      	adds	r2, r7, #7
 8000cbc:	7812      	ldrb	r2, [r2, #0]
 8000cbe:	0011      	movs	r1, r2
 8000cc0:	2203      	movs	r2, #3
 8000cc2:	400a      	ands	r2, r1
 8000cc4:	00d2      	lsls	r2, r2, #3
 8000cc6:	21ff      	movs	r1, #255	@ 0xff
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	43d2      	mvns	r2, r2
 8000cce:	401a      	ands	r2, r3
 8000cd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	019b      	lsls	r3, r3, #6
 8000cd6:	22ff      	movs	r2, #255	@ 0xff
 8000cd8:	401a      	ands	r2, r3
 8000cda:	1dfb      	adds	r3, r7, #7
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	0018      	movs	r0, r3
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	4003      	ands	r3, r0
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ce8:	481f      	ldr	r0, [pc, #124]	@ (8000d68 <__NVIC_SetPriority+0xd4>)
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b25b      	sxtb	r3, r3
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	33c0      	adds	r3, #192	@ 0xc0
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000cfa:	e031      	b.n	8000d60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <__NVIC_SetPriority+0xd8>)
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0019      	movs	r1, r3
 8000d04:	230f      	movs	r3, #15
 8000d06:	400b      	ands	r3, r1
 8000d08:	3b08      	subs	r3, #8
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3306      	adds	r3, #6
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	18d3      	adds	r3, r2, r3
 8000d12:	3304      	adds	r3, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	1dfa      	adds	r2, r7, #7
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	400a      	ands	r2, r1
 8000d20:	00d2      	lsls	r2, r2, #3
 8000d22:	21ff      	movs	r1, #255	@ 0xff
 8000d24:	4091      	lsls	r1, r2
 8000d26:	000a      	movs	r2, r1
 8000d28:	43d2      	mvns	r2, r2
 8000d2a:	401a      	ands	r2, r3
 8000d2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	019b      	lsls	r3, r3, #6
 8000d32:	22ff      	movs	r2, #255	@ 0xff
 8000d34:	401a      	ands	r2, r3
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	4003      	ands	r3, r0
 8000d40:	00db      	lsls	r3, r3, #3
 8000d42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d44:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <__NVIC_SetPriority+0xd8>)
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	001c      	movs	r4, r3
 8000d4c:	230f      	movs	r3, #15
 8000d4e:	4023      	ands	r3, r4
 8000d50:	3b08      	subs	r3, #8
 8000d52:	089b      	lsrs	r3, r3, #2
 8000d54:	430a      	orrs	r2, r1
 8000d56:	3306      	adds	r3, #6
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	18c3      	adds	r3, r0, r3
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	601a      	str	r2, [r3, #0]
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b003      	add	sp, #12
 8000d66:	bd90      	pop	{r4, r7, pc}
 8000d68:	e000e100 	.word	0xe000e100
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	1e5a      	subs	r2, r3, #1
 8000d7c:	2380      	movs	r3, #128	@ 0x80
 8000d7e:	045b      	lsls	r3, r3, #17
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d301      	bcc.n	8000d88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d84:	2301      	movs	r3, #1
 8000d86:	e010      	b.n	8000daa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d88:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <SysTick_Config+0x44>)
 8000d8a:	687a      	ldr	r2, [r7, #4]
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d90:	2301      	movs	r3, #1
 8000d92:	425b      	negs	r3, r3
 8000d94:	2103      	movs	r1, #3
 8000d96:	0018      	movs	r0, r3
 8000d98:	f7ff ff7c 	bl	8000c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d9c:	4b05      	ldr	r3, [pc, #20]	@ (8000db4 <SysTick_Config+0x44>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000da2:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <SysTick_Config+0x44>)
 8000da4:	2207      	movs	r2, #7
 8000da6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	0018      	movs	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	b002      	add	sp, #8
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	e000e010 	.word	0xe000e010

08000db8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	187b      	adds	r3, r7, r1
 8000dc6:	1c02      	adds	r2, r0, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	b25b      	sxtb	r3, r3
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f7ff ff5d 	bl	8000c94 <__NVIC_SetPriority>
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b004      	add	sp, #16
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	0018      	movs	r0, r3
 8000dee:	f7ff ffbf 	bl	8000d70 <SysTick_Config>
 8000df2:	0003      	movs	r3, r0
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b002      	add	sp, #8
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e12:	e149      	b.n	80010a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2101      	movs	r1, #1
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	4091      	lsls	r1, r2
 8000e1e:	000a      	movs	r2, r1
 8000e20:	4013      	ands	r3, r2
 8000e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d100      	bne.n	8000e2c <HAL_GPIO_Init+0x30>
 8000e2a:	e13a      	b.n	80010a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	2203      	movs	r2, #3
 8000e32:	4013      	ands	r3, r2
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d005      	beq.n	8000e44 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	2203      	movs	r2, #3
 8000e3e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d130      	bne.n	8000ea6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	689b      	ldr	r3, [r3, #8]
 8000e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	409a      	lsls	r2, r3
 8000e52:	0013      	movs	r3, r2
 8000e54:	43da      	mvns	r2, r3
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	43da      	mvns	r2, r3
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	091b      	lsrs	r3, r3, #4
 8000e90:	2201      	movs	r2, #1
 8000e92:	401a      	ands	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	409a      	lsls	r2, r3
 8000e98:	0013      	movs	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2203      	movs	r2, #3
 8000eac:	4013      	ands	r3, r2
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d017      	beq.n	8000ee2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	409a      	lsls	r2, r3
 8000ec0:	0013      	movs	r3, r2
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	689a      	ldr	r2, [r3, #8]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4013      	ands	r3, r2
 8000eea:	2b02      	cmp	r3, #2
 8000eec:	d123      	bne.n	8000f36 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	0092      	lsls	r2, r2, #2
 8000ef8:	58d3      	ldr	r3, [r2, r3]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	2207      	movs	r2, #7
 8000f00:	4013      	ands	r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	220f      	movs	r2, #15
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	691a      	ldr	r2, [r3, #16]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2107      	movs	r1, #7
 8000f1a:	400b      	ands	r3, r1
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	409a      	lsls	r2, r3
 8000f20:	0013      	movs	r3, r2
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	08da      	lsrs	r2, r3, #3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3208      	adds	r2, #8
 8000f30:	0092      	lsls	r2, r2, #2
 8000f32:	6939      	ldr	r1, [r7, #16]
 8000f34:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	2203      	movs	r2, #3
 8000f54:	401a      	ands	r2, r3
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	23c0      	movs	r3, #192	@ 0xc0
 8000f70:	029b      	lsls	r3, r3, #10
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_GPIO_Init+0x17c>
 8000f76:	e094      	b.n	80010a2 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f78:	4b51      	ldr	r3, [pc, #324]	@ (80010c0 <HAL_GPIO_Init+0x2c4>)
 8000f7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7c:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <HAL_GPIO_Init+0x2c4>)
 8000f7e:	2101      	movs	r1, #1
 8000f80:	430a      	orrs	r2, r1
 8000f82:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f84:	4a4f      	ldr	r2, [pc, #316]	@ (80010c4 <HAL_GPIO_Init+0x2c8>)
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	3302      	adds	r3, #2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	589b      	ldr	r3, [r3, r2]
 8000f90:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4013      	ands	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	23a0      	movs	r3, #160	@ 0xa0
 8000fac:	05db      	lsls	r3, r3, #23
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d013      	beq.n	8000fda <HAL_GPIO_Init+0x1de>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a44      	ldr	r2, [pc, #272]	@ (80010c8 <HAL_GPIO_Init+0x2cc>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d00d      	beq.n	8000fd6 <HAL_GPIO_Init+0x1da>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a43      	ldr	r2, [pc, #268]	@ (80010cc <HAL_GPIO_Init+0x2d0>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d007      	beq.n	8000fd2 <HAL_GPIO_Init+0x1d6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a42      	ldr	r2, [pc, #264]	@ (80010d0 <HAL_GPIO_Init+0x2d4>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_GPIO_Init+0x1d2>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fce:	2306      	movs	r3, #6
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x1e0>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	2103      	movs	r1, #3
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	@ (80010c4 <HAL_GPIO_Init+0x2c8>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b36      	ldr	r3, [pc, #216]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	2380      	movs	r3, #128	@ 0x80
 8001010:	035b      	lsls	r3, r3, #13
 8001012:	4013      	ands	r3, r2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101e:	4b2d      	ldr	r3, [pc, #180]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001024:	4b2b      	ldr	r3, [pc, #172]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	2380      	movs	r3, #128	@ 0x80
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	4013      	ands	r3, r2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001048:	4b22      	ldr	r3, [pc, #136]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800104e:	4b21      	ldr	r3, [pc, #132]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	@ 0x80
 8001064:	029b      	lsls	r3, r3, #10
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001072:	4b18      	ldr	r3, [pc, #96]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	@ 0x80
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109c:	4b0d      	ldr	r3, [pc, #52]	@ (80010d4 <HAL_GPIO_Init+0x2d8>)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	40da      	lsrs	r2, r3
 80010b0:	1e13      	subs	r3, r2, #0
 80010b2:	d000      	beq.n	80010b6 <HAL_GPIO_Init+0x2ba>
 80010b4:	e6ae      	b.n	8000e14 <HAL_GPIO_Init+0x18>
  }
}
 80010b6:	46c0      	nop			@ (mov r8, r8)
 80010b8:	46c0      	nop			@ (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	50000400 	.word	0x50000400
 80010cc:	50000800 	.word	0x50000800
 80010d0:	50001c00 	.word	0x50001c00
 80010d4:	40010400 	.word	0x40010400

080010d8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	000a      	movs	r2, r1
 80010e2:	1cbb      	adds	r3, r7, #2
 80010e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	1cba      	adds	r2, r7, #2
 80010ec:	8812      	ldrh	r2, [r2, #0]
 80010ee:	4013      	ands	r3, r2
 80010f0:	d004      	beq.n	80010fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80010f2:	230f      	movs	r3, #15
 80010f4:	18fb      	adds	r3, r7, r3
 80010f6:	2201      	movs	r2, #1
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e003      	b.n	8001104 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010fc:	230f      	movs	r3, #15
 80010fe:	18fb      	adds	r3, r7, r3
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001104:	230f      	movs	r3, #15
 8001106:	18fb      	adds	r3, r7, r3
 8001108:	781b      	ldrb	r3, [r3, #0]
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	b004      	add	sp, #16
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	0008      	movs	r0, r1
 800111c:	0011      	movs	r1, r2
 800111e:	1cbb      	adds	r3, r7, #2
 8001120:	1c02      	adds	r2, r0, #0
 8001122:	801a      	strh	r2, [r3, #0]
 8001124:	1c7b      	adds	r3, r7, #1
 8001126:	1c0a      	adds	r2, r1, #0
 8001128:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800112a:	1c7b      	adds	r3, r7, #1
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	1cbb      	adds	r3, r7, #2
 8001134:	881a      	ldrh	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800113a:	e003      	b.n	8001144 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800113c:	1cbb      	adds	r3, r7, #2
 800113e:	881a      	ldrh	r2, [r3, #0]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001144:	46c0      	nop			@ (mov r8, r8)
 8001146:	46bd      	mov	sp, r7
 8001148:	b002      	add	sp, #8
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f000 fb6c 	bl	8001838 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001160:	4bc8      	ldr	r3, [pc, #800]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	220c      	movs	r2, #12
 8001166:	4013      	ands	r3, r2
 8001168:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800116a:	4bc6      	ldr	r3, [pc, #792]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	2380      	movs	r3, #128	@ 0x80
 8001170:	025b      	lsls	r3, r3, #9
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2201      	movs	r2, #1
 800117c:	4013      	ands	r3, r2
 800117e:	d100      	bne.n	8001182 <HAL_RCC_OscConfig+0x36>
 8001180:	e07d      	b.n	800127e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	2b08      	cmp	r3, #8
 8001186:	d007      	beq.n	8001198 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	2b0c      	cmp	r3, #12
 800118c:	d112      	bne.n	80011b4 <HAL_RCC_OscConfig+0x68>
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	025b      	lsls	r3, r3, #9
 8001194:	429a      	cmp	r2, r3
 8001196:	d10d      	bne.n	80011b4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001198:	4bba      	ldr	r3, [pc, #744]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	2380      	movs	r3, #128	@ 0x80
 800119e:	029b      	lsls	r3, r3, #10
 80011a0:	4013      	ands	r3, r2
 80011a2:	d100      	bne.n	80011a6 <HAL_RCC_OscConfig+0x5a>
 80011a4:	e06a      	b.n	800127c <HAL_RCC_OscConfig+0x130>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d166      	bne.n	800127c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	f000 fb42 	bl	8001838 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	025b      	lsls	r3, r3, #9
 80011bc:	429a      	cmp	r2, r3
 80011be:	d107      	bne.n	80011d0 <HAL_RCC_OscConfig+0x84>
 80011c0:	4bb0      	ldr	r3, [pc, #704]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4baf      	ldr	r3, [pc, #700]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011c6:	2180      	movs	r1, #128	@ 0x80
 80011c8:	0249      	lsls	r1, r1, #9
 80011ca:	430a      	orrs	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e027      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	23a0      	movs	r3, #160	@ 0xa0
 80011d6:	02db      	lsls	r3, r3, #11
 80011d8:	429a      	cmp	r2, r3
 80011da:	d10e      	bne.n	80011fa <HAL_RCC_OscConfig+0xae>
 80011dc:	4ba9      	ldr	r3, [pc, #676]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011e2:	2180      	movs	r1, #128	@ 0x80
 80011e4:	02c9      	lsls	r1, r1, #11
 80011e6:	430a      	orrs	r2, r1
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	4ba6      	ldr	r3, [pc, #664]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4ba5      	ldr	r3, [pc, #660]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	0249      	lsls	r1, r1, #9
 80011f4:	430a      	orrs	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	e012      	b.n	8001220 <HAL_RCC_OscConfig+0xd4>
 80011fa:	4ba2      	ldr	r3, [pc, #648]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4ba1      	ldr	r3, [pc, #644]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001200:	49a1      	ldr	r1, [pc, #644]	@ (8001488 <HAL_RCC_OscConfig+0x33c>)
 8001202:	400a      	ands	r2, r1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	4b9f      	ldr	r3, [pc, #636]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	2380      	movs	r3, #128	@ 0x80
 800120c:	025b      	lsls	r3, r3, #9
 800120e:	4013      	ands	r3, r2
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4b9b      	ldr	r3, [pc, #620]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b9a      	ldr	r3, [pc, #616]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800121a:	499c      	ldr	r1, [pc, #624]	@ (800148c <HAL_RCC_OscConfig+0x340>)
 800121c:	400a      	ands	r2, r1
 800121e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d014      	beq.n	8001252 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fd2a 	bl	8000c80 <HAL_GetTick>
 800122c:	0003      	movs	r3, r0
 800122e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001232:	f7ff fd25 	bl	8000c80 <HAL_GetTick>
 8001236:	0002      	movs	r2, r0
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b64      	cmp	r3, #100	@ 0x64
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e2f9      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001244:	4b8f      	ldr	r3, [pc, #572]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2380      	movs	r3, #128	@ 0x80
 800124a:	029b      	lsls	r3, r3, #10
 800124c:	4013      	ands	r3, r2
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0xe6>
 8001250:	e015      	b.n	800127e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fd15 	bl	8000c80 <HAL_GetTick>
 8001256:	0003      	movs	r3, r0
 8001258:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800125c:	f7ff fd10 	bl	8000c80 <HAL_GetTick>
 8001260:	0002      	movs	r2, r0
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b64      	cmp	r3, #100	@ 0x64
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e2e4      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800126e:	4b85      	ldr	r3, [pc, #532]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	2380      	movs	r3, #128	@ 0x80
 8001274:	029b      	lsls	r3, r3, #10
 8001276:	4013      	ands	r3, r2
 8001278:	d1f0      	bne.n	800125c <HAL_RCC_OscConfig+0x110>
 800127a:	e000      	b.n	800127e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0x13e>
 8001288:	e099      	b.n	80013be <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001292:	2220      	movs	r2, #32
 8001294:	4013      	ands	r3, r2
 8001296:	d009      	beq.n	80012ac <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001298:	4b7a      	ldr	r3, [pc, #488]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b79      	ldr	r3, [pc, #484]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800129e:	2120      	movs	r1, #32
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	2220      	movs	r2, #32
 80012a8:	4393      	bics	r3, r2
 80012aa:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d005      	beq.n	80012be <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	2b0c      	cmp	r3, #12
 80012b6:	d13e      	bne.n	8001336 <HAL_RCC_OscConfig+0x1ea>
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d13b      	bne.n	8001336 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80012be:	4b71      	ldr	r3, [pc, #452]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	2204      	movs	r2, #4
 80012c4:	4013      	ands	r3, r2
 80012c6:	d004      	beq.n	80012d2 <HAL_RCC_OscConfig+0x186>
 80012c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e2b2      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b6c      	ldr	r3, [pc, #432]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001490 <HAL_RCC_OscConfig+0x344>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	021a      	lsls	r2, r3, #8
 80012e2:	4b68      	ldr	r3, [pc, #416]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012e4:	430a      	orrs	r2, r1
 80012e6:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012e8:	4b66      	ldr	r3, [pc, #408]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2209      	movs	r2, #9
 80012ee:	4393      	bics	r3, r2
 80012f0:	0019      	movs	r1, r3
 80012f2:	4b64      	ldr	r3, [pc, #400]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80012f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012fa:	f000 fbeb 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80012fe:	0001      	movs	r1, r0
 8001300:	4b60      	ldr	r3, [pc, #384]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	220f      	movs	r2, #15
 8001308:	4013      	ands	r3, r2
 800130a:	4a62      	ldr	r2, [pc, #392]	@ (8001494 <HAL_RCC_OscConfig+0x348>)
 800130c:	5cd3      	ldrb	r3, [r2, r3]
 800130e:	000a      	movs	r2, r1
 8001310:	40da      	lsrs	r2, r3
 8001312:	4b61      	ldr	r3, [pc, #388]	@ (8001498 <HAL_RCC_OscConfig+0x34c>)
 8001314:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001316:	4b61      	ldr	r3, [pc, #388]	@ (800149c <HAL_RCC_OscConfig+0x350>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2513      	movs	r5, #19
 800131c:	197c      	adds	r4, r7, r5
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff fc68 	bl	8000bf4 <HAL_InitTick>
 8001324:	0003      	movs	r3, r0
 8001326:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001328:	197b      	adds	r3, r7, r5
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d046      	beq.n	80013be <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001330:	197b      	adds	r3, r7, r5
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	e280      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001338:	2b00      	cmp	r3, #0
 800133a:	d027      	beq.n	800138c <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800133c:	4b51      	ldr	r3, [pc, #324]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2209      	movs	r2, #9
 8001342:	4393      	bics	r3, r2
 8001344:	0019      	movs	r1, r3
 8001346:	4b4f      	ldr	r3, [pc, #316]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fc97 	bl	8000c80 <HAL_GetTick>
 8001352:	0003      	movs	r3, r0
 8001354:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fc92 	bl	8000c80 <HAL_GetTick>
 800135c:	0002      	movs	r2, r0
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e266      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136a:	4b46      	ldr	r3, [pc, #280]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	2204      	movs	r2, #4
 8001370:	4013      	ands	r3, r2
 8001372:	d0f1      	beq.n	8001358 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001374:	4b43      	ldr	r3, [pc, #268]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a45      	ldr	r2, [pc, #276]	@ (8001490 <HAL_RCC_OscConfig+0x344>)
 800137a:	4013      	ands	r3, r2
 800137c:	0019      	movs	r1, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	021a      	lsls	r2, r3, #8
 8001384:	4b3f      	ldr	r3, [pc, #252]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001386:	430a      	orrs	r2, r1
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	e018      	b.n	80013be <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b3d      	ldr	r3, [pc, #244]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	4b3c      	ldr	r3, [pc, #240]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001392:	2101      	movs	r1, #1
 8001394:	438a      	bics	r2, r1
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff fc72 	bl	8000c80 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013a2:	f7ff fc6d 	bl	8000c80 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e241      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013b4:	4b33      	ldr	r3, [pc, #204]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	d1f1      	bne.n	80013a2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2210      	movs	r2, #16
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x27e>
 80013c8:	e0a1      	b.n	800150e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d140      	bne.n	8001452 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	4b2c      	ldr	r3, [pc, #176]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d005      	beq.n	80013e8 <HAL_RCC_OscConfig+0x29c>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e227      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013e8:	4b26      	ldr	r3, [pc, #152]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	4a2c      	ldr	r2, [pc, #176]	@ (80014a0 <HAL_RCC_OscConfig+0x354>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	0019      	movs	r1, r3
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1a      	ldr	r2, [r3, #32]
 80013f6:	4b23      	ldr	r3, [pc, #140]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80013f8:	430a      	orrs	r2, r1
 80013fa:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013fc:	4b21      	ldr	r3, [pc, #132]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	021b      	lsls	r3, r3, #8
 8001402:	0a19      	lsrs	r1, r3, #8
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	061a      	lsls	r2, r3, #24
 800140a:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800140c:	430a      	orrs	r2, r1
 800140e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a1b      	ldr	r3, [r3, #32]
 8001414:	0b5b      	lsrs	r3, r3, #13
 8001416:	3301      	adds	r3, #1
 8001418:	2280      	movs	r2, #128	@ 0x80
 800141a:	0212      	lsls	r2, r2, #8
 800141c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800141e:	4b19      	ldr	r3, [pc, #100]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	091b      	lsrs	r3, r3, #4
 8001424:	210f      	movs	r1, #15
 8001426:	400b      	ands	r3, r1
 8001428:	491a      	ldr	r1, [pc, #104]	@ (8001494 <HAL_RCC_OscConfig+0x348>)
 800142a:	5ccb      	ldrb	r3, [r1, r3]
 800142c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <HAL_RCC_OscConfig+0x34c>)
 8001430:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001432:	4b1a      	ldr	r3, [pc, #104]	@ (800149c <HAL_RCC_OscConfig+0x350>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2513      	movs	r5, #19
 8001438:	197c      	adds	r4, r7, r5
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff fbda 	bl	8000bf4 <HAL_InitTick>
 8001440:	0003      	movs	r3, r0
 8001442:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001444:	197b      	adds	r3, r7, r5
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d060      	beq.n	800150e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800144c:	197b      	adds	r3, r7, r5
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	e1f2      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d03f      	beq.n	80014da <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_RCC_OscConfig+0x338>)
 8001460:	2180      	movs	r1, #128	@ 0x80
 8001462:	0049      	lsls	r1, r1, #1
 8001464:	430a      	orrs	r2, r1
 8001466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc0a 	bl	8000c80 <HAL_GetTick>
 800146c:	0003      	movs	r3, r0
 800146e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001470:	e018      	b.n	80014a4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001472:	f7ff fc05 	bl	8000c80 <HAL_GetTick>
 8001476:	0002      	movs	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d911      	bls.n	80014a4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1d9      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
 8001484:	40021000 	.word	0x40021000
 8001488:	fffeffff 	.word	0xfffeffff
 800148c:	fffbffff 	.word	0xfffbffff
 8001490:	ffffe0ff 	.word	0xffffe0ff
 8001494:	08002f74 	.word	0x08002f74
 8001498:	20000000 	.word	0x20000000
 800149c:	20000004 	.word	0x20000004
 80014a0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80014a4:	4bc9      	ldr	r3, [pc, #804]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	2380      	movs	r3, #128	@ 0x80
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0e0      	beq.n	8001472 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014b0:	4bc6      	ldr	r3, [pc, #792]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4ac6      	ldr	r2, [pc, #792]	@ (80017d0 <HAL_RCC_OscConfig+0x684>)
 80014b6:	4013      	ands	r3, r2
 80014b8:	0019      	movs	r1, r3
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	4bc3      	ldr	r3, [pc, #780]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014c0:	430a      	orrs	r2, r1
 80014c2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c4:	4bc1      	ldr	r3, [pc, #772]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	021b      	lsls	r3, r3, #8
 80014ca:	0a19      	lsrs	r1, r3, #8
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	69db      	ldr	r3, [r3, #28]
 80014d0:	061a      	lsls	r2, r3, #24
 80014d2:	4bbe      	ldr	r3, [pc, #760]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014d4:	430a      	orrs	r2, r1
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	e019      	b.n	800150e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014da:	4bbc      	ldr	r3, [pc, #752]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4bbb      	ldr	r3, [pc, #748]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80014e0:	49bc      	ldr	r1, [pc, #752]	@ (80017d4 <HAL_RCC_OscConfig+0x688>)
 80014e2:	400a      	ands	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e6:	f7ff fbcb 	bl	8000c80 <HAL_GetTick>
 80014ea:	0003      	movs	r3, r0
 80014ec:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014ee:	e008      	b.n	8001502 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014f0:	f7ff fbc6 	bl	8000c80 <HAL_GetTick>
 80014f4:	0002      	movs	r2, r0
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d901      	bls.n	8001502 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80014fe:	2303      	movs	r3, #3
 8001500:	e19a      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001502:	4bb2      	ldr	r3, [pc, #712]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	2380      	movs	r3, #128	@ 0x80
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4013      	ands	r3, r2
 800150c:	d1f0      	bne.n	80014f0 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2208      	movs	r2, #8
 8001514:	4013      	ands	r3, r2
 8001516:	d036      	beq.n	8001586 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d019      	beq.n	8001554 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001520:	4baa      	ldr	r3, [pc, #680]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001522:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001524:	4ba9      	ldr	r3, [pc, #676]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001526:	2101      	movs	r1, #1
 8001528:	430a      	orrs	r2, r1
 800152a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152c:	f7ff fba8 	bl	8000c80 <HAL_GetTick>
 8001530:	0003      	movs	r3, r0
 8001532:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001534:	e008      	b.n	8001548 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001536:	f7ff fba3 	bl	8000c80 <HAL_GetTick>
 800153a:	0002      	movs	r2, r0
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e177      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001548:	4ba0      	ldr	r3, [pc, #640]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800154a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154c:	2202      	movs	r2, #2
 800154e:	4013      	ands	r3, r2
 8001550:	d0f1      	beq.n	8001536 <HAL_RCC_OscConfig+0x3ea>
 8001552:	e018      	b.n	8001586 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001554:	4b9d      	ldr	r3, [pc, #628]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001556:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001558:	4b9c      	ldr	r3, [pc, #624]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800155a:	2101      	movs	r1, #1
 800155c:	438a      	bics	r2, r1
 800155e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fb8e 	bl	8000c80 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800156a:	f7ff fb89 	bl	8000c80 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e15d      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800157c:	4b93      	ldr	r3, [pc, #588]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800157e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d1f1      	bne.n	800156a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2204      	movs	r2, #4
 800158c:	4013      	ands	r3, r2
 800158e:	d100      	bne.n	8001592 <HAL_RCC_OscConfig+0x446>
 8001590:	e0ae      	b.n	80016f0 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001592:	2023      	movs	r0, #35	@ 0x23
 8001594:	183b      	adds	r3, r7, r0
 8001596:	2200      	movs	r2, #0
 8001598:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800159a:	4b8c      	ldr	r3, [pc, #560]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800159c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	055b      	lsls	r3, r3, #21
 80015a2:	4013      	ands	r3, r2
 80015a4:	d109      	bne.n	80015ba <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b89      	ldr	r3, [pc, #548]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80015a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80015aa:	4b88      	ldr	r3, [pc, #544]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80015ac:	2180      	movs	r1, #128	@ 0x80
 80015ae:	0549      	lsls	r1, r1, #21
 80015b0:	430a      	orrs	r2, r1
 80015b2:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	2201      	movs	r2, #1
 80015b8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ba:	4b87      	ldr	r3, [pc, #540]	@ (80017d8 <HAL_RCC_OscConfig+0x68c>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	2380      	movs	r3, #128	@ 0x80
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4013      	ands	r3, r2
 80015c4:	d11a      	bne.n	80015fc <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c6:	4b84      	ldr	r3, [pc, #528]	@ (80017d8 <HAL_RCC_OscConfig+0x68c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b83      	ldr	r3, [pc, #524]	@ (80017d8 <HAL_RCC_OscConfig+0x68c>)
 80015cc:	2180      	movs	r1, #128	@ 0x80
 80015ce:	0049      	lsls	r1, r1, #1
 80015d0:	430a      	orrs	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015d4:	f7ff fb54 	bl	8000c80 <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015de:	f7ff fb4f 	bl	8000c80 <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b64      	cmp	r3, #100	@ 0x64
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e123      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015f0:	4b79      	ldr	r3, [pc, #484]	@ (80017d8 <HAL_RCC_OscConfig+0x68c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	2380      	movs	r3, #128	@ 0x80
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	4013      	ands	r3, r2
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	2380      	movs	r3, #128	@ 0x80
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	429a      	cmp	r2, r3
 8001606:	d107      	bne.n	8001618 <HAL_RCC_OscConfig+0x4cc>
 8001608:	4b70      	ldr	r3, [pc, #448]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800160a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800160c:	4b6f      	ldr	r3, [pc, #444]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800160e:	2180      	movs	r1, #128	@ 0x80
 8001610:	0049      	lsls	r1, r1, #1
 8001612:	430a      	orrs	r2, r1
 8001614:	651a      	str	r2, [r3, #80]	@ 0x50
 8001616:	e031      	b.n	800167c <HAL_RCC_OscConfig+0x530>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d10c      	bne.n	800163a <HAL_RCC_OscConfig+0x4ee>
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001622:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001624:	4b69      	ldr	r3, [pc, #420]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001626:	496b      	ldr	r1, [pc, #428]	@ (80017d4 <HAL_RCC_OscConfig+0x688>)
 8001628:	400a      	ands	r2, r1
 800162a:	651a      	str	r2, [r3, #80]	@ 0x50
 800162c:	4b67      	ldr	r3, [pc, #412]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800162e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001630:	4b66      	ldr	r3, [pc, #408]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001632:	496a      	ldr	r1, [pc, #424]	@ (80017dc <HAL_RCC_OscConfig+0x690>)
 8001634:	400a      	ands	r2, r1
 8001636:	651a      	str	r2, [r3, #80]	@ 0x50
 8001638:	e020      	b.n	800167c <HAL_RCC_OscConfig+0x530>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	689a      	ldr	r2, [r3, #8]
 800163e:	23a0      	movs	r3, #160	@ 0xa0
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	429a      	cmp	r2, r3
 8001644:	d10e      	bne.n	8001664 <HAL_RCC_OscConfig+0x518>
 8001646:	4b61      	ldr	r3, [pc, #388]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001648:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800164a:	4b60      	ldr	r3, [pc, #384]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800164c:	2180      	movs	r1, #128	@ 0x80
 800164e:	00c9      	lsls	r1, r1, #3
 8001650:	430a      	orrs	r2, r1
 8001652:	651a      	str	r2, [r3, #80]	@ 0x50
 8001654:	4b5d      	ldr	r3, [pc, #372]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001656:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001658:	4b5c      	ldr	r3, [pc, #368]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800165a:	2180      	movs	r1, #128	@ 0x80
 800165c:	0049      	lsls	r1, r1, #1
 800165e:	430a      	orrs	r2, r1
 8001660:	651a      	str	r2, [r3, #80]	@ 0x50
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x530>
 8001664:	4b59      	ldr	r3, [pc, #356]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001666:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001668:	4b58      	ldr	r3, [pc, #352]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800166a:	495a      	ldr	r1, [pc, #360]	@ (80017d4 <HAL_RCC_OscConfig+0x688>)
 800166c:	400a      	ands	r2, r1
 800166e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001670:	4b56      	ldr	r3, [pc, #344]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001672:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001674:	4b55      	ldr	r3, [pc, #340]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001676:	4959      	ldr	r1, [pc, #356]	@ (80017dc <HAL_RCC_OscConfig+0x690>)
 8001678:	400a      	ands	r2, r1
 800167a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001684:	f7ff fafc 	bl	8000c80 <HAL_GetTick>
 8001688:	0003      	movs	r3, r0
 800168a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800168c:	e009      	b.n	80016a2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff faf7 	bl	8000c80 <HAL_GetTick>
 8001692:	0002      	movs	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	4a51      	ldr	r2, [pc, #324]	@ (80017e0 <HAL_RCC_OscConfig+0x694>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0ca      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80016a2:	4b4a      	ldr	r3, [pc, #296]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80016a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016a6:	2380      	movs	r3, #128	@ 0x80
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d0ef      	beq.n	800168e <HAL_RCC_OscConfig+0x542>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fae6 	bl	8000c80 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80016ba:	f7ff fae1 	bl	8000c80 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a46      	ldr	r2, [pc, #280]	@ (80017e0 <HAL_RCC_OscConfig+0x694>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b4      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016ce:	4b3f      	ldr	r3, [pc, #252]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80016d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016d2:	2380      	movs	r3, #128	@ 0x80
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016da:	2323      	movs	r3, #35	@ 0x23
 80016dc:	18fb      	adds	r3, r7, r3
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d105      	bne.n	80016f0 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e4:	4b39      	ldr	r3, [pc, #228]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80016e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80016e8:	4b38      	ldr	r3, [pc, #224]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80016ea:	493e      	ldr	r1, [pc, #248]	@ (80017e4 <HAL_RCC_OscConfig+0x698>)
 80016ec:	400a      	ands	r2, r1
 80016ee:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d100      	bne.n	80016fa <HAL_RCC_OscConfig+0x5ae>
 80016f8:	e09d      	b.n	8001836 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	2b0c      	cmp	r3, #12
 80016fe:	d100      	bne.n	8001702 <HAL_RCC_OscConfig+0x5b6>
 8001700:	e076      	b.n	80017f0 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001706:	2b02      	cmp	r3, #2
 8001708:	d145      	bne.n	8001796 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b30      	ldr	r3, [pc, #192]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b2f      	ldr	r3, [pc, #188]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001710:	4935      	ldr	r1, [pc, #212]	@ (80017e8 <HAL_RCC_OscConfig+0x69c>)
 8001712:	400a      	ands	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fab3 	bl	8000c80 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff faae 	bl	8000c80 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e082      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001732:	4b26      	ldr	r3, [pc, #152]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	@ 0x80
 8001738:	049b      	lsls	r3, r3, #18
 800173a:	4013      	ands	r3, r2
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800173e:	4b23      	ldr	r3, [pc, #140]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	4a2a      	ldr	r2, [pc, #168]	@ (80017ec <HAL_RCC_OscConfig+0x6a0>)
 8001744:	4013      	ands	r3, r2
 8001746:	0019      	movs	r1, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	431a      	orrs	r2, r3
 8001758:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800175a:	430a      	orrs	r2, r1
 800175c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001764:	2180      	movs	r1, #128	@ 0x80
 8001766:	0449      	lsls	r1, r1, #17
 8001768:	430a      	orrs	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176c:	f7ff fa88 	bl	8000c80 <HAL_GetTick>
 8001770:	0003      	movs	r3, r0
 8001772:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001776:	f7ff fa83 	bl	8000c80 <HAL_GetTick>
 800177a:	0002      	movs	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e057      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001788:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	049b      	lsls	r3, r3, #18
 8001790:	4013      	ands	r3, r2
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x62a>
 8001794:	e04f      	b.n	8001836 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 800179c:	4912      	ldr	r1, [pc, #72]	@ (80017e8 <HAL_RCC_OscConfig+0x69c>)
 800179e:	400a      	ands	r2, r1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fa6d 	bl	8000c80 <HAL_GetTick>
 80017a6:	0003      	movs	r3, r0
 80017a8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff fa68 	bl	8000c80 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e03c      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80017be:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_RCC_OscConfig+0x680>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	@ 0x80
 80017c4:	049b      	lsls	r3, r3, #18
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x660>
 80017ca:	e034      	b.n	8001836 <HAL_RCC_OscConfig+0x6ea>
 80017cc:	40021000 	.word	0x40021000
 80017d0:	ffff1fff 	.word	0xffff1fff
 80017d4:	fffffeff 	.word	0xfffffeff
 80017d8:	40007000 	.word	0x40007000
 80017dc:	fffffbff 	.word	0xfffffbff
 80017e0:	00001388 	.word	0x00001388
 80017e4:	efffffff 	.word	0xefffffff
 80017e8:	feffffff 	.word	0xfeffffff
 80017ec:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e01d      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017fc:	4b10      	ldr	r3, [pc, #64]	@ (8001840 <HAL_RCC_OscConfig+0x6f4>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001802:	69ba      	ldr	r2, [r7, #24]
 8001804:	2380      	movs	r3, #128	@ 0x80
 8001806:	025b      	lsls	r3, r3, #9
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800180e:	429a      	cmp	r2, r3
 8001810:	d10f      	bne.n	8001832 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001812:	69ba      	ldr	r2, [r7, #24]
 8001814:	23f0      	movs	r3, #240	@ 0xf0
 8001816:	039b      	lsls	r3, r3, #14
 8001818:	401a      	ands	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181e:	429a      	cmp	r2, r3
 8001820:	d107      	bne.n	8001832 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	23c0      	movs	r3, #192	@ 0xc0
 8001826:	041b      	lsls	r3, r3, #16
 8001828:	401a      	ands	r2, r3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800182e:	429a      	cmp	r2, r3
 8001830:	d001      	beq.n	8001836 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001836:	2300      	movs	r3, #0
}
 8001838:	0018      	movs	r0, r3
 800183a:	46bd      	mov	sp, r7
 800183c:	b00a      	add	sp, #40	@ 0x28
 800183e:	bdb0      	pop	{r4, r5, r7, pc}
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b5b0      	push	{r4, r5, r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e128      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b96      	ldr	r3, [pc, #600]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d91e      	bls.n	80018a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b93      	ldr	r3, [pc, #588]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	4393      	bics	r3, r2
 800186e:	0019      	movs	r1, r3
 8001870:	4b90      	ldr	r3, [pc, #576]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001878:	f7ff fa02 	bl	8000c80 <HAL_GetTick>
 800187c:	0003      	movs	r3, r0
 800187e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001880:	e009      	b.n	8001896 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001882:	f7ff f9fd 	bl	8000c80 <HAL_GetTick>
 8001886:	0002      	movs	r2, r0
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	4a8a      	ldr	r2, [pc, #552]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e109      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001896:	4b87      	ldr	r3, [pc, #540]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1ee      	bne.n	8001882 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2202      	movs	r2, #2
 80018aa:	4013      	ands	r3, r2
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018ae:	4b83      	ldr	r3, [pc, #524]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	22f0      	movs	r2, #240	@ 0xf0
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	4b7f      	ldr	r3, [pc, #508]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2201      	movs	r2, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	d100      	bne.n	80018ce <HAL_RCC_ClockConfig+0x8a>
 80018cc:	e089      	b.n	80019e2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018d6:	4b79      	ldr	r3, [pc, #484]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	2380      	movs	r3, #128	@ 0x80
 80018dc:	029b      	lsls	r3, r3, #10
 80018de:	4013      	ands	r3, r2
 80018e0:	d120      	bne.n	8001924 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e0e1      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b03      	cmp	r3, #3
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018ee:	4b73      	ldr	r3, [pc, #460]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	049b      	lsls	r3, r3, #18
 80018f6:	4013      	ands	r3, r2
 80018f8:	d114      	bne.n	8001924 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0d5      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001906:	4b6d      	ldr	r3, [pc, #436]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2204      	movs	r2, #4
 800190c:	4013      	ands	r3, r2
 800190e:	d109      	bne.n	8001924 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e0ca      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001914:	4b69      	ldr	r3, [pc, #420]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	2380      	movs	r3, #128	@ 0x80
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e0c2      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001924:	4b65      	ldr	r3, [pc, #404]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2203      	movs	r2, #3
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4b62      	ldr	r3, [pc, #392]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001934:	430a      	orrs	r2, r1
 8001936:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f9a2 	bl	8000c80 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b02      	cmp	r3, #2
 8001946:	d111      	bne.n	800196c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001948:	e009      	b.n	800195e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800194a:	f7ff f999 	bl	8000c80 <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	4a58      	ldr	r2, [pc, #352]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e0a5      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800195e:	4b57      	ldr	r3, [pc, #348]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	220c      	movs	r2, #12
 8001964:	4013      	ands	r3, r2
 8001966:	2b08      	cmp	r3, #8
 8001968:	d1ef      	bne.n	800194a <HAL_RCC_ClockConfig+0x106>
 800196a:	e03a      	b.n	80019e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b03      	cmp	r3, #3
 8001972:	d111      	bne.n	8001998 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001974:	e009      	b.n	800198a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001976:	f7ff f983 	bl	8000c80 <HAL_GetTick>
 800197a:	0002      	movs	r2, r0
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	4a4d      	ldr	r2, [pc, #308]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d901      	bls.n	800198a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e08f      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198a:	4b4c      	ldr	r3, [pc, #304]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	220c      	movs	r2, #12
 8001990:	4013      	ands	r3, r2
 8001992:	2b0c      	cmp	r3, #12
 8001994:	d1ef      	bne.n	8001976 <HAL_RCC_ClockConfig+0x132>
 8001996:	e024      	b.n	80019e2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d11b      	bne.n	80019d8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019a0:	e009      	b.n	80019b6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a2:	f7ff f96d 	bl	8000c80 <HAL_GetTick>
 80019a6:	0002      	movs	r2, r0
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	4a42      	ldr	r2, [pc, #264]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e079      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80019b6:	4b41      	ldr	r3, [pc, #260]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	220c      	movs	r2, #12
 80019bc:	4013      	ands	r3, r2
 80019be:	2b04      	cmp	r3, #4
 80019c0:	d1ef      	bne.n	80019a2 <HAL_RCC_ClockConfig+0x15e>
 80019c2:	e00e      	b.n	80019e2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff f95c 	bl	8000c80 <HAL_GetTick>
 80019c8:	0002      	movs	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	4a3a      	ldr	r2, [pc, #232]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e068      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80019d8:	4b38      	ldr	r3, [pc, #224]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	220c      	movs	r2, #12
 80019de:	4013      	ands	r3, r2
 80019e0:	d1f0      	bne.n	80019c4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019e2:	4b34      	ldr	r3, [pc, #208]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d21e      	bcs.n	8001a2e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f0:	4b30      	ldr	r3, [pc, #192]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	2201      	movs	r2, #1
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 80019fc:	683a      	ldr	r2, [r7, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a02:	f7ff f93d 	bl	8000c80 <HAL_GetTick>
 8001a06:	0003      	movs	r3, r0
 8001a08:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	e009      	b.n	8001a20 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff f938 	bl	8000c80 <HAL_GetTick>
 8001a10:	0002      	movs	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	4a28      	ldr	r2, [pc, #160]	@ (8001ab8 <HAL_RCC_ClockConfig+0x274>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e044      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a20:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <HAL_RCC_ClockConfig+0x270>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2201      	movs	r2, #1
 8001a26:	4013      	ands	r3, r2
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2204      	movs	r2, #4
 8001a34:	4013      	ands	r3, r2
 8001a36:	d009      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a38:	4b20      	ldr	r3, [pc, #128]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	4a20      	ldr	r2, [pc, #128]	@ (8001ac0 <HAL_RCC_ClockConfig+0x27c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68da      	ldr	r2, [r3, #12]
 8001a46:	4b1d      	ldr	r3, [pc, #116]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2208      	movs	r2, #8
 8001a52:	4013      	ands	r3, r2
 8001a54:	d00a      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a56:	4b19      	ldr	r3, [pc, #100]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ac4 <HAL_RCC_ClockConfig+0x280>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	0019      	movs	r1, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	00da      	lsls	r2, r3, #3
 8001a66:	4b15      	ldr	r3, [pc, #84]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6c:	f000 f832 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8001a70:	0001      	movs	r1, r0
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_RCC_ClockConfig+0x278>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a12      	ldr	r2, [pc, #72]	@ (8001ac8 <HAL_RCC_ClockConfig+0x284>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	000a      	movs	r2, r1
 8001a82:	40da      	lsrs	r2, r3
 8001a84:	4b11      	ldr	r3, [pc, #68]	@ (8001acc <HAL_RCC_ClockConfig+0x288>)
 8001a86:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <HAL_RCC_ClockConfig+0x28c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	250b      	movs	r5, #11
 8001a8e:	197c      	adds	r4, r7, r5
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff f8af 	bl	8000bf4 <HAL_InitTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001a9a:	197b      	adds	r3, r7, r5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	e000      	b.n	8001aaa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b004      	add	sp, #16
 8001ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	40022000 	.word	0x40022000
 8001ab8:	00001388 	.word	0x00001388
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	fffff8ff 	.word	0xfffff8ff
 8001ac4:	ffffc7ff 	.word	0xffffc7ff
 8001ac8:	08002f74 	.word	0x08002f74
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	20000004 	.word	0x20000004

08001ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ad4:	b5b0      	push	{r4, r5, r7, lr}
 8001ad6:	b08e      	sub	sp, #56	@ 0x38
 8001ad8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001ada:	4b4c      	ldr	r3, [pc, #304]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x138>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae2:	230c      	movs	r3, #12
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d014      	beq.n	8001b14 <HAL_RCC_GetSysClockFreq+0x40>
 8001aea:	d900      	bls.n	8001aee <HAL_RCC_GetSysClockFreq+0x1a>
 8001aec:	e07b      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x112>
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	d002      	beq.n	8001af8 <HAL_RCC_GetSysClockFreq+0x24>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8001af6:	e076      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001af8:	4b44      	ldr	r3, [pc, #272]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x138>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2210      	movs	r2, #16
 8001afe:	4013      	ands	r3, r2
 8001b00:	d002      	beq.n	8001b08 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001b02:	4b43      	ldr	r3, [pc, #268]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b04:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001b06:	e07c      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001b08:	4b42      	ldr	r3, [pc, #264]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x140>)
 8001b0a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b0c:	e079      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b0e:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b10:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001b12:	e076      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b16:	0c9a      	lsrs	r2, r3, #18
 8001b18:	230f      	movs	r3, #15
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x148>)
 8001b1e:	5c9b      	ldrb	r3, [r3, r2]
 8001b20:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b24:	0d9a      	lsrs	r2, r3, #22
 8001b26:	2303      	movs	r3, #3
 8001b28:	4013      	ands	r3, r2
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b30:	68da      	ldr	r2, [r3, #12]
 8001b32:	2380      	movs	r3, #128	@ 0x80
 8001b34:	025b      	lsls	r3, r3, #9
 8001b36:	4013      	ands	r3, r2
 8001b38:	d01a      	beq.n	8001b70 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b3c:	61bb      	str	r3, [r7, #24]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	4a35      	ldr	r2, [pc, #212]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x144>)
 8001b44:	2300      	movs	r3, #0
 8001b46:	69b8      	ldr	r0, [r7, #24]
 8001b48:	69f9      	ldr	r1, [r7, #28]
 8001b4a:	f7fe fb89 	bl	8000260 <__aeabi_lmul>
 8001b4e:	0002      	movs	r2, r0
 8001b50:	000b      	movs	r3, r1
 8001b52:	0010      	movs	r0, r2
 8001b54:	0019      	movs	r1, r3
 8001b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f7fe fb5d 	bl	8000220 <__aeabi_uldivmod>
 8001b66:	0002      	movs	r2, r0
 8001b68:	000b      	movs	r3, r1
 8001b6a:	0013      	movs	r3, r2
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b6e:	e037      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001b70:	4b26      	ldr	r3, [pc, #152]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x138>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2210      	movs	r2, #16
 8001b76:	4013      	ands	r3, r2
 8001b78:	d01a      	beq.n	8001bb0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	60bb      	str	r3, [r7, #8]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	4a23      	ldr	r2, [pc, #140]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001b84:	2300      	movs	r3, #0
 8001b86:	68b8      	ldr	r0, [r7, #8]
 8001b88:	68f9      	ldr	r1, [r7, #12]
 8001b8a:	f7fe fb69 	bl	8000260 <__aeabi_lmul>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	000b      	movs	r3, r1
 8001b92:	0010      	movs	r0, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f7fe fb3d 	bl	8000220 <__aeabi_uldivmod>
 8001ba6:	0002      	movs	r2, r0
 8001ba8:	000b      	movs	r3, r1
 8001baa:	0013      	movs	r3, r2
 8001bac:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bae:	e017      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	4a16      	ldr	r2, [pc, #88]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x140>)
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f7fe fb50 	bl	8000260 <__aeabi_lmul>
 8001bc0:	0002      	movs	r2, r0
 8001bc2:	000b      	movs	r3, r1
 8001bc4:	0010      	movs	r0, r2
 8001bc6:	0019      	movs	r1, r3
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	001c      	movs	r4, r3
 8001bcc:	2300      	movs	r3, #0
 8001bce:	001d      	movs	r5, r3
 8001bd0:	0022      	movs	r2, r4
 8001bd2:	002b      	movs	r3, r5
 8001bd4:	f7fe fb24 	bl	8000220 <__aeabi_uldivmod>
 8001bd8:	0002      	movs	r2, r0
 8001bda:	000b      	movs	r3, r1
 8001bdc:	0013      	movs	r3, r2
 8001bde:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001be0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001be2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001be4:	e00d      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001be6:	4b09      	ldr	r3, [pc, #36]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x138>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	0b5b      	lsrs	r3, r3, #13
 8001bec:	2207      	movs	r2, #7
 8001bee:	4013      	ands	r3, r2
 8001bf0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001bf2:	6a3b      	ldr	r3, [r7, #32]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	2280      	movs	r2, #128	@ 0x80
 8001bf8:	0212      	lsls	r2, r2, #8
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	0013      	movs	r3, r2
 8001bfe:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c00:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001c04:	0018      	movs	r0, r3
 8001c06:	46bd      	mov	sp, r7
 8001c08:	b00e      	add	sp, #56	@ 0x38
 8001c0a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	003d0900 	.word	0x003d0900
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200
 8001c1c:	08002f8c 	.word	0x08002f8c

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b02      	ldr	r3, [pc, #8]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff2 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c3c:	0001      	movs	r1, r0
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	2207      	movs	r2, #7
 8001c46:	4013      	ands	r3, r2
 8001c48:	4a04      	ldr	r2, [pc, #16]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c4a:	5cd3      	ldrb	r3, [r2, r3]
 8001c4c:	40d9      	lsrs	r1, r3
 8001c4e:	000b      	movs	r3, r1
}
 8001c50:	0018      	movs	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08002f84 	.word	0x08002f84

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffdc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c68:	0001      	movs	r1, r0
 8001c6a:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	0adb      	lsrs	r3, r3, #11
 8001c70:	2207      	movs	r2, #7
 8001c72:	4013      	ands	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c76:	5cd3      	ldrb	r3, [r2, r3]
 8001c78:	40d9      	lsrs	r1, r3
 8001c7a:	000b      	movs	r3, r1
}
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	46c0      	nop			@ (mov r8, r8)
 8001c84:	40021000 	.word	0x40021000
 8001c88:	08002f84 	.word	0x08002f84

08001c8c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001c94:	2017      	movs	r0, #23
 8001c96:	183b      	adds	r3, r7, r0
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2220      	movs	r2, #32
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001ca6:	e0c7      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ca8:	4b84      	ldr	r3, [pc, #528]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001caa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	055b      	lsls	r3, r3, #21
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d109      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	4b81      	ldr	r3, [pc, #516]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cb6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cb8:	4b80      	ldr	r3, [pc, #512]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001cba:	2180      	movs	r1, #128	@ 0x80
 8001cbc:	0549      	lsls	r1, r1, #21
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001cc2:	183b      	adds	r3, r7, r0
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cc8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d11a      	bne.n	8001d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cd4:	4b7a      	ldr	r3, [pc, #488]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001cda:	2180      	movs	r1, #128	@ 0x80
 8001cdc:	0049      	lsls	r1, r1, #1
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ce2:	f7fe ffcd 	bl	8000c80 <HAL_GetTick>
 8001ce6:	0003      	movs	r3, r0
 8001ce8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cea:	e008      	b.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cec:	f7fe ffc8 	bl	8000c80 <HAL_GetTick>
 8001cf0:	0002      	movs	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e0d9      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b70      	ldr	r3, [pc, #448]	@ (8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	23c0      	movs	r3, #192	@ 0xc0
 8001d10:	039b      	lsls	r3, r3, #14
 8001d12:	4013      	ands	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	23c0      	movs	r3, #192	@ 0xc0
 8001d1c:	039b      	lsls	r3, r3, #14
 8001d1e:	4013      	ands	r3, r2
 8001d20:	68fa      	ldr	r2, [r7, #12]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d013      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	23c0      	movs	r3, #192	@ 0xc0
 8001d2c:	029b      	lsls	r3, r3, #10
 8001d2e:	401a      	ands	r2, r3
 8001d30:	23c0      	movs	r3, #192	@ 0xc0
 8001d32:	029b      	lsls	r3, r3, #10
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d10a      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001d38:	4b60      	ldr	r3, [pc, #384]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	029b      	lsls	r3, r3, #10
 8001d40:	401a      	ands	r2, r3
 8001d42:	2380      	movs	r3, #128	@ 0x80
 8001d44:	029b      	lsls	r3, r3, #10
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d101      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e0b1      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d52:	23c0      	movs	r3, #192	@ 0xc0
 8001d54:	029b      	lsls	r3, r3, #10
 8001d56:	4013      	ands	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d03b      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	23c0      	movs	r3, #192	@ 0xc0
 8001d66:	029b      	lsls	r3, r3, #10
 8001d68:	4013      	ands	r3, r2
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d033      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2220      	movs	r2, #32
 8001d76:	4013      	ands	r3, r2
 8001d78:	d02e      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001d7a:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d7e:	4a51      	ldr	r2, [pc, #324]	@ (8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d84:	4b4d      	ldr	r3, [pc, #308]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d86:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d88:	4b4c      	ldr	r3, [pc, #304]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d8a:	2180      	movs	r1, #128	@ 0x80
 8001d8c:	0309      	lsls	r1, r1, #12
 8001d8e:	430a      	orrs	r2, r1
 8001d90:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d92:	4b4a      	ldr	r3, [pc, #296]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001d96:	4b49      	ldr	r3, [pc, #292]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d98:	494b      	ldr	r1, [pc, #300]	@ (8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	2380      	movs	r3, #128	@ 0x80
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	4013      	ands	r3, r2
 8001dac:	d014      	beq.n	8001dd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7fe ff67 	bl	8000c80 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001db6:	e009      	b.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db8:	f7fe ff62 	bl	8000c80 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	4a42      	ldr	r2, [pc, #264]	@ (8001ecc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e072      	b.n	8001eb2 <HAL_RCCEx_PeriphCLKConfig+0x226>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001dce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001dd0:	2380      	movs	r3, #128	@ 0x80
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d0ef      	beq.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	4013      	ands	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685a      	ldr	r2, [r3, #4]
 8001de6:	23c0      	movs	r3, #192	@ 0xc0
 8001de8:	029b      	lsls	r3, r3, #10
 8001dea:	401a      	ands	r2, r3
 8001dec:	23c0      	movs	r3, #192	@ 0xc0
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d10c      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001df4:	4b31      	ldr	r3, [pc, #196]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a35      	ldr	r2, [pc, #212]	@ (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	0019      	movs	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	23c0      	movs	r3, #192	@ 0xc0
 8001e04:	039b      	lsls	r3, r3, #14
 8001e06:	401a      	ands	r2, r3
 8001e08:	4b2c      	ldr	r3, [pc, #176]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	601a      	str	r2, [r3, #0]
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e10:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	23c0      	movs	r3, #192	@ 0xc0
 8001e18:	029b      	lsls	r3, r3, #10
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e22:	2317      	movs	r3, #23
 8001e24:	18fb      	adds	r3, r7, r3
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	2b01      	cmp	r3, #1
 8001e2a:	d105      	bne.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2c:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e32:	4928      	ldr	r1, [pc, #160]	@ (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2202      	movs	r2, #2
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e42:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e46:	220c      	movs	r2, #12
 8001e48:	4393      	bics	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e60:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e64:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2208      	movs	r2, #8
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d009      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e82:	4a16      	ldr	r2, [pc, #88]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691a      	ldr	r2, [r3, #16]
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2280      	movs	r2, #128	@ 0x80
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d009      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001e9c:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ea0:	4a0f      	ldr	r2, [pc, #60]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b006      	add	sp, #24
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	46c0      	nop			@ (mov r8, r8)
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40007000 	.word	0x40007000
 8001ec4:	fffcffff 	.word	0xfffcffff
 8001ec8:	fff7ffff 	.word	0xfff7ffff
 8001ecc:	00001388 	.word	0x00001388
 8001ed0:	ffcfffff 	.word	0xffcfffff
 8001ed4:	efffffff 	.word	0xefffffff
 8001ed8:	fffff3ff 	.word	0xfffff3ff
 8001edc:	ffffcfff 	.word	0xffffcfff
 8001ee0:	fff3ffff 	.word	0xfff3ffff

08001ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e032      	b.n	8001f5c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2239      	movs	r2, #57	@ 0x39
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2238      	movs	r2, #56	@ 0x38
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7fe fdaf 	bl	8000a70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2239      	movs	r2, #57	@ 0x39
 8001f16:	2102      	movs	r1, #2
 8001f18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	0019      	movs	r1, r3
 8001f24:	0010      	movs	r0, r2
 8001f26:	f000 f935 	bl	8002194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	223e      	movs	r2, #62	@ 0x3e
 8001f2e:	2101      	movs	r1, #1
 8001f30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	223a      	movs	r2, #58	@ 0x3a
 8001f36:	2101      	movs	r1, #1
 8001f38:	5499      	strb	r1, [r3, r2]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	223b      	movs	r2, #59	@ 0x3b
 8001f3e:	2101      	movs	r1, #1
 8001f40:	5499      	strb	r1, [r3, r2]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	223c      	movs	r2, #60	@ 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	5499      	strb	r1, [r3, r2]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	223d      	movs	r2, #61	@ 0x3d
 8001f4e:	2101      	movs	r1, #1
 8001f50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2239      	movs	r2, #57	@ 0x39
 8001f56:	2101      	movs	r1, #1
 8001f58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b002      	add	sp, #8
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2239      	movs	r2, #57	@ 0x39
 8001f70:	5c9b      	ldrb	r3, [r3, r2]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d001      	beq.n	8001f7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e02e      	b.n	8001fda <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2239      	movs	r2, #57	@ 0x39
 8001f80:	2102      	movs	r1, #2
 8001f82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	05db      	lsls	r3, r3, #23
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d009      	beq.n	8001fa4 <HAL_TIM_Base_Start+0x40>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <HAL_TIM_Base_Start+0x80>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d004      	beq.n	8001fa4 <HAL_TIM_Base_Start+0x40>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a12      	ldr	r2, [pc, #72]	@ (8001fe8 <HAL_TIM_Base_Start+0x84>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d111      	bne.n	8001fc8 <HAL_TIM_Base_Start+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b06      	cmp	r3, #6
 8001fb4:	d010      	beq.n	8001fd8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc6:	e007      	b.n	8001fd8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	0018      	movs	r0, r3
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b004      	add	sp, #16
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	46c0      	nop			@ (mov r8, r8)
 8001fe4:	40010800 	.word	0x40010800
 8001fe8:	40011400 	.word	0x40011400

08001fec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	230f      	movs	r3, #15
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2238      	movs	r2, #56	@ 0x38
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x20>
 8002008:	2302      	movs	r3, #2
 800200a:	e0bc      	b.n	8002186 <HAL_TIM_ConfigClockSource+0x19a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2238      	movs	r2, #56	@ 0x38
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2239      	movs	r2, #57	@ 0x39
 8002018:	2102      	movs	r1, #2
 800201a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2277      	movs	r2, #119	@ 0x77
 8002028:	4393      	bics	r3, r2
 800202a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4a58      	ldr	r2, [pc, #352]	@ (8002190 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	68ba      	ldr	r2, [r7, #8]
 800203a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2280      	movs	r2, #128	@ 0x80
 8002042:	0192      	lsls	r2, r2, #6
 8002044:	4293      	cmp	r3, r2
 8002046:	d040      	beq.n	80020ca <HAL_TIM_ConfigClockSource+0xde>
 8002048:	2280      	movs	r2, #128	@ 0x80
 800204a:	0192      	lsls	r2, r2, #6
 800204c:	4293      	cmp	r3, r2
 800204e:	d900      	bls.n	8002052 <HAL_TIM_ConfigClockSource+0x66>
 8002050:	e088      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002052:	2280      	movs	r2, #128	@ 0x80
 8002054:	0152      	lsls	r2, r2, #5
 8002056:	4293      	cmp	r3, r2
 8002058:	d100      	bne.n	800205c <HAL_TIM_ConfigClockSource+0x70>
 800205a:	e088      	b.n	800216e <HAL_TIM_ConfigClockSource+0x182>
 800205c:	2280      	movs	r2, #128	@ 0x80
 800205e:	0152      	lsls	r2, r2, #5
 8002060:	4293      	cmp	r3, r2
 8002062:	d900      	bls.n	8002066 <HAL_TIM_ConfigClockSource+0x7a>
 8002064:	e07e      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002066:	2b70      	cmp	r3, #112	@ 0x70
 8002068:	d018      	beq.n	800209c <HAL_TIM_ConfigClockSource+0xb0>
 800206a:	d900      	bls.n	800206e <HAL_TIM_ConfigClockSource+0x82>
 800206c:	e07a      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800206e:	2b60      	cmp	r3, #96	@ 0x60
 8002070:	d04f      	beq.n	8002112 <HAL_TIM_ConfigClockSource+0x126>
 8002072:	d900      	bls.n	8002076 <HAL_TIM_ConfigClockSource+0x8a>
 8002074:	e076      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002076:	2b50      	cmp	r3, #80	@ 0x50
 8002078:	d03b      	beq.n	80020f2 <HAL_TIM_ConfigClockSource+0x106>
 800207a:	d900      	bls.n	800207e <HAL_TIM_ConfigClockSource+0x92>
 800207c:	e072      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800207e:	2b40      	cmp	r3, #64	@ 0x40
 8002080:	d057      	beq.n	8002132 <HAL_TIM_ConfigClockSource+0x146>
 8002082:	d900      	bls.n	8002086 <HAL_TIM_ConfigClockSource+0x9a>
 8002084:	e06e      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002086:	2b30      	cmp	r3, #48	@ 0x30
 8002088:	d063      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 800208a:	d86b      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 800208c:	2b20      	cmp	r3, #32
 800208e:	d060      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 8002090:	d868      	bhi.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d05d      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 8002096:	2b10      	cmp	r3, #16
 8002098:	d05b      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0x166>
 800209a:	e063      	b.n	8002164 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020ac:	f000 f940 	bl	8002330 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	2277      	movs	r2, #119	@ 0x77
 80020bc:	4313      	orrs	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	609a      	str	r2, [r3, #8]
      break;
 80020c8:	e052      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020da:	f000 f929 	bl	8002330 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2180      	movs	r1, #128	@ 0x80
 80020ea:	01c9      	lsls	r1, r1, #7
 80020ec:	430a      	orrs	r2, r1
 80020ee:	609a      	str	r2, [r3, #8]
      break;
 80020f0:	e03e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020fe:	001a      	movs	r2, r3
 8002100:	f000 f89c 	bl	800223c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2150      	movs	r1, #80	@ 0x50
 800210a:	0018      	movs	r0, r3
 800210c:	f000 f8f6 	bl	80022fc <TIM_ITRx_SetConfig>
      break;
 8002110:	e02e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800211e:	001a      	movs	r2, r3
 8002120:	f000 f8ba 	bl	8002298 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2160      	movs	r1, #96	@ 0x60
 800212a:	0018      	movs	r0, r3
 800212c:	f000 f8e6 	bl	80022fc <TIM_ITRx_SetConfig>
      break;
 8002130:	e01e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	001a      	movs	r2, r3
 8002140:	f000 f87c 	bl	800223c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2140      	movs	r1, #64	@ 0x40
 800214a:	0018      	movs	r0, r3
 800214c:	f000 f8d6 	bl	80022fc <TIM_ITRx_SetConfig>
      break;
 8002150:	e00e      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	0019      	movs	r1, r3
 800215c:	0010      	movs	r0, r2
 800215e:	f000 f8cd 	bl	80022fc <TIM_ITRx_SetConfig>
      break;
 8002162:	e005      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002164:	230f      	movs	r3, #15
 8002166:	18fb      	adds	r3, r7, r3
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
      break;
 800216c:	e000      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800216e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2239      	movs	r2, #57	@ 0x39
 8002174:	2101      	movs	r1, #1
 8002176:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2238      	movs	r2, #56	@ 0x38
 800217c:	2100      	movs	r1, #0
 800217e:	5499      	strb	r1, [r3, r2]

  return status;
 8002180:	230f      	movs	r3, #15
 8002182:	18fb      	adds	r3, r7, r3
 8002184:	781b      	ldrb	r3, [r3, #0]
}
 8002186:	0018      	movs	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	b004      	add	sp, #16
 800218c:	bd80      	pop	{r7, pc}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	ffff00ff 	.word	0xffff00ff

08002194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	2380      	movs	r3, #128	@ 0x80
 80021a8:	05db      	lsls	r3, r3, #23
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d007      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002230 <TIM_Base_SetConfig+0x9c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d003      	beq.n	80021be <TIM_Base_SetConfig+0x2a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a1e      	ldr	r2, [pc, #120]	@ (8002234 <TIM_Base_SetConfig+0xa0>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d108      	bne.n	80021d0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2270      	movs	r2, #112	@ 0x70
 80021c2:	4393      	bics	r3, r2
 80021c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	2380      	movs	r3, #128	@ 0x80
 80021d4:	05db      	lsls	r3, r3, #23
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d007      	beq.n	80021ea <TIM_Base_SetConfig+0x56>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a14      	ldr	r2, [pc, #80]	@ (8002230 <TIM_Base_SetConfig+0x9c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d003      	beq.n	80021ea <TIM_Base_SetConfig+0x56>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a13      	ldr	r2, [pc, #76]	@ (8002234 <TIM_Base_SetConfig+0xa0>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d108      	bne.n	80021fc <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <TIM_Base_SetConfig+0xa4>)
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2280      	movs	r2, #128	@ 0x80
 8002200:	4393      	bics	r3, r2
 8002202:	001a      	movs	r2, r3
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	689a      	ldr	r2, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	615a      	str	r2, [r3, #20]
}
 8002228:	46c0      	nop			@ (mov r8, r8)
 800222a:	46bd      	mov	sp, r7
 800222c:	b004      	add	sp, #16
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010800 	.word	0x40010800
 8002234:	40011400 	.word	0x40011400
 8002238:	fffffcff 	.word	0xfffffcff

0800223c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a1b      	ldr	r3, [r3, #32]
 800224c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	2201      	movs	r2, #1
 8002254:	4393      	bics	r3, r2
 8002256:	001a      	movs	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	22f0      	movs	r2, #240	@ 0xf0
 8002266:	4393      	bics	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	220a      	movs	r2, #10
 8002278:	4393      	bics	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	4313      	orrs	r3, r2
 8002282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	46c0      	nop			@ (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	b006      	add	sp, #24
 8002296:	bd80      	pop	{r7, pc}

08002298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	2210      	movs	r2, #16
 80022aa:	4393      	bics	r3, r2
 80022ac:	001a      	movs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a0d      	ldr	r2, [pc, #52]	@ (80022f8 <TIM_TI2_ConfigInputStage+0x60>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	031b      	lsls	r3, r3, #12
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	22a0      	movs	r2, #160	@ 0xa0
 80022d4:	4393      	bics	r3, r2
 80022d6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	693a      	ldr	r2, [r7, #16]
 80022ec:	621a      	str	r2, [r3, #32]
}
 80022ee:	46c0      	nop			@ (mov r8, r8)
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b006      	add	sp, #24
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			@ (mov r8, r8)
 80022f8:	ffff0fff 	.word	0xffff0fff

080022fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2270      	movs	r2, #112	@ 0x70
 8002310:	4393      	bics	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4313      	orrs	r3, r2
 800231a:	2207      	movs	r2, #7
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	609a      	str	r2, [r3, #8]
}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	46bd      	mov	sp, r7
 800232a:	b004      	add	sp, #16
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
 800233c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	4a09      	ldr	r2, [pc, #36]	@ (800236c <TIM_ETR_SetConfig+0x3c>)
 8002348:	4013      	ands	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	021a      	lsls	r2, r3, #8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	431a      	orrs	r2, r3
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4313      	orrs	r3, r2
 800235c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	609a      	str	r2, [r3, #8]
}
 8002364:	46c0      	nop			@ (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	b006      	add	sp, #24
 800236a:	bd80      	pop	{r7, pc}
 800236c:	ffff00ff 	.word	0xffff00ff

08002370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2238      	movs	r2, #56	@ 0x38
 800237e:	5c9b      	ldrb	r3, [r3, r2]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d101      	bne.n	8002388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002384:	2302      	movs	r3, #2
 8002386:	e042      	b.n	800240e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2238      	movs	r2, #56	@ 0x38
 800238c:	2101      	movs	r1, #1
 800238e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2239      	movs	r2, #57	@ 0x39
 8002394:	2102      	movs	r1, #2
 8002396:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	2270      	movs	r2, #112	@ 0x70
 80023ac:	4393      	bics	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	2380      	movs	r3, #128	@ 0x80
 80023c8:	05db      	lsls	r3, r3, #23
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d009      	beq.n	80023e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a11      	ldr	r2, [pc, #68]	@ (8002418 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d004      	beq.n	80023e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a0f      	ldr	r2, [pc, #60]	@ (800241c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10c      	bne.n	80023fc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2280      	movs	r2, #128	@ 0x80
 80023e6:	4393      	bics	r3, r2
 80023e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2239      	movs	r2, #57	@ 0x39
 8002400:	2101      	movs	r1, #1
 8002402:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2238      	movs	r2, #56	@ 0x38
 8002408:	2100      	movs	r1, #0
 800240a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			@ (mov r8, r8)
 8002418:	40010800 	.word	0x40010800
 800241c:	40011400 	.word	0x40011400

08002420 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e044      	b.n	80024bc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002436:	2b00      	cmp	r3, #0
 8002438:	d107      	bne.n	800244a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2278      	movs	r2, #120	@ 0x78
 800243e:	2100      	movs	r1, #0
 8002440:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f7fe fb29 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2224      	movs	r2, #36	@ 0x24
 800244e:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2101      	movs	r1, #1
 800245c:	438a      	bics	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f8d0 	bl	8002608 <UART_SetConfig>
 8002468:	0003      	movs	r3, r0
 800246a:	2b01      	cmp	r3, #1
 800246c:	d101      	bne.n	8002472 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e024      	b.n	80024bc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fb0d 	bl	8002a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	490d      	ldr	r1, [pc, #52]	@ (80024c4 <HAL_UART_Init+0xa4>)
 800248e:	400a      	ands	r2, r1
 8002490:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689a      	ldr	r2, [r3, #8]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	212a      	movs	r1, #42	@ 0x2a
 800249e:	438a      	bics	r2, r1
 80024a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2101      	movs	r1, #1
 80024ae:	430a      	orrs	r2, r1
 80024b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f000 fba5 	bl	8002c04 <UART_CheckIdleState>
 80024ba:	0003      	movs	r3, r0
}
 80024bc:	0018      	movs	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	b002      	add	sp, #8
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	ffffb7ff 	.word	0xffffb7ff

080024c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	1dbb      	adds	r3, r7, #6
 80024d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d000      	beq.n	80024e2 <HAL_UART_Transmit+0x1a>
 80024e0:	e08c      	b.n	80025fc <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_UART_Transmit+0x28>
 80024e8:	1dbb      	adds	r3, r7, #6
 80024ea:	881b      	ldrh	r3, [r3, #0]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e084      	b.n	80025fe <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	2380      	movs	r3, #128	@ 0x80
 80024fa:	015b      	lsls	r3, r3, #5
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d109      	bne.n	8002514 <HAL_UART_Transmit+0x4c>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d105      	bne.n	8002514 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	2201      	movs	r2, #1
 800250c:	4013      	ands	r3, r2
 800250e:	d001      	beq.n	8002514 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e074      	b.n	80025fe <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2284      	movs	r2, #132	@ 0x84
 8002518:	2100      	movs	r1, #0
 800251a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2221      	movs	r2, #33	@ 0x21
 8002520:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002522:	f7fe fbad 	bl	8000c80 <HAL_GetTick>
 8002526:	0003      	movs	r3, r0
 8002528:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1dba      	adds	r2, r7, #6
 800252e:	2150      	movs	r1, #80	@ 0x50
 8002530:	8812      	ldrh	r2, [r2, #0]
 8002532:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	1dba      	adds	r2, r7, #6
 8002538:	2152      	movs	r1, #82	@ 0x52
 800253a:	8812      	ldrh	r2, [r2, #0]
 800253c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	2380      	movs	r3, #128	@ 0x80
 8002544:	015b      	lsls	r3, r3, #5
 8002546:	429a      	cmp	r2, r3
 8002548:	d108      	bne.n	800255c <HAL_UART_Transmit+0x94>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d104      	bne.n	800255c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e003      	b.n	8002564 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002564:	e02f      	b.n	80025c6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	9300      	str	r3, [sp, #0]
 800256e:	0013      	movs	r3, r2
 8002570:	2200      	movs	r2, #0
 8002572:	2180      	movs	r1, #128	@ 0x80
 8002574:	f000 fbee 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002578:	1e03      	subs	r3, r0, #0
 800257a:	d004      	beq.n	8002586 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2220      	movs	r2, #32
 8002580:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e03b      	b.n	80025fe <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	881b      	ldrh	r3, [r3, #0]
 8002590:	001a      	movs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	05d2      	lsls	r2, r2, #23
 8002598:	0dd2      	lsrs	r2, r2, #23
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	3302      	adds	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
 80025a2:	e007      	b.n	80025b4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	781a      	ldrb	r2, [r3, #0]
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3301      	adds	r3, #1
 80025b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2252      	movs	r2, #82	@ 0x52
 80025b8:	5a9b      	ldrh	r3, [r3, r2]
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	3b01      	subs	r3, #1
 80025be:	b299      	uxth	r1, r3
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2252      	movs	r2, #82	@ 0x52
 80025c4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2252      	movs	r2, #82	@ 0x52
 80025ca:	5a9b      	ldrh	r3, [r3, r2]
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1c9      	bne.n	8002566 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	0013      	movs	r3, r2
 80025dc:	2200      	movs	r2, #0
 80025de:	2140      	movs	r1, #64	@ 0x40
 80025e0:	f000 fbb8 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 80025e4:	1e03      	subs	r3, r0, #0
 80025e6:	d004      	beq.n	80025f2 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e005      	b.n	80025fe <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	0018      	movs	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	b008      	add	sp, #32
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b08e      	sub	sp, #56	@ 0x38
 800260c:	af00      	add	r7, sp, #0
 800260e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002610:	231a      	movs	r3, #26
 8002612:	2218      	movs	r2, #24
 8002614:	189b      	adds	r3, r3, r2
 8002616:	19db      	adds	r3, r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	431a      	orrs	r2, r3
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	431a      	orrs	r2, r3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	4313      	orrs	r3, r2
 8002632:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4ab4      	ldr	r2, [pc, #720]	@ (800290c <UART_SetConfig+0x304>)
 800263c:	4013      	ands	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002646:	430a      	orrs	r2, r1
 8002648:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4aaf      	ldr	r2, [pc, #700]	@ (8002910 <UART_SetConfig+0x308>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4aa9      	ldr	r2, [pc, #676]	@ (8002914 <UART_SetConfig+0x30c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d004      	beq.n	800267c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002678:	4313      	orrs	r3, r2
 800267a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	4aa5      	ldr	r2, [pc, #660]	@ (8002918 <UART_SetConfig+0x310>)
 8002684:	4013      	ands	r3, r2
 8002686:	0019      	movs	r1, r3
 8002688:	69fb      	ldr	r3, [r7, #28]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800268e:	430a      	orrs	r2, r1
 8002690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4aa1      	ldr	r2, [pc, #644]	@ (800291c <UART_SetConfig+0x314>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d131      	bne.n	8002700 <UART_SetConfig+0xf8>
 800269c:	4ba0      	ldr	r3, [pc, #640]	@ (8002920 <UART_SetConfig+0x318>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026a0:	220c      	movs	r2, #12
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d01d      	beq.n	80026e4 <UART_SetConfig+0xdc>
 80026a8:	d823      	bhi.n	80026f2 <UART_SetConfig+0xea>
 80026aa:	2b08      	cmp	r3, #8
 80026ac:	d00c      	beq.n	80026c8 <UART_SetConfig+0xc0>
 80026ae:	d820      	bhi.n	80026f2 <UART_SetConfig+0xea>
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <UART_SetConfig+0xb2>
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d00e      	beq.n	80026d6 <UART_SetConfig+0xce>
 80026b8:	e01b      	b.n	80026f2 <UART_SetConfig+0xea>
 80026ba:	231b      	movs	r3, #27
 80026bc:	2218      	movs	r2, #24
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	19db      	adds	r3, r3, r7
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	e065      	b.n	8002794 <UART_SetConfig+0x18c>
 80026c8:	231b      	movs	r3, #27
 80026ca:	2218      	movs	r2, #24
 80026cc:	189b      	adds	r3, r3, r2
 80026ce:	19db      	adds	r3, r3, r7
 80026d0:	2202      	movs	r2, #2
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e05e      	b.n	8002794 <UART_SetConfig+0x18c>
 80026d6:	231b      	movs	r3, #27
 80026d8:	2218      	movs	r2, #24
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	19db      	adds	r3, r3, r7
 80026de:	2204      	movs	r2, #4
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e057      	b.n	8002794 <UART_SetConfig+0x18c>
 80026e4:	231b      	movs	r3, #27
 80026e6:	2218      	movs	r2, #24
 80026e8:	189b      	adds	r3, r3, r2
 80026ea:	19db      	adds	r3, r3, r7
 80026ec:	2208      	movs	r2, #8
 80026ee:	701a      	strb	r2, [r3, #0]
 80026f0:	e050      	b.n	8002794 <UART_SetConfig+0x18c>
 80026f2:	231b      	movs	r3, #27
 80026f4:	2218      	movs	r2, #24
 80026f6:	189b      	adds	r3, r3, r2
 80026f8:	19db      	adds	r3, r3, r7
 80026fa:	2210      	movs	r2, #16
 80026fc:	701a      	strb	r2, [r3, #0]
 80026fe:	e049      	b.n	8002794 <UART_SetConfig+0x18c>
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a83      	ldr	r2, [pc, #524]	@ (8002914 <UART_SetConfig+0x30c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d13e      	bne.n	8002788 <UART_SetConfig+0x180>
 800270a:	4b85      	ldr	r3, [pc, #532]	@ (8002920 <UART_SetConfig+0x318>)
 800270c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800270e:	23c0      	movs	r3, #192	@ 0xc0
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	4013      	ands	r3, r2
 8002714:	22c0      	movs	r2, #192	@ 0xc0
 8002716:	0112      	lsls	r2, r2, #4
 8002718:	4293      	cmp	r3, r2
 800271a:	d027      	beq.n	800276c <UART_SetConfig+0x164>
 800271c:	22c0      	movs	r2, #192	@ 0xc0
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	4293      	cmp	r3, r2
 8002722:	d82a      	bhi.n	800277a <UART_SetConfig+0x172>
 8002724:	2280      	movs	r2, #128	@ 0x80
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	4293      	cmp	r3, r2
 800272a:	d011      	beq.n	8002750 <UART_SetConfig+0x148>
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	0112      	lsls	r2, r2, #4
 8002730:	4293      	cmp	r3, r2
 8002732:	d822      	bhi.n	800277a <UART_SetConfig+0x172>
 8002734:	2b00      	cmp	r3, #0
 8002736:	d004      	beq.n	8002742 <UART_SetConfig+0x13a>
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	00d2      	lsls	r2, r2, #3
 800273c:	4293      	cmp	r3, r2
 800273e:	d00e      	beq.n	800275e <UART_SetConfig+0x156>
 8002740:	e01b      	b.n	800277a <UART_SetConfig+0x172>
 8002742:	231b      	movs	r3, #27
 8002744:	2218      	movs	r2, #24
 8002746:	189b      	adds	r3, r3, r2
 8002748:	19db      	adds	r3, r3, r7
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
 800274e:	e021      	b.n	8002794 <UART_SetConfig+0x18c>
 8002750:	231b      	movs	r3, #27
 8002752:	2218      	movs	r2, #24
 8002754:	189b      	adds	r3, r3, r2
 8002756:	19db      	adds	r3, r3, r7
 8002758:	2202      	movs	r2, #2
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e01a      	b.n	8002794 <UART_SetConfig+0x18c>
 800275e:	231b      	movs	r3, #27
 8002760:	2218      	movs	r2, #24
 8002762:	189b      	adds	r3, r3, r2
 8002764:	19db      	adds	r3, r3, r7
 8002766:	2204      	movs	r2, #4
 8002768:	701a      	strb	r2, [r3, #0]
 800276a:	e013      	b.n	8002794 <UART_SetConfig+0x18c>
 800276c:	231b      	movs	r3, #27
 800276e:	2218      	movs	r2, #24
 8002770:	189b      	adds	r3, r3, r2
 8002772:	19db      	adds	r3, r3, r7
 8002774:	2208      	movs	r2, #8
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e00c      	b.n	8002794 <UART_SetConfig+0x18c>
 800277a:	231b      	movs	r3, #27
 800277c:	2218      	movs	r2, #24
 800277e:	189b      	adds	r3, r3, r2
 8002780:	19db      	adds	r3, r3, r7
 8002782:	2210      	movs	r2, #16
 8002784:	701a      	strb	r2, [r3, #0]
 8002786:	e005      	b.n	8002794 <UART_SetConfig+0x18c>
 8002788:	231b      	movs	r3, #27
 800278a:	2218      	movs	r2, #24
 800278c:	189b      	adds	r3, r3, r2
 800278e:	19db      	adds	r3, r3, r7
 8002790:	2210      	movs	r2, #16
 8002792:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a5e      	ldr	r2, [pc, #376]	@ (8002914 <UART_SetConfig+0x30c>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d000      	beq.n	80027a0 <UART_SetConfig+0x198>
 800279e:	e084      	b.n	80028aa <UART_SetConfig+0x2a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027a0:	231b      	movs	r3, #27
 80027a2:	2218      	movs	r2, #24
 80027a4:	189b      	adds	r3, r3, r2
 80027a6:	19db      	adds	r3, r3, r7
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d01d      	beq.n	80027ea <UART_SetConfig+0x1e2>
 80027ae:	dc20      	bgt.n	80027f2 <UART_SetConfig+0x1ea>
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d015      	beq.n	80027e0 <UART_SetConfig+0x1d8>
 80027b4:	dc1d      	bgt.n	80027f2 <UART_SetConfig+0x1ea>
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <UART_SetConfig+0x1b8>
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d005      	beq.n	80027ca <UART_SetConfig+0x1c2>
 80027be:	e018      	b.n	80027f2 <UART_SetConfig+0x1ea>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027c0:	f7ff fa38 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80027c4:	0003      	movs	r3, r0
 80027c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027c8:	e01c      	b.n	8002804 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027ca:	4b55      	ldr	r3, [pc, #340]	@ (8002920 <UART_SetConfig+0x318>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2210      	movs	r2, #16
 80027d0:	4013      	ands	r3, r2
 80027d2:	d002      	beq.n	80027da <UART_SetConfig+0x1d2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027d4:	4b53      	ldr	r3, [pc, #332]	@ (8002924 <UART_SetConfig+0x31c>)
 80027d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027d8:	e014      	b.n	8002804 <UART_SetConfig+0x1fc>
          pclk = (uint32_t) HSI_VALUE;
 80027da:	4b53      	ldr	r3, [pc, #332]	@ (8002928 <UART_SetConfig+0x320>)
 80027dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027de:	e011      	b.n	8002804 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027e0:	f7ff f978 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80027e4:	0003      	movs	r3, r0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027e8:	e00c      	b.n	8002804 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027ea:	2380      	movs	r3, #128	@ 0x80
 80027ec:	021b      	lsls	r3, r3, #8
 80027ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80027f0:	e008      	b.n	8002804 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80027f6:	231a      	movs	r3, #26
 80027f8:	2218      	movs	r2, #24
 80027fa:	189b      	adds	r3, r3, r2
 80027fc:	19db      	adds	r3, r3, r7
 80027fe:	2201      	movs	r2, #1
 8002800:	701a      	strb	r2, [r3, #0]
        break;
 8002802:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d100      	bne.n	800280c <UART_SetConfig+0x204>
 800280a:	e12f      	b.n	8002a6c <UART_SetConfig+0x464>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	685a      	ldr	r2, [r3, #4]
 8002810:	0013      	movs	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	189b      	adds	r3, r3, r2
 8002816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002818:	429a      	cmp	r2, r3
 800281a:	d305      	bcc.n	8002828 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002824:	429a      	cmp	r2, r3
 8002826:	d906      	bls.n	8002836 <UART_SetConfig+0x22e>
      {
        ret = HAL_ERROR;
 8002828:	231a      	movs	r3, #26
 800282a:	2218      	movs	r2, #24
 800282c:	189b      	adds	r3, r3, r2
 800282e:	19db      	adds	r3, r3, r7
 8002830:	2201      	movs	r2, #1
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e11a      	b.n	8002a6c <UART_SetConfig+0x464>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002838:	613b      	str	r3, [r7, #16]
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	6939      	ldr	r1, [r7, #16]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	000b      	movs	r3, r1
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	0010      	movs	r0, r2
 8002848:	0205      	lsls	r5, r0, #8
 800284a:	431d      	orrs	r5, r3
 800284c:	000b      	movs	r3, r1
 800284e:	021c      	lsls	r4, r3, #8
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	2300      	movs	r3, #0
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68b8      	ldr	r0, [r7, #8]
 800285e:	68f9      	ldr	r1, [r7, #12]
 8002860:	1900      	adds	r0, r0, r4
 8002862:	4169      	adcs	r1, r5
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	603b      	str	r3, [r7, #0]
 800286a:	2300      	movs	r3, #0
 800286c:	607b      	str	r3, [r7, #4]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f7fd fcd5 	bl	8000220 <__aeabi_uldivmod>
 8002876:	0002      	movs	r2, r0
 8002878:	000b      	movs	r3, r1
 800287a:	0013      	movs	r3, r2
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800287e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002880:	23c0      	movs	r3, #192	@ 0xc0
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	429a      	cmp	r2, r3
 8002886:	d309      	bcc.n	800289c <UART_SetConfig+0x294>
 8002888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800288a:	2380      	movs	r3, #128	@ 0x80
 800288c:	035b      	lsls	r3, r3, #13
 800288e:	429a      	cmp	r2, r3
 8002890:	d204      	bcs.n	800289c <UART_SetConfig+0x294>
        {
          huart->Instance->BRR = usartdiv;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002898:	60da      	str	r2, [r3, #12]
 800289a:	e0e7      	b.n	8002a6c <UART_SetConfig+0x464>
        }
        else
        {
          ret = HAL_ERROR;
 800289c:	231a      	movs	r3, #26
 800289e:	2218      	movs	r2, #24
 80028a0:	189b      	adds	r3, r3, r2
 80028a2:	19db      	adds	r3, r3, r7
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
 80028a8:	e0e0      	b.n	8002a6c <UART_SetConfig+0x464>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	2380      	movs	r3, #128	@ 0x80
 80028b0:	021b      	lsls	r3, r3, #8
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d000      	beq.n	80028b8 <UART_SetConfig+0x2b0>
 80028b6:	e082      	b.n	80029be <UART_SetConfig+0x3b6>
  {
    switch (clocksource)
 80028b8:	231b      	movs	r3, #27
 80028ba:	2218      	movs	r2, #24
 80028bc:	189b      	adds	r3, r3, r2
 80028be:	19db      	adds	r3, r3, r7
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d834      	bhi.n	8002930 <UART_SetConfig+0x328>
 80028c6:	009a      	lsls	r2, r3, #2
 80028c8:	4b18      	ldr	r3, [pc, #96]	@ (800292c <UART_SetConfig+0x324>)
 80028ca:	18d3      	adds	r3, r2, r3
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d0:	f7ff f9b0 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80028d4:	0003      	movs	r3, r0
 80028d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028d8:	e033      	b.n	8002942 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028da:	f7ff f9c1 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80028de:	0003      	movs	r3, r0
 80028e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028e2:	e02e      	b.n	8002942 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <UART_SetConfig+0x318>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2210      	movs	r2, #16
 80028ea:	4013      	ands	r3, r2
 80028ec:	d002      	beq.n	80028f4 <UART_SetConfig+0x2ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002924 <UART_SetConfig+0x31c>)
 80028f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028f2:	e026      	b.n	8002942 <UART_SetConfig+0x33a>
          pclk = (uint32_t) HSI_VALUE;
 80028f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002928 <UART_SetConfig+0x320>)
 80028f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80028f8:	e023      	b.n	8002942 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028fa:	f7ff f8eb 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 80028fe:	0003      	movs	r3, r0
 8002900:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002902:	e01e      	b.n	8002942 <UART_SetConfig+0x33a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002904:	2380      	movs	r3, #128	@ 0x80
 8002906:	021b      	lsls	r3, r3, #8
 8002908:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800290a:	e01a      	b.n	8002942 <UART_SetConfig+0x33a>
 800290c:	efff69f3 	.word	0xefff69f3
 8002910:	ffffcfff 	.word	0xffffcfff
 8002914:	40004800 	.word	0x40004800
 8002918:	fffff4ff 	.word	0xfffff4ff
 800291c:	40004400 	.word	0x40004400
 8002920:	40021000 	.word	0x40021000
 8002924:	003d0900 	.word	0x003d0900
 8002928:	00f42400 	.word	0x00f42400
 800292c:	08002f98 	.word	0x08002f98
      default:
        pclk = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002934:	231a      	movs	r3, #26
 8002936:	2218      	movs	r2, #24
 8002938:	189b      	adds	r3, r3, r2
 800293a:	19db      	adds	r3, r3, r7
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
        break;
 8002940:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d100      	bne.n	800294a <UART_SetConfig+0x342>
 8002948:	e090      	b.n	8002a6c <UART_SetConfig+0x464>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800294a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800294c:	005a      	lsls	r2, r3, #1
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	18d2      	adds	r2, r2, r3
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	0019      	movs	r1, r3
 800295c:	0010      	movs	r0, r2
 800295e:	f7fd fbd3 	bl	8000108 <__udivsi3>
 8002962:	0003      	movs	r3, r0
 8002964:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002968:	2b0f      	cmp	r3, #15
 800296a:	d921      	bls.n	80029b0 <UART_SetConfig+0x3a8>
 800296c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	429a      	cmp	r2, r3
 8002974:	d21c      	bcs.n	80029b0 <UART_SetConfig+0x3a8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002978:	b29a      	uxth	r2, r3
 800297a:	200e      	movs	r0, #14
 800297c:	2418      	movs	r4, #24
 800297e:	1903      	adds	r3, r0, r4
 8002980:	19db      	adds	r3, r3, r7
 8002982:	210f      	movs	r1, #15
 8002984:	438a      	bics	r2, r1
 8002986:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	b29b      	uxth	r3, r3
 800298e:	2207      	movs	r2, #7
 8002990:	4013      	ands	r3, r2
 8002992:	b299      	uxth	r1, r3
 8002994:	1903      	adds	r3, r0, r4
 8002996:	19db      	adds	r3, r3, r7
 8002998:	1902      	adds	r2, r0, r4
 800299a:	19d2      	adds	r2, r2, r7
 800299c:	8812      	ldrh	r2, [r2, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	1902      	adds	r2, r0, r4
 80029a8:	19d2      	adds	r2, r2, r7
 80029aa:	8812      	ldrh	r2, [r2, #0]
 80029ac:	60da      	str	r2, [r3, #12]
 80029ae:	e05d      	b.n	8002a6c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 80029b0:	231a      	movs	r3, #26
 80029b2:	2218      	movs	r2, #24
 80029b4:	189b      	adds	r3, r3, r2
 80029b6:	19db      	adds	r3, r3, r7
 80029b8:	2201      	movs	r2, #1
 80029ba:	701a      	strb	r2, [r3, #0]
 80029bc:	e056      	b.n	8002a6c <UART_SetConfig+0x464>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029be:	231b      	movs	r3, #27
 80029c0:	2218      	movs	r2, #24
 80029c2:	189b      	adds	r3, r3, r2
 80029c4:	19db      	adds	r3, r3, r7
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d822      	bhi.n	8002a12 <UART_SetConfig+0x40a>
 80029cc:	009a      	lsls	r2, r3, #2
 80029ce:	4b2f      	ldr	r3, [pc, #188]	@ (8002a8c <UART_SetConfig+0x484>)
 80029d0:	18d3      	adds	r3, r2, r3
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029d6:	f7ff f92d 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80029da:	0003      	movs	r3, r0
 80029dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029de:	e021      	b.n	8002a24 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029e0:	f7ff f93e 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80029e4:	0003      	movs	r3, r0
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029e8:	e01c      	b.n	8002a24 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029ea:	4b29      	ldr	r3, [pc, #164]	@ (8002a90 <UART_SetConfig+0x488>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2210      	movs	r2, #16
 80029f0:	4013      	ands	r3, r2
 80029f2:	d002      	beq.n	80029fa <UART_SetConfig+0x3f2>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80029f4:	4b27      	ldr	r3, [pc, #156]	@ (8002a94 <UART_SetConfig+0x48c>)
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80029f8:	e014      	b.n	8002a24 <UART_SetConfig+0x41c>
          pclk = (uint32_t) HSI_VALUE;
 80029fa:	4b27      	ldr	r3, [pc, #156]	@ (8002a98 <UART_SetConfig+0x490>)
 80029fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80029fe:	e011      	b.n	8002a24 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a00:	f7ff f868 	bl	8001ad4 <HAL_RCC_GetSysClockFreq>
 8002a04:	0003      	movs	r3, r0
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a08:	e00c      	b.n	8002a24 <UART_SetConfig+0x41c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a0a:	2380      	movs	r3, #128	@ 0x80
 8002a0c:	021b      	lsls	r3, r3, #8
 8002a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8002a10:	e008      	b.n	8002a24 <UART_SetConfig+0x41c>
      default:
        pclk = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8002a16:	231a      	movs	r3, #26
 8002a18:	2218      	movs	r2, #24
 8002a1a:	189b      	adds	r3, r3, r2
 8002a1c:	19db      	adds	r3, r3, r7
 8002a1e:	2201      	movs	r2, #1
 8002a20:	701a      	strb	r2, [r3, #0]
        break;
 8002a22:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d020      	beq.n	8002a6c <UART_SetConfig+0x464>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	085a      	lsrs	r2, r3, #1
 8002a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a32:	18d2      	adds	r2, r2, r3
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	0019      	movs	r1, r3
 8002a3a:	0010      	movs	r0, r2
 8002a3c:	f7fd fb64 	bl	8000108 <__udivsi3>
 8002a40:	0003      	movs	r3, r0
 8002a42:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a46:	2b0f      	cmp	r3, #15
 8002a48:	d90a      	bls.n	8002a60 <UART_SetConfig+0x458>
 8002a4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a4c:	2380      	movs	r3, #128	@ 0x80
 8002a4e:	025b      	lsls	r3, r3, #9
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d205      	bcs.n	8002a60 <UART_SetConfig+0x458>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	e005      	b.n	8002a6c <UART_SetConfig+0x464>
      }
      else
      {
        ret = HAL_ERROR;
 8002a60:	231a      	movs	r3, #26
 8002a62:	2218      	movs	r2, #24
 8002a64:	189b      	adds	r3, r3, r2
 8002a66:	19db      	adds	r3, r3, r7
 8002a68:	2201      	movs	r2, #1
 8002a6a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a6c:	69fb      	ldr	r3, [r7, #28]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2200      	movs	r2, #0
 8002a76:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8002a78:	231a      	movs	r3, #26
 8002a7a:	2218      	movs	r2, #24
 8002a7c:	189b      	adds	r3, r3, r2
 8002a7e:	19db      	adds	r3, r3, r7
 8002a80:	781b      	ldrb	r3, [r3, #0]
}
 8002a82:	0018      	movs	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	b00e      	add	sp, #56	@ 0x38
 8002a88:	bdb0      	pop	{r4, r5, r7, pc}
 8002a8a:	46c0      	nop			@ (mov r8, r8)
 8002a8c:	08002fbc 	.word	0x08002fbc
 8002a90:	40021000 	.word	0x40021000
 8002a94:	003d0900 	.word	0x003d0900
 8002a98:	00f42400 	.word	0x00f42400

08002a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d00b      	beq.n	8002ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	4a4a      	ldr	r2, [pc, #296]	@ (8002be0 <UART_AdvFeatureConfig+0x144>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	0019      	movs	r1, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	2202      	movs	r2, #2
 8002acc:	4013      	ands	r3, r2
 8002ace:	d00b      	beq.n	8002ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	4a43      	ldr	r2, [pc, #268]	@ (8002be4 <UART_AdvFeatureConfig+0x148>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	0019      	movs	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aec:	2204      	movs	r2, #4
 8002aee:	4013      	ands	r3, r2
 8002af0:	d00b      	beq.n	8002b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	4a3b      	ldr	r2, [pc, #236]	@ (8002be8 <UART_AdvFeatureConfig+0x14c>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	0019      	movs	r1, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4013      	ands	r3, r2
 8002b12:	d00b      	beq.n	8002b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	4a34      	ldr	r2, [pc, #208]	@ (8002bec <UART_AdvFeatureConfig+0x150>)
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	2210      	movs	r2, #16
 8002b32:	4013      	ands	r3, r2
 8002b34:	d00b      	beq.n	8002b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf0 <UART_AdvFeatureConfig+0x154>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	0019      	movs	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b52:	2220      	movs	r2, #32
 8002b54:	4013      	ands	r3, r2
 8002b56:	d00b      	beq.n	8002b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	4a25      	ldr	r2, [pc, #148]	@ (8002bf4 <UART_AdvFeatureConfig+0x158>)
 8002b60:	4013      	ands	r3, r2
 8002b62:	0019      	movs	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b74:	2240      	movs	r2, #64	@ 0x40
 8002b76:	4013      	ands	r3, r2
 8002b78:	d01d      	beq.n	8002bb6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf8 <UART_AdvFeatureConfig+0x15c>)
 8002b82:	4013      	ands	r3, r2
 8002b84:	0019      	movs	r1, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	035b      	lsls	r3, r3, #13
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d10b      	bne.n	8002bb6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	4a15      	ldr	r2, [pc, #84]	@ (8002bfc <UART_AdvFeatureConfig+0x160>)
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	430a      	orrs	r2, r1
 8002bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	2280      	movs	r2, #128	@ 0x80
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d00b      	beq.n	8002bd8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002c00 <UART_AdvFeatureConfig+0x164>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	605a      	str	r2, [r3, #4]
  }
}
 8002bd8:	46c0      	nop			@ (mov r8, r8)
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	b002      	add	sp, #8
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	fffdffff 	.word	0xfffdffff
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	fffbffff 	.word	0xfffbffff
 8002bec:	ffff7fff 	.word	0xffff7fff
 8002bf0:	ffffefff 	.word	0xffffefff
 8002bf4:	ffffdfff 	.word	0xffffdfff
 8002bf8:	ffefffff 	.word	0xffefffff
 8002bfc:	ff9fffff 	.word	0xff9fffff
 8002c00:	fff7ffff 	.word	0xfff7ffff

08002c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b092      	sub	sp, #72	@ 0x48
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2284      	movs	r2, #132	@ 0x84
 8002c10:	2100      	movs	r1, #0
 8002c12:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c14:	f7fe f834 	bl	8000c80 <HAL_GetTick>
 8002c18:	0003      	movs	r3, r0
 8002c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2208      	movs	r2, #8
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d12c      	bne.n	8002c84 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	0391      	lsls	r1, r2, #14
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	4a46      	ldr	r2, [pc, #280]	@ (8002d4c <UART_CheckIdleState+0x148>)
 8002c34:	9200      	str	r2, [sp, #0]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f000 f88c 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002c3c:	1e03      	subs	r3, r0, #0
 8002c3e:	d021      	beq.n	8002c84 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c40:	f3ef 8310 	mrs	r3, PRIMASK
 8002c44:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002c48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	f383 8810 	msr	PRIMASK, r3
}
 8002c54:	46c0      	nop			@ (mov r8, r8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2180      	movs	r1, #128	@ 0x80
 8002c62:	438a      	bics	r2, r1
 8002c64:	601a      	str	r2, [r3, #0]
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c6c:	f383 8810 	msr	PRIMASK, r3
}
 8002c70:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2220      	movs	r2, #32
 8002c76:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2278      	movs	r2, #120	@ 0x78
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e05f      	b.n	8002d44 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d146      	bne.n	8002d20 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c94:	2280      	movs	r2, #128	@ 0x80
 8002c96:	03d1      	lsls	r1, r2, #15
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8002d4c <UART_CheckIdleState+0x148>)
 8002c9c:	9200      	str	r2, [sp, #0]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f000 f858 	bl	8002d54 <UART_WaitOnFlagUntilTimeout>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d03b      	beq.n	8002d20 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cac:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cae:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cb0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	f383 8810 	msr	PRIMASK, r3
}
 8002cbc:	46c0      	nop			@ (mov r8, r8)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4921      	ldr	r1, [pc, #132]	@ (8002d50 <UART_CheckIdleState+0x14c>)
 8002cca:	400a      	ands	r2, r1
 8002ccc:	601a      	str	r2, [r3, #0]
 8002cce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cda:	f3ef 8310 	mrs	r3, PRIMASK
 8002cde:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ce0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ce2:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	f383 8810 	msr	PRIMASK, r3
}
 8002cee:	46c0      	nop			@ (mov r8, r8)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	438a      	bics	r2, r1
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d02:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d04:	6a3b      	ldr	r3, [r7, #32]
 8002d06:	f383 8810 	msr	PRIMASK, r3
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2280      	movs	r2, #128	@ 0x80
 8002d10:	2120      	movs	r1, #32
 8002d12:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2278      	movs	r2, #120	@ 0x78
 8002d18:	2100      	movs	r1, #0
 8002d1a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e011      	b.n	8002d44 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2220      	movs	r2, #32
 8002d24:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2280      	movs	r2, #128	@ 0x80
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2278      	movs	r2, #120	@ 0x78
 8002d3e:	2100      	movs	r1, #0
 8002d40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b010      	add	sp, #64	@ 0x40
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	01ffffff 	.word	0x01ffffff
 8002d50:	fffffedf 	.word	0xfffffedf

08002d54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	1dfb      	adds	r3, r7, #7
 8002d62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d64:	e04b      	b.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	d048      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6c:	f7fd ff88 	bl	8000c80 <HAL_GetTick>
 8002d70:	0002      	movs	r2, r0
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e04b      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d035      	beq.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2208      	movs	r2, #8
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	2b08      	cmp	r3, #8
 8002d9e:	d111      	bne.n	8002dc4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2208      	movs	r2, #8
 8002da6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f83c 	bl	8002e28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2284      	movs	r2, #132	@ 0x84
 8002db4:	2108      	movs	r1, #8
 8002db6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2278      	movs	r2, #120	@ 0x78
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e02c      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	69da      	ldr	r2, [r3, #28]
 8002dca:	2380      	movs	r3, #128	@ 0x80
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	401a      	ands	r2, r3
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d112      	bne.n	8002dfe <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2280      	movs	r2, #128	@ 0x80
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	0018      	movs	r0, r3
 8002de6:	f000 f81f 	bl	8002e28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2284      	movs	r2, #132	@ 0x84
 8002dee:	2120      	movs	r1, #32
 8002df0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2278      	movs	r2, #120	@ 0x78
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e00f      	b.n	8002e1e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	4013      	ands	r3, r2
 8002e08:	68ba      	ldr	r2, [r7, #8]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	425a      	negs	r2, r3
 8002e0e:	4153      	adcs	r3, r2
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	001a      	movs	r2, r3
 8002e14:	1dfb      	adds	r3, r7, #7
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d0a4      	beq.n	8002d66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b004      	add	sp, #16
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b08e      	sub	sp, #56	@ 0x38
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e30:	f3ef 8310 	mrs	r3, PRIMASK
 8002e34:	617b      	str	r3, [r7, #20]
  return(result);
 8002e36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f383 8810 	msr	PRIMASK, r3
}
 8002e44:	46c0      	nop			@ (mov r8, r8)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4926      	ldr	r1, [pc, #152]	@ (8002eec <UART_EndRxTransfer+0xc4>)
 8002e52:	400a      	ands	r2, r1
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	f383 8810 	msr	PRIMASK, r3
}
 8002e60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e62:	f3ef 8310 	mrs	r3, PRIMASK
 8002e66:	623b      	str	r3, [r7, #32]
  return(result);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	f383 8810 	msr	PRIMASK, r3
}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	689a      	ldr	r2, [r3, #8]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	438a      	bics	r2, r1
 8002e86:	609a      	str	r2, [r3, #8]
 8002e88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e8e:	f383 8810 	msr	PRIMASK, r3
}
 8002e92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d118      	bne.n	8002ece <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002ea0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f383 8810 	msr	PRIMASK, r3
}
 8002eb0:	46c0      	nop			@ (mov r8, r8)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2110      	movs	r1, #16
 8002ebe:	438a      	bics	r2, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ec4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f383 8810 	msr	PRIMASK, r3
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2280      	movs	r2, #128	@ 0x80
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002ee2:	46c0      	nop			@ (mov r8, r8)
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	b00e      	add	sp, #56	@ 0x38
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	46c0      	nop			@ (mov r8, r8)
 8002eec:	fffffedf 	.word	0xfffffedf

08002ef0 <memset>:
 8002ef0:	0003      	movs	r3, r0
 8002ef2:	1882      	adds	r2, r0, r2
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d100      	bne.n	8002efa <memset+0xa>
 8002ef8:	4770      	bx	lr
 8002efa:	7019      	strb	r1, [r3, #0]
 8002efc:	3301      	adds	r3, #1
 8002efe:	e7f9      	b.n	8002ef4 <memset+0x4>

08002f00 <__libc_init_array>:
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	2600      	movs	r6, #0
 8002f04:	4c0c      	ldr	r4, [pc, #48]	@ (8002f38 <__libc_init_array+0x38>)
 8002f06:	4d0d      	ldr	r5, [pc, #52]	@ (8002f3c <__libc_init_array+0x3c>)
 8002f08:	1b64      	subs	r4, r4, r5
 8002f0a:	10a4      	asrs	r4, r4, #2
 8002f0c:	42a6      	cmp	r6, r4
 8002f0e:	d109      	bne.n	8002f24 <__libc_init_array+0x24>
 8002f10:	2600      	movs	r6, #0
 8002f12:	f000 f819 	bl	8002f48 <_init>
 8002f16:	4c0a      	ldr	r4, [pc, #40]	@ (8002f40 <__libc_init_array+0x40>)
 8002f18:	4d0a      	ldr	r5, [pc, #40]	@ (8002f44 <__libc_init_array+0x44>)
 8002f1a:	1b64      	subs	r4, r4, r5
 8002f1c:	10a4      	asrs	r4, r4, #2
 8002f1e:	42a6      	cmp	r6, r4
 8002f20:	d105      	bne.n	8002f2e <__libc_init_array+0x2e>
 8002f22:	bd70      	pop	{r4, r5, r6, pc}
 8002f24:	00b3      	lsls	r3, r6, #2
 8002f26:	58eb      	ldr	r3, [r5, r3]
 8002f28:	4798      	blx	r3
 8002f2a:	3601      	adds	r6, #1
 8002f2c:	e7ee      	b.n	8002f0c <__libc_init_array+0xc>
 8002f2e:	00b3      	lsls	r3, r6, #2
 8002f30:	58eb      	ldr	r3, [r5, r3]
 8002f32:	4798      	blx	r3
 8002f34:	3601      	adds	r6, #1
 8002f36:	e7f2      	b.n	8002f1e <__libc_init_array+0x1e>
 8002f38:	08002fe8 	.word	0x08002fe8
 8002f3c:	08002fe8 	.word	0x08002fe8
 8002f40:	08002fec 	.word	0x08002fec
 8002f44:	08002fe8 	.word	0x08002fe8

08002f48 <_init>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4e:	bc08      	pop	{r3}
 8002f50:	469e      	mov	lr, r3
 8002f52:	4770      	bx	lr

08002f54 <_fini>:
 8002f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f56:	46c0      	nop			@ (mov r8, r8)
 8002f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5a:	bc08      	pop	{r3}
 8002f5c:	469e      	mov	lr, r3
 8002f5e:	4770      	bx	lr
